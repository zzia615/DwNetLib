<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DataWindow</name>
    </assembly>
    <members>
        <member name="T:Sybase.DataWindow.PrintProperties">
            <summary>
            Exposes DataWindow Print and printer properties.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.ShowButtons">
            <summary>
            Whether buttons display on the printed output.  The default is false.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.CanUseDefaultPrinter">
            <summary>
            Whether a report can be printed on the default system printer if 
            the printer specified by the PrinterName property is not valid. 
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.ClipText">
            <summary>
            Whether the text of a static text field on a printed page is clipped to the dimensions of the 
            text field when the text field has no visible border setting.  The default is false.
             </summary><remarks>Values are:
            <list type="bullet"><item>True - The printed text does not overrun the text field. </item>
            <item>False (default) - The entire text can overrun the text field. </item></list>
            <para>Text is automatically clipped for text fields with visible border settings even if this 
            property is not set.</para></remarks>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.Collate">
            <summary>
            Whether printing is collated. Note that collating is usually 
            slower since the print is repeated to produce collated sets. </summary><remarks>Values are:
            <list type="bullet"><item>True (default) - Collate the pages of the print job.</item>
            <item>False - Do not collate.</item></list></remarks>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.ColorOutput">
            <summary>
            An boolean indicating whether the printed output will be color or monochrome. </summary><remarks> Values are:
          <list type="bullet"><item>  True - Output is in color.</item>
           <item> False - Output is monochrome</item></list>
            </remarks>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.NewspaperColumns">
            <summary>
            An integer specifying the number of newspaper-style columns the DataWindow will print on a page. 
            For purposes of page fitting, the whole DataWindow is a single column. The default is 1.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.NewsPaperColumnsWidth">
            <summary>
            An integer specifying the width of the newspaper-style columns in the units specified for the 
            DataWindow.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.Copies">
            <summary>
            An integer indicating the number of copies to be printed.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.CustomPageLength">
            <summary>
            An integer indicating the desired length of a custom paper size for printing. 
            Use this property in conjunction with the CustomPageWidth property and with PaperSize set to 256.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.CustomPageWidth">
            <summary>
            An integer indicating the desired width of a custom paper size for printing. 
            Use this property in conjunction with the CustomPageLength property and with PaperSize set to 256.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.DocumentName">
            <summary>
            A string containing the name that will display in the print queue when the user sends the 
            contents of the DataWindow object to the printer.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.Duplex">
            <summary>
            A PrintDuplex enumerated value indicating the orientation of the printed output. 
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.FileName">
            <summary>
            A string containing the name of the file to which you want to print the report. 
            An empty string means send to the printer.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.MarginBottom">
            <summary>
            An integer indicating the width of the bottom margin on the 
            printed page in the units specified for the DataWindow.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.MarginLeft">
            <summary>
            An integer indicating the width of the left margin on the 
            printed page in the units specified for the DataWindow.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.MarginRight">
            <summary>
            An integer indicating the width of the right margin on the 
            printed page in the units specified for the DataWindow.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.MarginTop">
            <summary>
            An integer indicating the width of the top margin on the 
            printed page in the units specified for the DataWindow.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.Orientation">
            <summary>
            A PrintOrientation enumerated value indicating the print orientation.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.PageRange">
            <summary>
            A string containing the numbers of the pages you want to print, separated by commas. 
            You can also specify a range with a dash. For example, to print pages 1, 2, and 5 through 10, 
            enter: "1,2, 5-10". The empty string means print all. 
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.RangeInclude">
            <summary>
            A PrintRangeInclude enumerated value indicating what pages to print within the desired range. 
            </summary><remarks>Values are:
            <list type="bullet">
            	<item>0— Default paper size for the printer</item>
            	<item>1 — Letter 8 1/2 x 11 in</item>
            	<item>2 — LetterSmall 8 1/2 x 11 in</item>
            	<item>3 — Tabloid 17 x 11 in</item>
            	<item>4 — Ledger 17 x 11 in</item>
            	<item>5 — Legal 8 1/2 x 14 in</item>
            	<item>6 — Statement 5 1/2 x 8 1/2 in</item>
            	<item>7 — Executive 7 1/4 x 10 1/2 in</item>
            	<item>8 — A3 297 x 420 mm</item>
            	<item>9 — A4 210 x 297 mm</item>
            	<item>10 — A4 Small 210 x 297 mm</item>
            	<item>11 — A5 148 x 210 mm</item>
            	<item>12 — B4 250 x 354 mm</item>
            	<item>13 — B5 182 x 257 mm</item>
            	<item>14 — Folio 8 1/2 x 13 in</item>
            	<item>15 — Quarto 215 x 275 mm</item>
            	<item>16 — 10x14 in17 — 11x17 in</item>
            	<item>18 — Note 8 1/2 x 11 in</item>
            	<item>19 — Envelope #9 3 7/8 x 8 7/8</item>
            	<item>20 — Envelope #10 4 1/8 x 9 1/2</item>
            	<item>21 — Envelope #11 4 1/2 x 10 3/8</item>
            	<item>22 — Envelope #12 4 x 11 1/276</item>
            	<item>23 — Envelope #14 5 x 11 1/2</item>
            	<item>24 — C size sheet</item>
            	<item>25 — D size sheet</item>
            	<item>26 — E size sheet</item>
            	<item>27 — Envelope DL 110 x 220 mm</item>
            	<item>28 — Envelope C5 162 x 229 mm</item>
            	<item>29 — Envelope C3 324 x 458 mm</item>
            	<item>30 — Envelope C4 229 x 324 mm</item>
            	<item>31 — Envelope C6 114 x 162 mm</item>
            	<item>32 — Envelope C65 114 x 229 mm</item>
            	<item>33 — Envelope B4 250 x 353 mm</item>
            	<item>34 — Envelope B5 176 x 250 mm</item>
            	<item>35 — Envelope B6 176 x 125 mm</item>
            	<item>36 — Envelope 110 x 230 mm</item>
            	<item>37 — Envelope Monarch 3.875 x 7.5 in</item>
            	<item>38 — 6 3/4 Envelope 3 5/8 x 6 1/2 in</item>
            	<item>39 — US Std Fanfold 14 7/8 x 11 in</item>
            	<item>40 — German Std Fanfold 8 1/2 x 12 in</item>
            	<item>41 — German Legal Fanfold 8 1/2 x 13 in</item>
            	<item>256 — User-defined paper size</item>
			</list>
</remarks><example>To specify a user-defined paper size, set the PaperSize property to 256, then set the CustomPageLength and CustomPageWidth properties to the desired size in millimeters. For example:<code>dwEmp.PrintProperties.PaperSize=256;
dwEmp.PrintProperties.CustomPageLength=254; //10 inches long
dwEmp.PrintProperties.CustomPageLength=190.5; //7 inches wide
	</code></example>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.PaperSize">
            <summary>
            An integer indicating the size of the paper used for the output.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.PaperSource">
            <summary>
            An integer indicating the bin that will be used as the paper source. 
            The integer you use depends on the tray number used by the printer. To determine the actual bin setting, you can query the printer with a utility that makes API calls to the printer driver.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.Preview">
            <summary>
            Whether the DataWindow object is displayed in preview mode. The default is false.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.ShowPreviewButtons">
            <summary>
            Whether buttons in the DataWindow object are displayed in preview mode. The default is false.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.ShowPreviewOutline">
            <summary>
            Whether the margin outline is shown when the DataWindow object is displayed in preview mode. The default is true.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.ShowPreviewRulers">
            <summary>
            Whether the rulers display when the DataWindow object displays in preview mode. The default is false.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.PreviewZoom">
            <summary>
            An integer indicating the zoom factor of the print preview. The default is 100%.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.PrinterName">
            <summary>
             A string containing the name of the printer you want to use to print the DataWindow report. 
            If the printer name is not specified or if the named printer cannot be found at runtime, 
            print output can be directed to the default printer for the user's machine by setting the 
            CanUseDefaultPrinter property. Otherwise, an error is returned.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.Prompt">
            <summary>
            Whether a Printer Setup dialog displays before a job prints so 
            the user can change the paper or other settings for the current printer. 
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.Quality">
            <summary>
            A PrintQuality enumerated value indicating the quality of the output. 
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.PrintProperties.Scale">
            <summary>
            An integer specifying the scale of the printed output as a percentage.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.PrintProperties.PrintDuplex">
            <summary>An integer indicating duplex or double-sided printing for printers capable of duplex printing. </summary><remarks> Values are:
             <list type="bullet">
             <item>1 - Normal (nonduplex) printing</item>
            	<item>2 - Short-edge binding (the long edge of the page is horizontal)</item>
            	<item>3 - Long-edge binding (the long edge of the page is vertical)</item>
            </list></remarks>
        </member>
        <member name="F:Sybase.DataWindow.PrintProperties.PrintDuplex.Simplex">
            <summary>Normal printing (1)</summary>
        </member>
        <member name="F:Sybase.DataWindow.PrintProperties.PrintDuplex.Horizontal">
            <summary>The long edge is horizontal (2)</summary>
        </member>
        <member name="F:Sybase.DataWindow.PrintProperties.PrintDuplex.Vertical">
            <summary>The long edge is vertical (3)</summary>
        </member>
        <member name="T:Sybase.DataWindow.PrintProperties.PrintOrientation">
            <summary>
             An integer indicating whether the print orientation is landscape, portrait, or uses the printer default. </summary><remarks> Values are:
            <list type="bullet">
             <item>0 - Default</item>
            	<item>1 - Landscape</item>
            	<item>2 - Portrait</item>
            </list></remarks>
        </member>
        <member name="F:Sybase.DataWindow.PrintProperties.PrintOrientation.Default">
            <summary>Use the default printer settings (0)</summary>
        </member>
        <member name="F:Sybase.DataWindow.PrintProperties.PrintOrientation.Landscape">
            <summary>Print in Landscape mode (1)</summary>
        </member>
        <member name="F:Sybase.DataWindow.PrintProperties.PrintOrientation.Portrait">
            <summary>Print in Portrait mode (2)</summary>
        </member>
        <member name="T:Sybase.DataWindow.PrintProperties.PrintRangeInclude">
            <summary>
             An integer indicating which pages to print within the desired range.  </summary><remarks> Values are:
             <list type="bullet">
             <item>0 - All pages</item>
            	<item>1 - Even pages</item>
            	<item>2 - Odd pages</item>
            </list></remarks>
        </member>
        <member name="F:Sybase.DataWindow.PrintProperties.PrintRangeInclude.All">
            <summary>Print all pages in the specified range (0)</summary>
        </member>
        <member name="F:Sybase.DataWindow.PrintProperties.PrintRangeInclude.Even">
            <summary>Print all even pages in the specified range (1)</summary>
        </member>
        <member name="F:Sybase.DataWindow.PrintProperties.PrintRangeInclude.Odd">
            <summary>Print all odd pages in the specified range (2)</summary>
        </member>
        <member name="T:Sybase.DataWindow.PrintProperties.PrintQuality">
            <summary>
             An integer indicating the quality of the output.  </summary><remarks> Values are:
             <list type="bullet">
             <item>0 - Default</item>
            	<item>1 - High</item>
            	<item>2 - Medium</item>
             <item>3 - Low</item>
            	<item>5 - Draft</item>
            </list>
             </remarks>
        </member>
        <member name="F:Sybase.DataWindow.PrintProperties.PrintQuality.Default">
            <summary>Default print quality (0)</summary>
        </member>
        <member name="F:Sybase.DataWindow.PrintProperties.PrintQuality.High">
            <summary>High print quality (1)</summary>
        </member>
        <member name="F:Sybase.DataWindow.PrintProperties.PrintQuality.Medium">
            <summary>Medium print quality (2)</summary>
        </member>
        <member name="F:Sybase.DataWindow.PrintProperties.PrintQuality.Low">
            <summary>Low print quality (3)</summary>
        </member>
        <member name="F:Sybase.DataWindow.PrintProperties.PrintQuality.Draft">
            <summary>Draft print quality (5)</summary>
        </member>
        <member name="T:Sybase.DataWindow.DeploymentForm2">
            <summary>
            Summary description for DeploymentForm2.
            </summary>
        </member>
        <member name="F:Sybase.DataWindow.DeploymentForm2.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.DeploymentForm2.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.DeploymentForm2.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.Win32.Win32Gdi">
            <summary>
            Summary description for Win32Gdi.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.TreeViewProperties">
            <summary>
		Exposes TreeView properties for a TreeView style DataWindow or DataStore.
		</summary>
        </member>
        <member name="P:Sybase.DataWindow.TreeViewProperties.ShowConnectLines">
            <summary>Whether or not to display connecting lines between the groups.</summary>
        </member>
        <member name="P:Sybase.DataWindow.TreeViewProperties.ShowLeafNodeConnectLines">
            <summary>Whether or not to display connecting lines between leaf nodes (detail band rows).</summary>
        </member>
        <member name="P:Sybase.DataWindow.TreeViewProperties.Indent">
            <summary>Defines the position of the State icon. The x position of the State icon is the position of its parent plus the indent value.</summary>
        </member>
        <member name="P:Sybase.DataWindow.TreeViewProperties.ShowTreeNodeIcon">
            <summary>Whether or not to show the tree node icon.</summary>
        </member>
        <member name="P:Sybase.DataWindow.TreeViewProperties.ExpandedTreeNodeIconName">
            <summary>An expression based property defining the file name of the expanded tree node icon.</summary>
        </member>
        <member name="P:Sybase.DataWindow.TreeViewProperties.CollapsedTreeNodeIconName">
            <summary>An expression based property defining the file name of the collapsed tree node icon.</summary>
        </member>
        <member name="P:Sybase.DataWindow.TreeViewProperties.TreeNodeIconName">
            <summary>An expression based property defining the file name of the tree node icon in the detail band.</summary>
        </member>
        <member name="P:Sybase.DataWindow.TreeViewProperties.DefaultExpandToLevel">
            <summary>Defines the default level the TreeView DataWindow will expand to.</summary>
        </member>
        <member name="P:Sybase.DataWindow.TreeViewProperties.StateIconAlignment">
            <summary>A StateIconAlignmentMode enumerated value indicating the vertical alignment mode for the state icon.</summary>
        </member>
        <member name="T:Sybase.DataWindow.TreeViewProperties.StateIconAlignmentMode">
            <summary>An integer indicating the alignment mode of the TreeView state icon.</summary><remarks> Values are:
		<list type="bullet">
		<item>0 - Middle alignment</item>
		<item>1 - Top alignment</item>
		<item>2 - Bottom alignment</item>
		</list>
		</remarks>
        </member>
        <member name="F:Sybase.DataWindow.LicenseTimeMeter.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.LicenseTimeMeter.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Sybase.DataWindow.LicenseTimeMeter.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.DeploymentForm">
            <summary>
            Summary description for Form1.
            </summary>
        </member>
        <member name="F:Sybase.DataWindow.DeploymentForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.DeploymentForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.DeploymentForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.DataWindowLoadFailedException">
            <summary>The exception that is thrown when the specified DataWindow object cannot be found in or loaded from the current <see cref="P:Sybase.DataWindow.IDataStore.LibraryList"/>.</summary>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowLoadFailedException.#ctor(System.String)">
            <!-- No matching elements were found for the following include tag --><include file="ExceptionComments.xml" path="doc/members/member[@name=&quot;M:DataWindowLoadFailedException&quot;]/*"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowLoadFailedException.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowLoadFailedException.DataWindowObject">
            <summary>Gets the name of the DataWindow object that cannot be loaded.</summary><value>The name of the DataWindow object that cannot be loaded.</value>
        </member>
        <member name="T:Sybase.DataWindow.DataWindowServerLoadFailedException">
            <summary>The exception that is thrown when the DataWindow .NET assembly cannot be loaded.</summary><remarks>This generally indicates a configuration issue on the machine running DataWindow .NET.  If this exception is encountered, ensure that <c>PBDWN110.dll</c> and <c>PBSHR110.dll</c> are available on the system PATH.</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowServerLoadFailedException.#ctor(System.String)">
            <!-- No matching elements were found for the following include tag --><include file="ExceptionComments.xml" path="doc/members/member[@name=&quot;M:DataWindowServerLoadFailedException&quot;]/*"/>
        </member>
        <member name="T:Sybase.DataWindow.DataWindowNotCreatedException">
            <summary>The exception that is thrown when a DataWindow or DataStore method is called, but a DataWindow object has not assigned or completed initialization.</summary>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowNotCreatedException.#ctor(System.String)">
            <summary>Initializes a new instance of the DataWindowNotCreatedException class with a specified method name.</summary><param name="method">Name of the method that causes this exception.</param>
        </member>
        <member name="T:Sybase.DataWindow.InvalidColumnException">
            <summary>The exception that is thrown when an invalid column number or name is provided as an argument to a DataWindow method.</summary>
        </member>
        <member name="M:Sybase.DataWindow.InvalidColumnException.#ctor(System.String,System.Int16)">
            <!-- No matching elements were found for the following include tag --><include file="ExceptionComments.xml" path="doc/members/member[@name=&quot;M:InvalidColumnException&quot;]/*"/>
        </member>
        <member name="M:Sybase.DataWindow.InvalidColumnException.#ctor(System.String,System.String)">
            <!-- No matching elements were found for the following include tag --><include file="ExceptionComments.xml" path="doc/members/member[@name=&quot;M:InvalidColumnException&quot;]/*"/>
        </member>
        <member name="P:Sybase.DataWindow.InvalidColumnException.ColumnNumber">
            <summary>Gets the number of the invalid column.</summary><value>The invalid column's number.<note><b>ColumnNumber</b> is 0 if the method that raises the exception was called using the column name versus number as an argument.</note></value>
        </member>
        <member name="P:Sybase.DataWindow.InvalidColumnException.ColumnName">
            <summary>Gets the name of the invalid column.</summary><value>The invalid column's name.<note><b>ColumnName</b> is the empty string ("") if the method that raises the exception was called using the column number versus name as an argument.</note></value>
        </member>
        <member name="T:Sybase.DataWindow.InvalidRowNumberException">
            <summary>The exception that is thrown when an invalid row number is provided as an argument to a DataWindow method.</summary>
        </member>
        <member name="M:Sybase.DataWindow.InvalidRowNumberException.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the InvalidRowNumberException class with a specified method name and row number.</summary><param name="Method">Name of the method that causes this exception.</param><param name="theRowNumber">The invalid row number.</param>
        </member>
        <member name="P:Sybase.DataWindow.InvalidRowNumberException.RowNumber">
            <summary>Gets the number of the invalid row.</summary><value>The invalid row's number.</value>
        </member>
        <member name="T:Sybase.DataWindow.MethodFailureException">
            <summary>The exception that is thrown when an unexpected error occurs in a DataWindow method.</summary>
        </member>
        <member name="M:Sybase.DataWindow.MethodFailureException.#ctor(System.String)">
            <summary>Initializes a new instance of the MethodFailureException class with a specified method name.</summary><param name="Method">Name of the method that causes this exception.</param>
        </member>
        <member name="M:Sybase.DataWindow.MethodFailureException.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the MethodFailureException class with a specified method name and datawindow error code.</summary><param name="Method">Name of the method that causes this exception.</param><param name="RC">DataWindow error code.</param>
        </member>
        <member name="M:Sybase.DataWindow.MethodFailureException.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the MethodFailureException class with a specified method name and error message.</summary><param name="Method">Name of the method that causes this exception.</param><param name="theErrorMessage">Error message.</param>
        </member>
        <member name="P:Sybase.DataWindow.MethodFailureException.ReturnCode">
            <summary>Gets an internal DataWindow .NET code.</summary><value>The error return code.</value><remarks>Depending upon the method that failed, <b>ReturnCode</b> may be undocumented and require the aid of Sybase Technical Support to interpret.</remarks>
        </member>
        <member name="T:Sybase.DataWindow.ChildNotFoundException">
            <summary>The exception that is thrown by <see cref="M:Sybase.DataWindow.IDataWindowBase.GetChild(System.String)"/> when the referenced child DataWindow does not exist. </summary>
        </member>
        <member name="M:Sybase.DataWindow.ChildNotFoundException.#ctor(System.String)">
            <!-- No matching elements were found for the following include tag --><include file="ExceptionComments.xml" path="doc/members/member[@name=&quot;M:ChildNotFoundException&quot;]/*"/>
        </member>
        <member name="P:Sybase.DataWindow.ChildNotFoundException.ChildName">
            <summary>Gets the name of the non-existent child DataWindow that was passed as the argument to <see cref="M:Sybase.DataWindow.IDataWindowBase.GetChild(System.String)"/>.</summary><value>The child DataWindow name.</value>
        </member>
        <member name="T:Sybase.DataWindow.InvalidExpressionException">
            <summary>The exception that is thrown when invalid DataWindow expression syntax is encountered.</summary>
        </member>
        <member name="M:Sybase.DataWindow.InvalidExpressionException.#ctor(System.String)">
            <!-- No matching elements were found for the following include tag --><include file="ExceptionComments.xml" path="doc/members/member[@name=&quot;M:InvalidExpressionException&quot;]/*"/>
        </member>
        <member name="M:Sybase.DataWindow.InvalidExpressionException.#ctor(System.String,System.String)">
            <!-- No matching elements were found for the following include tag --><include file="ExceptionComments.xml" path="doc/members/member[@name=&quot;M:InvalidExpressionException&quot;]/*"/>
        </member>
        <member name="P:Sybase.DataWindow.InvalidExpressionException.Expression">
            <summary>Gets the syntax string of the invalid expression.</summary><value>The invalid expression string.</value><remarks><b>InvalidExpressionException</b> is thrown by methods such as <see cref="M:Sybase.DataWindow.IDataWindowBase.FindRow(System.String,System.Int32,System.Int32)"/>, <see cref="M:Sybase.DataWindow.IDataWindowBase.SetFilter(System.String)"/>, and <see cref="M:Sybase.DataWindow.IDataWindowBase.SetSort(System.String)"/> when the expression arguments supplied to those methods are not valid DataWindow expressions.</remarks>
        </member>
        <member name="T:Sybase.DataWindow.DbErrorException">
            <summary>The exception that is thrown when a DataWindow .NET database operation causes an error.</summary>
        </member>
        <member name="M:Sybase.DataWindow.DbErrorException.#ctor(System.String)">
            <!-- No matching elements were found for the following include tag --><include file="ExceptionComments.xml" path="doc/members/member[@name=&quot;M:DbErrorException&quot;]/*"/>
        </member>
        <member name="M:Sybase.DataWindow.DbErrorException.#ctor(System.String,System.Int32,System.String,System.String,Sybase.DataWindow.DataBuffer,System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="ExceptionComments.xml" path="doc/members/member[@name=&quot;M:DbErrorException&quot;]/*"/>
        </member>
        <member name="P:Sybase.DataWindow.DbErrorException.SqlDbCode">
            <summary>Gets the vendor-specific error code.</summary><value>The error code.</value><remarks><b>SqlDbCode</b> contains the error code returned by the targeted database.  See your database vendor's documentation for information on the meaning of the code.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.DbErrorException.SqlErrorText">
            <summary>Gets the vendor-specific error message.</summary><value>The error message.</value><remarks><b>SqlErrorText</b> contains the error message returned by the targeted database.  
			See your database vendor's documentation for help in interpreting this message and for possible remedies.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.DbErrorException.SqlSyntax">
            <summary>Gets the text of the statement sent to the database when the error occurred.</summary><value>The statement sent to the database when the error occurred.</value>
        </member>
        <member name="P:Sybase.DataWindow.DbErrorException.Buffer">
            <summary>Gets the DataWindow buffer containing the row involved in the error.</summary><value>The DataWindow buffer involved in the error.</value>
        </member>
        <member name="P:Sybase.DataWindow.DbErrorException.RowNumber">
            <summary>Gets the number of the row in the DataWindow involved in the error.</summary><value>The number of the row involved in the error.</value>
        </member>
        <member name="T:Sybase.DataWindow.TransactionException">
            <summary>The exception that is thrown when an error occurs while executing a <see cref="T:Sybase.DataWindow.Transaction"/> method.</summary><remarks>Only the following three methods on the <see cref="T:Sybase.DataWindow.Transaction"/> class may throw this exception:
			<list type="bullet">
				<item><see cref="M:Sybase.DataWindow.Transaction.Connect"/></item>
				<item><see cref="M:Sybase.DataWindow.Transaction.Commit"/></item>
				<item><see cref="M:Sybase.DataWindow.Transaction.Rollback"/></item>
			</list></remarks>
        </member>
        <member name="P:Sybase.DataWindow.TransactionException.SqlDbCode">
            <summary>Gets the vendor-specific error code.</summary><value>The error code.</value><remarks><b>SqlDbCode</b> contains the error code returned by the targeted database.  See your database vendor's documentation for information on the meaning of the code.</remarks>		
        </member>
        <member name="P:Sybase.DataWindow.TransactionException.SqlErrorText">
            <summary>Gets the vendor-specific error message.</summary><value>The error message.</value><remarks><b>SqlErrorText</b> contains the error message returned by the targeted database.  
			See your database vendor's documentation for help in interpreting this message and for possible remedies.</remarks>		
        </member>
        <member name="T:Sybase.DataWindow.DataWindowLicenseLoadFailedException">
            <!-- No matching elements were found for the following include tag --><include file="ExceptionComments.xml" path="doc/members/member[@name=&quot;T:DataWindowLicenseLoadFailedException&quot;]/*"/>
        </member>
        <member name="T:Sybase.DataWindow.DataWindowControl">
            <summary>A visual control that contains a DataWindow object. 
      </summary>
            
        </member>
        <member name="T:Sybase.DataWindow.IDataWindow">
            <summary>
	    Extends the IDataStore interface with user-interface related methods and events for the DataWindowControl.
	</summary>
        </member>
        <member name="T:Sybase.DataWindow.IDataStore">
            <summary>
	    Extends the IDataWindowBase interface with DataStore properties, events, and methods, including
	    support for .NET Remoting.
	</summary>
        </member>
        <member name="T:Sybase.DataWindow.IDataWindowBase">
            <summary>
	    Properties and method common to all types of DataWindow .NET controls.
	</summary>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.BindAdoDataTable(System.Data.DataTable)">
            <summary>Binds the DataTable data to the DataWindow and copies DataTable data to the DataWindow.
			</summary><remarks>The BindAdoDataTable method does not support the Crosstab presentation style.
			</remarks><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.BindDataView(System.Data.DataView)">
            <summary>
			Binds the DataView data to the DataWindow object and copies the data from the DataView to the DataWindow.
			</summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.Collapse(System.Int32,System.Int32)">
            <summary>
			Collapse a group which has the specified group level and includes the specified row.
			</summary><param name="rowNumber">
			The number of the row that belongs to the group that will be collapsed.
			</param><param name="groupLevel">
			The level of the group that will be collapsed.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.CollapseAll">
            <summary>
			Collapses all groups.
			</summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.CollapseAllChildren(System.Int32,System.Int32)">
            <summary>
			Collapse a group and all child groups beneath it.
			</summary><param name="rowNumber">
			The number of the row that belongs to the group that will be collapsed.
			</param><param name="groupLevel">
			The level of the group that will be collapsed.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.CollapseLevel(System.Int32)">
            <summary>
			Collapse all groups within the specified group level.
			</summary><param name="level">
			The level of the groups that will be collapsed.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.DbCancel">
            <summary>Cancels the retrieval in process. 
      </summary><exception cref="T:System.InvalidOperationException">The object is not connected to a database. </exception><exception cref="T:System.NotSupportedException">The object is a DataWindowChild that is a DropDownDataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<!-- You can let users cancel a retrieval in progress by setting the Async database parameter to 1 before beginning a retrieve.-->
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.Retrieve(System.Data.DataTable)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.DeleteRow(System.Int32)">
            <summary>Deletes a row from the DataWindow. 
      </summary><param name="RowNumber">The number of the row to be deleted. If 0, the current row will be deleted.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not valid.</exception><exception cref="T:System.NotSupportedException">The assigned DataWindow object is a Crosstab.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The designated row is removed from the DataWindow's Primary buffer. If the DataWindow is not updatable, 
         all storage associated with the row is cleared. If the DataWindow is updatable, <b>DeleteRow</b> moves the row to 
         the DataWindow's Delete buffer. The row is not deleted from the database table until the application calls the <see cref="M:Sybase.DataWindow.IDataWindowBase.UpdateData"/> method. After 
         the <see cref="M:Sybase.DataWindow.IDataWindowBase.UpdateData"/> method has updated the database and the status flags are reset, the storage associated 
         with the row is cleared.</para>
			</remarks><example>This example shows the code for a button that deletes the last row from <c>dwItems</c>:
         <code>      
         [Visual Basic]
         Private Sub cb_delitem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cb_delitem.Click
            dwItems.DeleteRow(dwItems.RowCount)
         End Sub
         
         [C#]
         private void cb_delitem_Click(object sender, System.EventArgs e)
         {
            dwItems.DeleteRow(dwItems.RowCount);
         }
         </code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.Describe(System.String)">
            <summary>Reports the values of properties of a DataWindow object and the controls within it. 
      </summary><returns>A string that includes a value for each property.</returns><param name="Syntax">A string whose value is a blank-separated list of properties.</param><exception cref="T:System.ArgumentNullException">
				<i>Syntax</i> is null.</exception><exception cref="T:System.ArgumentException">
				<i>Syntax</i> contains an invalid property.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>
				<para>Use <b>Describe</b> to understand the structure of a DataWindow object. For example, you can find which 
         bands the DataWindow uses and the datatypes of its columns.</para>
				<para>
					<b>Describe</b> differs from <see cref="M:Sybase.DataWindow.IDataWindowBase.GetProperty(System.String)"/> in that it allows you go retrieve multiple properties in one invocation.</para>
			</remarks><example>This Visual Basic example changes a crosstab DataWindow to have a more formatted appearance: 
         <code>
         Private Sub ChangeCrossTab()
         
            'This function will dynamically change a crosstab to have a
            'more formatted appearance.
         
            Dim ColumnCount As Integer
            Dim Counter As Integer
            Dim CurrentIndex, NextIndex As Integer
         
            Dim Split, DWBand, ObjectType As String
            Dim DWObjects, DWObject, ModString As String
            Dim Temp As String
            Dim ColName As String
         
            Try
               ' returns a list of all of the DWObjects on the datawindow
               DWObjects = dwCust.Describe("datawindow.objects")
         
               CurrentIndex = 0
               NextIndex = DWObjects.IndexOf("\t")
         
               Do Until NextIndex = -1
                  DWObject = Mid(DWObjects, CurrentIndex, NextIndex - CurrentIndex)
         
                  'center text in the heading
                  DWBand = dwCust.Describe(DWObject + ".Band")
                  If DWBand.ToLower().Substring(0, 5).Equals("header") Then
                     ModString = ModString + DWObject + ".Alignment=2 " + DWObject + ".Font.Weight=700 "
                  End If
         
                  'format detail and total columns differently
                  ObjectType = dwCust.Describe(DWObject + ".Type")
                  If ObjectType.ToLower().Equals("compute") Then
                     Temp = dwCust.Describe(DWObject + ".Expression")
                     If Temp.IndexOf("sum") &gt; 0 Then
                        ModString = ModString + DWObject + ".Format='$#,##0' "
                     ElseIf Temp.IndexOf("count") &gt; 0 Then
                        ModString = ModString + DWObject + ".Format='#,##0' "
                     End If
                  ElseIf ObjectType.ToLower().Equals("column") Then
                     Temp = dwCust.Describe(DWObject + ".Coltype")
                     If Temp.IndexOf("dec") &gt; 0 Then
                        ModString = ModString + DWObject + ".Format='$#,##0.00' "
                     ElseIf Temp.IndexOf("num") &gt; 0 Then
                        ModString = ModString + DWObject + ".Format='#,##0.00' "
                     End If
                  End If
         
                  'loop through all the DWObjects on the datawindow
                  CurrentIndex = NextIndex + 1
                  NextIndex = DWObjects.IndexOf("\t", CurrentIndex)
               Loop
         
               dwCust.Modify(ModString)
         
            Catch ex As Exception
               ErrorHandler.HandleException(ex)
            End Try
         End Sub
         </code>
			</example><example>This line of code returns a string that lists all the controls in the DataWindow object contained in DW1:
         <code>str = DW1.Describe("datawindow.objects")</code>
			</example><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetProperty(System.String)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.Modify(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.Expand(System.Int32,System.Int32)">
            <summary>
			Expand a group which has the specified group level and includes the specified row.
			</summary><param name="rowNumber">
			The number of the row that belongs to the group that will be expanded.
			</param><param name="groupLevel">
			The level of the group that will be expanded.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.ExpandAll">
            <summary>
			Expands all groups.
			</summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.ExpandAllChildren(System.Int32,System.Int32)">
            <summary>
			Expand a group and all child groups beneath it.
			</summary><param name="rowNumber">
			The number of the row that belongs to the group that will be expanded.
			</param><param name="groupLevel">
			The level of the group that will be expanded.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.ExpandLevel(System.Int32)">
            <summary>
			Expand all groups within the specified group level.
			</summary><param name="level">
			The level of the groups that will be expanded.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.Filter">
            <summary>Moves rows that do not match the current filter expression from the Primary buffer to the Filter buffer. 
      </summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>When the <see cref="M:Sybase.DataWindow.IDataWindowBase.Retrieve(System.Data.DataTable)"/> method retrieves rows
         into the DataWindow, it automatically uses the current filter (which may be part of the definition of the DataWindow object). You only need to call this method after changing 
         the filter expression with <see cref="M:Sybase.DataWindow.IDataWindowBase.SetFilter(System.String)"/> or <see cref="M:Sybase.DataWindow.DataWindowControl.FilterDialog"/> or if the data has changed because of processing or user input.</para>
				<para>When you filter a DataWindow with groups, you should call <see cref="M:Sybase.DataWindow.IDataWindowBase.CalculateGroups"/> after calling <b>Filter</b>.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetFilter(System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.FilterDialog"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.FindRow(System.String,System.Int32,System.Int32)">
            <summary>Finds the next row in a DataWindow which meets the specified condition. 
      </summary><returns>The number of the first row between <i>BeginRow</i> and <i>EndRow</i> that meets the search criteria, or 0 if there are no such rows.
         </returns><param name="Expression">A string whose value is a boolean expression to be used as the 
         search criteria.</param><param name="BeginRow">The row number at which to begin the search.</param><param name="EndRow">The row number at which to end the search.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>BeginRow</i> or <i>EndRow</i> is less than zero.</exception><exception cref="T:Sybase.DataWindow.InvalidExpressionException">
				<i>Expression</i> is not valid DataWindow expression syntax.</exception><exception cref="T:System.ArgumentNullException">
				<i>Expression</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The search is case sensitive.</para>
				<para>To search backwards, make <i>EndRow</i> less than <i>BeginRow</i>. Beware of creating an endless loop, which can occur if you are searching for all occurrences within a DataWindow and the last 
         row satisfies the search criteria. To solve this problem, you can make <i>EndRow</i> 1 greater than the number of rows, or exit the search loop when the current 
         row (<i>BeginRow</i> for that iteration of the loop) is greater than the row count.</para>
				<para>If the 
         text you want to find includes quotes, you must treat the nested quote as doubly nested; therefore, you cannot simply alternate double and 
         single quotes, as you can in most strings. For example, to find the name O'Neil, <i>Expression</i> can be:
         <c>"O~~~'Neil"</c> (3 tildes and single quote) or <c>"O~~~~~"Neil"</c> (5 tildes and double quote) but not <c>"O'Neil"</c> or 
         <c>"O~"Neil"</c>.</para>
			</remarks><example>This example finds the first row where the employee salary is greater than 50,000:
         <code>RowNumber = dwStatus.FindRow("emp_salary &gt; 50000", 1, dwStatus.RowCount)</code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.FindGroupChange(System.Int32,System.Int16)">
            <summary>Searches for the next break (change in value) within the specified group. 
      </summary><returns>The row number beginning the next grouping within the level specified by <i>GroupLevel</i>, or 0 if no such row.
         </returns><param name="RowNumber">The row number at which you want to begin searching for the next group break.</param><param name="GroupLevel">The level of the group in which you are searching for the next break. </param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:System.ArgumentOutOfRangeException">
				<i>GroupLevel</i> is less than 0.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>If <i>RowNumber</i> begins a new grouping at <i>GroupLevel</i>, then that row is the one returned. 
         To continue searching for subsequent breaks, increment the starting row so that the search resumes with 
         the next row in the group. 
      </remarks><example>This statement searches for the first break in group 2 within <c>dwRegions</c> that occurs at or after row 5:
         <code>RowNumOfNextBreak = dwRegions.FindGroupChange(5, 2)</code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetChild(System.String)">
            <summary>Provides a reference to a DropDownDataWindow or to a report in a composite DataWindow. 
      </summary><returns>A DataWindowChild object.</returns><param name="ChildName">The name of a column with a DropDownDataWindow edit style or of a report in a composite DataWindow.</param><exception cref="T:Sybase.DataWindow.ChildNotFoundException">
				<i>ChildName</i> is not a DropDownDataWindow column or a report.</exception><exception cref="T:System.ArgumentNullException">
				<i>ChildName</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>A report is a read-only DataWindow 
         that is part of a composite DataWindow object. When you define a composite 
         DataWindow in DataWindow Designer, each report is given a name. You can see the name in the Name 
         option of the Properties view. You must use the report name (not the name of the DataWindow object 
         in which the report has been placed) when calling <b>GetChild</b>.</para>
				<para>Use <b>GetChild</b> when you need to explicitly retrieve data for a DropDownDataWindow or a report. Although 
         the DataWindow server automatically retrieves data for the DropDownDataWindow or report when the main DataWindow 
         is displayed, you need to explicitly retrieve data when there are retrieval arguments or when 
         conditions change and you want to retrieve new rows.</para>
				<para>You cannot use <b>GetChild</b> to get a reference to a report in a composite DataWindow when the report 
         itself is a composite or nested DataWindow.</para>
				<para>Changing certain property values using the <see cref="M:Sybase.DataWindow.IDataWindowBase.Modify(System.String)"/> or <see cref="M:Sybase.DataWindow.IDataWindowBase.SetProperty(System.String,System.String)"/> methods can cause the 
				reference returned by <b>GetChild</b> to 
         become invalid. Best practices dictate calling <b>GetChild</b> again after such changes.</para>
			</remarks><example>In a composite DataWindow there are two reports: orders and current inventory. The orders report 
         has a retrieval argument for selecting the order status. This report will display open orders. The composite 
         DataWindow is displayed in a DataWindow control called <c>dwNews</c>, and the reports are named <c>orders</c> and 
         <c>current_inv</c>. The following code in the Load event of the form that contains <c>dwNews</c> provides a retrieval 
         argument for <c>orders</c>.<code>
         Dim dwcOrders as Sybase.DataWindow.DataWindowChild
         Try
            dwcOrders = dwNews.GetChild("orders")
            dwcOrders.SetTransaction(myTrans)
            dwcOrders.Retrieve("open")
         Catch NoSuchChild As Sybase.DataWindow.ChildNotFoundException
            ' handle condition where order is not a valid child DataWindow
         Catch DbException As Sybase.DataWindow.DbErrorException
            ' handle database retrieval error
         End Try
         </code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetColumnObjectByNumber(System.Int16)">
            <summary>Returns a column within the DataWindow.</summary><returns>An instance of the <see cref="T:Sybase.DataWindow.GraphicObjectColumn"/> class representing the column.</returns><param name="ColumnNumber">The number of the column to be returned.</param><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is not valid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<see cref="T:Sybase.DataWindow.GraphicObjectColumn"/> is an abstract class, and the actual value returned will be:</para>
				<list type="bullet">
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectBlobColumn"/> for an OLE-Blob column,</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectComputedColumn"/> for a computed column, or</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectEditableColumn"/> for a database column.</item>
				</list>
				<para>After narrowing the returned object to one of these classes, you can access some of the more common properties of the object such as format, border style, X and Y coordinates, and colors.
				Additionally, you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.Modify(System.String)"/> or <see cref="M:Sybase.DataWindow.IDataWindowBase.SetProperty(System.String,System.String)"/> methods to modify properties that are not exposed by the <see cref="T:Sybase.DataWindow.GraphicObject"/> classes.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.IDataWindowBase.GetObjectByName(System.String)"/> method to get any control on a DataWindow, including a column,
				 when you know the name of that control.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetObjectByName(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetColumnValidation(System.Int16)">
            <overloads>Obtains the validation rule for a DataWindow column.</overloads><summary>Obtains the validation rule for a DataWindow column given the column number.
      </summary><returns>The validation rule for the column, or an empty string ("")
         if no validation rule is defined for the column.</returns><param name="ColumnNumber">The column number for which you want the validation rule.</param><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>You can use <b>GetColumnValidation</b> to save the current validation rule before calling <see cref="M:Sybase.DataWindow.IDataWindowBase.SetColumnValidation(System.Int16,System.String)"/> to change 
         the rule temporarily.
      </remarks><example>These statements save the validation rule for column 7 in the DataWindowControl <c>dwEmp</c> in 
         the string <c>Rule1</c> and set the new validation rule to the string <c>Rule2</c>:
         <code>
         Dim Rule1 as String
         Dim Rule2 as String
         ' ...
         Rule1 = dwEmp.GetColumnValidation(7)
         dwEmp.SetColumnValidation(7, Rule2)
         </code>
			</example><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetColumnValidation(System.Int16,System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetColumnValidation(System.String)">
            <summary>Obtains the validation rule for a DataWindow column given the column name.
      </summary><returns>The validation rule for the column, or an empty string ("")
         if no validation rule is defined for the column.</returns><param name="ColumnName">The name of the column for which you want the validation rule.</param><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>You can use <b>GetColumnValidation</b> to save the current validation rule before calling <see cref="M:Sybase.DataWindow.IDataWindowBase.SetColumnValidation(System.Int16,System.String)"/> to change 
         the rule temporarily.
      </remarks><example>These statements save the validation rule for the <c>salary</c> column in the DataWindowControl <c>dwEmp</c> in 
         the string <c>Rule1</c> and set the new validation rule to the string <c>Rule2</c>:
         <code>
         Dim Rule1 as String
         Dim Rule2 as String
         ' ...
         Rule1 = dwEmp.GetColumnValidation("salary")
         dwEmp.SetColumnValidation("salary", Rule2)
         </code>
			</example><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetColumnValidation(System.Int16,System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemDate(System.Int32,System.Int16)">
            <overloads>Gets a Date value from a DataWindow column.</overloads><summary>Gets the current Date value from a DataWindow column within a row of the Primary buffer given the column number.</summary><returns>The Date value located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.DateTime.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Date value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Date value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDate(RowNumber, ColumnNumber, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDate</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Date value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDate(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemDate(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a Date value from a DataWindow column given the column number.</summary><returns>The original or current Date value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.DateTime.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Date value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Date value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDate</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Date value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDate(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemDate(System.Int32,System.String)">
            <summary>Gets the current Date value from a DataWindow column within a row of the Primary buffer given the column name.</summary><returns>The Date value located at <i>RowNumber</i> and <i>ColumnName</i> as a System.DateTime.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Date value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Date value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDate(RowNumber, ColumnName, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>Use the <see cref="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDate</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Date value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDate(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemDate(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a Date value from a DataWindow column given the column name.</summary><returns>The original or current Date value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.DateTime.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Date value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Date value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use the <see cref="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDate</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Date value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDate(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemDateTime(System.Int32,System.Int16)">
            <overloads>Gets a DateTime value from a DataWindow column.</overloads><summary>Gets the current DateTime value from a DataWindow column within a row of the Primary buffer given the column number. 
      </summary><returns>The DateTime located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.DateTime.
				<note>The DataWindow DateTime datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemDateTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The DateTime value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a DateTime value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDateTime(RowNumber, ColumnNumber, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDateTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the DateTime value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDate(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a DateTime value from a DataWindow column given the column number.
      </summary><returns>The DateTime located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.DateTime.
				<note>The DataWindow DateTime datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemDateTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The DateTime value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a DateTime value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDateTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the DateTime value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDate(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemDateTime(System.Int32,System.String)">
            <summary>Gets the current DateTime value from a DataWindow column within a row of the Primary buffer given the column name.
      </summary><returns>The DateTime located at <i>RowNumber</i> and <i>ColumnName</i> as a System.DateTime.
				<note>The DataWindow DateTime datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemDateTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The DateTime value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a DateTime value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDateTime(RowNumber, ColumnName, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>Use the <see cref="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDateTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the DateTeime value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDate(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a DateTime value from a DataWindow column given the column name.</summary><returns>The DateTime located at <i>RowNumber</i> and <i>ColumnName</i> as a System.DateTime.
				<note>The DataWindow DateTime datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemDateTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The DateTime value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a DateTime value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use the <see cref="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDateTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the DateTime value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDate(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <overloads/><summary>Gets a Date, Time, or DateTime value from a DataWindow column given the column name.</summary><returns>The Date, Time, or DateTime value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlDateTime. 				<note>The DataWindow DateTime datatype stores fractional seconds to microsecond precision; the .NET System.Data.SqlTypes.SqlDateTime datatype stores only to millisecond precision. As a result, <b>GetItemSqlDateTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Date, Time, or DateTime value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>When the DataWindow column has a Date type, the resulting SqlDateTime variable will contain 00:00:00 as its time element.  When the DataWindow column has a Time type, the resulting SqlDateTime variable will contain the current date as its date element.</para>
				<para>In contrast to <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDateTime(System.Int32,System.Int16)"/>, <b>GetItemSqlDateTime</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlDateTime.IsNull"/> property of the returned SqlDateTime structure.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDate(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <overloads>Gets a Date, Time, or DateTime value from a DataWindow column.</overloads><summary>Gets a Date, Time, or DateTime value from a DataWindow column given the column number.</summary><returns>The Date, Time, or DateTime value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlDateTime. 				<note>The DataWindow DateTime datatype stores fractional seconds to microsecond precision; the .NET System.Data.SqlTypes.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemSqlDateTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Date, Time, or DateTime value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>When the DataWindow column has a Date type, the resulting SqlDateTime variable will contain 00:00:00 as its time element.  When the DataWindow column has a Time type, the resulting SqlDateTime variable will contain the current date as its date element.</para>
				<para>In contrast to <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDateTime(System.Int32,System.Int16)"/>, <b>GetItemSqlDateTime</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlDateTime.IsNull"/> property of the returned SqlDateTime structure.</para>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDate(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemDecimal(System.Int32,System.Int16)">
            <overloads>Gets a Decimal value from a DataWindow column.</overloads><summary>Gets the current Decimal value from a DataWindow column within a row of the Primary buffer given the column number.       </summary><returns>The Decimal value located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.Decimal.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Decimal value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Decimal value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDecimal(RowNumber, ColumnNumber, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDecimal</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Decimal value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDecimal(System.Int32,System.Int16,System.Decimal)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemDecimal(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a Decimal value from a DataWindow column given the column number.      </summary><returns>The original or current Decimal value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.Decimal.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Decimal value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Decimal value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDecimal</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Decimal value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDecimal(System.Int32,System.Int16,System.Decimal)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemDecimal(System.Int32,System.String)">
            <summary>Gets the current Decimal value from a DataWindow column within a row of the Primary buffer given the column name.      </summary><returns>The Decimal value located at <i>RowNumber</i> and <i>ColumnName</i> as a System.Decimal.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Decimal value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Decimal value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDecimal(RowNumber, ColumnName, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>Use the <see cref="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDecimal</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Decimal value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDecimal(System.Int32,System.Int16,System.Decimal)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a Decimal value from a DataWindow column given the column name.      </summary><returns>The original or current Decimal value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.Decimal.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Decimal value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Decimal value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use the <see cref="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDecimal</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Decimal value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDecimal(System.Int32,System.Int16,System.Decimal)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <overloads/><summary>Gets a Decimal value from a DataWindow column given the column name.</summary><returns>The Decimal value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlDecimal.		</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Decimal value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In contrast to <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDecimal(System.Int32,System.Int16)"/>, <b>GetItemSqlDecimal</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlDecimal.IsNull"/> property of the returned SqlDecimal structure.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDecimal(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDecimal(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <overloads>Gets a Decimal value from a DataWindow column.</overloads><summary>Gets a Decimal value from a DataWindow column given the column number.</summary><returns>The Decimal value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlDecimal.			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Decimal value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In contrast to <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDecimal(System.Int32,System.Int16)"/>, <b>GetItemSqlDecimal</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlDecimal.IsNull"/> property of the returned SqlDecimal structure.</para>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDecimal(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemDouble(System.Int32,System.Int16)">
            <overloads>Gets an integer or floating point value from a DataWindow column.</overloads><summary>Gets the current integer or floating point value from a DataWindow column within a row of the Primary buffer given the column number. </summary><returns>The value located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.Double.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain an integer or floating point value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDouble(RowNumber, ColumnNumber, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDouble</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDouble(System.Int32,System.Int16,System.Double)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemDouble(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets an integer or floating point value from a DataWindow column given the column number.      </summary><returns>The original or current value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.Double.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain an integer or floating point value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDouble</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDouble(System.Int32,System.Int16,System.Double)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemDouble(System.Int32,System.String)">
            <summary>Gets the current integer or floating point value from a DataWindow column within a row of the Primary buffer given the column name.      </summary><returns>The value located at <i>RowNumber</i> and <i>ColumnName</i> as a System.Double.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain an integer or floating point value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDouble(RowNumber, ColumnName, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>Use the <see cref="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDouble</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDouble(System.Int32,System.Int16,System.Double)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets an integer or floating point value from a DataWindow column given the column name.      </summary><returns>The original or current value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.Double.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain an integer or floating point value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use the <see cref="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDouble</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDouble(System.Int32,System.Int16,System.Double)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets an integer or floating point value from a DataWindow column given the column name.</summary><returns>The value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlDouble.		</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain an integer or floating point value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In contrast to <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDouble(System.Int32,System.Int16)"/>, <b>GetItemSqlDouble</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlDouble.IsNull"/> property of the returned SqlDouble structure.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDouble(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDouble(System.Int32,System.Int16,System.Data.SqlTypes.SqlDouble)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDouble(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <overloads>Gets an integer or floating point value from a DataWindow column.</overloads><summary>Gets an integer or floating point value from a DataWindow column given the column number.
      </summary><returns>The value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlDouble.			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain an integer or floating point value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In contrast to <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDouble(System.Int32,System.Int16)"/>, <b>GetItemSqlDouble</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlDouble.IsNull"/> property of the returned SqlDouble structure.</para>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDouble(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDouble(System.Int32,System.Int16,System.Data.SqlTypes.SqlDouble)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer)">
            <overloads>Reports the modification status of a DataWindow column in a specific row.</overloads><summary>Reports the modification status of a DataWindow column in a specific row, given the column number.</summary><returns>The <see cref="T:Sybase.DataWindow.ItemStatus"/>.</returns><param name="RowNumber">The row number containing the column of interest.</param><param name="ColumnNumber">The column number for which you want the modification status.</param><param name="Buffer">The DataWindow buffer containing the row and column for which you want to get the status.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>Use <b>GetItemStatus</b> to understand what SQL statements will be generated for new and changed information when you update 
         the database. <see cref="M:Sybase.DataWindow.IDataWindowBase.UpdateData"/> generates a SQL UPDATE statement for rows that have columns with an ItemStatus of Modified. The columns themselves
         are included in the SET clause of the UPDATE statement.
 </remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.ItemStatus)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemStatus(System.Int32,System.String,Sybase.DataWindow.DataBuffer)">
            <summary>Reports the modification status of a DataWindow column in a specific row, given the column name.</summary><returns>The <see cref="T:Sybase.DataWindow.ItemStatus"/>.</returns><param name="RowNumber">The row number containing the column of interest.</param><param name="ColumnName">The name of the column for which you want the modification status.</param><param name="Buffer">The DataWindow buffer containing the row and column for which you want to get the status.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>Use <b>GetItemStatus</b> to understand what SQL statements will be generated for new and changed information when you update 
         the database. <see cref="M:Sybase.DataWindow.IDataWindowBase.UpdateData"/> generates a SQL UPDATE statement for rows that have columns with an ItemStatus of Modified. The columns themselves
         are included in the SET clause of the UPDATE statement.
         </remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.ItemStatus)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemString(System.Int32,System.Int16)">
            <overloads>Gets a String value from a DataWindow column.</overloads><summary>Gets the current String value from a DataWindow column within a row of the Primary buffer given the column number. </summary><returns>The value located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.String.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The String value is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemString(RowNumber, ColumnNumber, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>You can use <b>GetItemString</b> for columns of any datatype. If the column type is not a string, the return value is a string representation of the data with the column format applied.  If <i>ColumnNumber</i>'s datatype is string, any assigned format string is not applied and the raw data is returned.</para>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemString</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemString(System.Int32,System.Int16,System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemString(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a String value from a DataWindow column given the column number.      </summary><returns>The original or current value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.String.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The String value is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>You can use <b>GetItemString</b> for columns of any datatype. If the column type is not a string, the return value is a string representation of the data with the column format applied.  If <i>ColumnNumber</i>'s datatype is string, any assigned format string is not applied and the raw data is returned.</para>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemString</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Double value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemString(System.Int32,System.Int16,System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemString(System.Int32,System.String)">
            <summary>Gets the current String value from a DataWindow column within a row of the Primary buffer given the column name.     
      </summary><returns>The value located at <i>RowNumber</i> and <i>ColumnName</i> as a System.String.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The String value is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemString(RowNumber, ColumnName, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>You can use <b>GetItemString</b> for columns of any datatype. If the column type is not a string, the return value is a string representation of the data with the column format applied.  If <i>ColumnName</i>'s type is a string, any assigned format string is not applied and the raw data is returned, unless <i>ColumnName</i> is a computed column, in which case the format is applied.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemString</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemString(System.Int32,System.Int16,System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a String value from a DataWindow column given the column name.      </summary><returns>The original or current value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.String.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The String value is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>You can use <b>GetItemString</b> for columns of any datatype. If the column type is not a string, the return value is a string representation of the data with the column format applied.  If <i>ColumnName</i>'s type is a string, any assigned format string is not applied and the raw data is returned, unless <i>ColumnName</i> is a computed column, in which case the format is applied.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemString</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemString(System.Int32,System.Int16,System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a String value from a DataWindow column given the column name.</summary><returns>The String value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlString.		</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In contrast to <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemString(System.Int32,System.Int16)"/>, <b>GetItemSqlString</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlString.IsNull"/> property of the returned SqlString structure.</para>
				<para>You can use <b>GetItemSqlString</b> for columns of any datatype. If the column type is not a string, the return value is a string representation of the data with the column format applied.  If <i>ColumnName</i>'s datatype is a string, any assigned format string is not applied and the raw data is returned, unless <i>ColumnName</i> is a computed column, in which case the format is applied.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemString(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlString(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <overloads>Gets a String value from a DataWindow column.</overloads><summary>Gets a String value from a DataWindow column given the column number.
      </summary><returns>The String value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlString.			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In contrast to <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemString(System.Int32,System.Int16)"/>, <b>GetItemSqlString</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlString.IsNull"/> property of the returned SqlString structure.</para>
				<para>You can use <b>GetItemSqlString</b> for columns of any datatype. If the column type is not a string, the return value is a string representation of the data with the column format applied.  If <i>ColumnNumber</i>'s datatype is a string, any assigned format string is not applied and the raw data is returned.</para>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemString(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemTime(System.Int32,System.Int16)">
            <overloads>Gets a Time value from a DataWindow column. </overloads><summary>Gets the current Time value from a DataWindow column within a row of the Primary buffer given the column number.
      </summary><returns>The Time value located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.DateTime.<note>The DataWindow Time datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Time value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Time value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemTime(RowNumber, ColumnNumber, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Time value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a Time value from a DataWindow column given the column number.      </summary><returns>The original or current Time value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.DateTime.<note>The DataWindow Time datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Time value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Time value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Time value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemTime(System.Int32,System.String)">
            <summary>Gets the current Time value from a DataWindow column within a row of the Primary buffer given the column name.   
      </summary><returns>The Time value located at <i>RowNumber</i> and <i>ColumnName</i> as a System.DateTime.<note>The DataWindow Time datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Time value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Time value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemTime(RowNumber, ColumnName, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>Use the <see cref="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Time value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetItemTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a Time value from a DataWindow column given the column name.  
      </summary><returns>The original or current Time value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.DateTime.<note>The DataWindow Time datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Time value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Time value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use the <see cref="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Time value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.FindNextModifiedRow(System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Reports the next row that has been modified in the specified buffer. 
      </summary><returns>The number of the first modified row in <i>Buffer</i> after <i>RowNumber</i>, or 0 if there is no such row.</returns><param name="RowNumber">The number of the row after which to begin the search. Use a value of 0 to search from the beginning.</param><param name="Buffer">The DataWindow buffer in which to search.</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>FindNextModifiedRow</b> reports rows with a <see cref="T:Sybase.DataWindow.RowStatus"/> of 
         NewAndModified and Modified.</para>
				<para>The search begins in the row after the value you specify in <i>RowNumber</i>. 
         This is different from the behavior of <see cref="M:Sybase.DataWindow.IDataWindowBase.FindRow(System.String,System.Int32,System.Int32)"/>, <see cref="M:Sybase.DataWindow.IDataWindowBase.FindGroupChange(System.Int32,System.Int16)"/>, and <see cref="M:Sybase.DataWindow.DataWindowControl.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)"/>, which begin searching in the row you specify.</para>
			</remarks><example>These C# statements count the number or rows that were modified in the Primary buffer of <c>dwStatus</c>
         and then display a message reporting the number modified (thus reporting the same value as the <see cref="P:Sybase.DataWindow.IDataWindowBase.ModifiedCount"/> property):
         <code>
         int NbrRows, rowNum, count;
         
         dwStatus.AcceptText();
         NbrRows = dwStatus.RowCount;
         count = 0;
         rowNum = 0;
         do 
         {
            rowNum = dwStatus.FindNextModifiedRow(rowNum, Sybase.DataWindow.DataBuffer.Primary);
         
            if (rowNum &gt; 0) 
              count = count + 1;
            else
              rowNum = NbrRows;
         }
         while (rowNum &lt; NbrRows);
         
         MessageBox.Show(count.ToString() + " rows were modified.", "Modified Count");	
         </code>
			</example><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.FindRow(System.String,System.Int32,System.Int32)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetObjectByName(System.String)">
            <summary>Returns a named control within the DataWindow object.</summary><returns>An instance of <see cref="T:Sybase.DataWindow.GraphicObject"/> representing the named control.</returns><param name="Name">The name of the control (e.g., column, button, text) within the DataWindow object.</param><exception cref="T:System.ArgumentNullException">
				<i>Name</i> is null.</exception><exception cref="T:System.ArgumentException">
				<i>Name</i> is not a valid control within the DataWindow object.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In most cases, you will need to cast the return value to the specific <see cref="T:Sybase.DataWindow.GraphicObject"/> descendant, namely: </para>
				<list type="bullet">
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectButton"/>
					</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectText"/>
					</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectPicture"/>
					</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectReport"/>
					</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectBlobColumn"/>
					</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectComputedColumn"/>
					</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectEditableColumn"/>
					</item>
				</list>
				<para>After narrowing the reference, you can directly modify some of the more common properties of the object
         such as format, border style, X and Y coordinates, and colors.  You can modify other properties not exposed in a <see cref="T:Sybase.DataWindow.GraphicObject"/> class using the <see cref="M:Sybase.DataWindow.IDataWindowBase.Modify(System.String)"/> or <see cref="M:Sybase.DataWindow.IDataWindowBase.SetProperty(System.String,System.String)"/> methods.</para>
				<para>To obtain a column object by the number of
         the column, use <see cref="M:Sybase.DataWindow.IDataWindowBase.GetColumnObjectByNumber(System.Int16)"/>.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetColumnObjectByNumber(System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetProperty(System.String)">
            <summary>Returns a property value for a control within a DataWindow object.</summary><returns>The property value as a string.</returns><param name="Syntax">The DataWindow object property.</param><exception cref="T:System.ArgumentNullException">
				<i>Syntax</i> is null.</exception><exception cref="T:System.ArgumentException">
				<i>Syntax</i> is not a valid property.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>
				<para>This method can be used in lieu of <see cref="M:Sybase.DataWindow.IDataWindowBase.Describe(System.String)"/> whenever a single property value is desired. It can also be used to obtain property values not exposed by the <see cref="T:Sybase.DataWindow.GraphicObject"/> classes.</para>
				<para>See the <i>DataWindow .NET Programmer's Guide</i> for a complete list of DataWindow object properties that can be used with <b>GetProperty</b>
				</para>
			</remarks><example>This C# code gets the value of a property in a DataWindow object when the user selects 
         an object type (such as a label or a column) and an attribute (such as <c>color</c> or <c>font.face</c>) from 
         two list boxes:
         <code>
         string strObject, strAttr, strValue;
         
         strObject = (string)lbObjects.SelectedItem;
         strAttr = (string)lbAttributes.SelectedItem;
         
         strValue = DW1.GetProperty(strObject + "." + strAttr);
         
         </code>
			</example><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetProperty(System.String,System.String)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.Describe(System.String)"/> 
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetRowFromRowId(System.Int32)">
            <overloads>Gets a row number given the unique row identifier associated with that row. </overloads><summary>Gets the number of a row in the Primary buffer given the unique row identifier associated with that row. 
      </summary><returns>The row number.</returns><param name="RowId">The row identifier for which you want the associated row number.</param><exception cref="T:System.ArgumentException">
				<i>RowId</i> is not a valid row identifier, or the row is no longer in the Primary buffer.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>This method allows you to use a unique row identifier to obtain the current row number position within the Primary buffer. 
			The row identifier is not affected by operations such as 
         Insert, Delete, Filter, or Sort that may change the original order - and consequently the row numbers.
      </remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetRowIdFromRow(System.Int32)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetRowFromRowId(System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Gets the number of a row in the specified buffer given the unique row identifier associated with that row. 
      </summary><returns>The row number.</returns><param name="RowId">The row identifier for which you want the associated row number.</param><param name="Buffer">The DataWindow buffer containing the row.</param><exception cref="T:System.ArgumentException">
				<i>RowId</i> is not a valid row identifier, or the row is no longer in the <i>Buffer</i>.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>This method allows you to use a unique row identifier to obtain the current row number position within the Primary buffer. 
			The row identifier is not affected by operations such as 
         Insert, Delete, Filter, or Sort that may change the original order - and consequently the row numbers.
      </remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetRowIdFromRow(System.Int32)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetRowIdFromRow(System.Int32)">
            <overloads>Gets a unique row identifier for a given row. </overloads><summary>Gets a unique row identifier for the given row in the Primary buffer.</summary><returns>The unique row identifier.</returns><param name="RowNumber">The number of the row for which you want a unique row identifier.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not a valid row in the Primary buffer.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>The row identifier value is not the same as the row number value used by many DataWindow .NET
         methods. First 
         convert the unique row identifier into a row number by calling <see cref="M:Sybase.DataWindow.IDataWindowBase.GetRowFromRowId(System.Int32)"/>.
      </remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetRowFromRowId(System.Int32)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetRowIdFromRow(System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Gets a unique row identifier for the given row in the specified buffer.</summary><returns>The unique row identifier.</returns><param name="RowNumber">The number of the row for which you want a unique row identifier.</param><param name="Buffer">The DataWindow buffer containing the row for which you want the unique identifier.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not a valid row in <i>Buffer</i>.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>The row identifier value is not the same as the row number value used by many DataWindow .NET
         methods. First 
         convert the unique row identifier into a row number by calling <see cref="M:Sybase.DataWindow.IDataWindowBase.GetRowFromRowId(System.Int32)"/>.
      </remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetRowFromRowId(System.Int32)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Reports the modification status of a row in a DataWindow.
      </summary><returns>The <see cref="T:Sybase.DataWindow.RowStatus"/>.</returns><param name="RowNumber">The row number for which you want the status.</param><param name="Buffer">The DataWindow buffer containing the row.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>Use <b>GetRowStatus</b> to understand what SQL statements will be generated when you update the database. 
			For rows in the Primary and Filter buffers, <see cref="M:Sybase.DataWindow.IDataWindowBase.UpdateData"/>
         generates:
         <list type="bullet">
					<item>an INSERT statement for rows in the Primary and Filter buffers with the NewAndModified status;</item>
					<item>an UPDATE statement for rows in the Primary and Filter buffers with Modified status.  The generated
					SQL statement includes the columns that have an
					<see cref="T:Sybase.DataWindow.ItemStatus"/> of Modified within the SET clause; and</item>
					<item> a DELETE statement for rows in the Delete buffer that have a status of Modified or NotModified. 
					New and NewAndModified rows do not exist yet in the database;
         therefore, there is nothing to actually delete.</item>
				</list>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.RowStatus)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.GetSqlSelect">
            <summary>Returns the SQL SELECT statement that is the data source of a DataWindow.</summary><returns>A string containing the SQL SELECT statement that is the source of the DataWindow, 
			or an empty string ("") if the data source is not a SELECT statement.</returns><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>
				<para>When you want to change the SQL SELECT statement for a DataWindow or DataStore at runtime
         you can use <b>GetSqlSelect</b> to save the current SELECT statement before making the change.</para>
				<para>When you 
         define a DataWindow object graphically in DataWindow Designer, a special SELECT statement (called a 
         PBSELECT statement) is stored with the DataWindow object.  This database-vendor independent syntax is
         translated to native SQL when a connected <see cref="T:Sybase.DataWindow.Transaction"/> or 
         <see cref="T:Sybase.DataWindow.AdoTransaction"/>
         has been associated with the DataWindowControl or DataStore via the <see cref="M:Sybase.DataWindow.IDataWindowBase.SetTransaction(Sybase.DataWindow.AdoTransaction)"/> method.  If there is no
         associated connection when <b>GetSqlSelect</b> is invoked, the PBSELECT syntax is returned.
         </para>
				<para>
					<b>GetSqlSelect</b> is equivalent to the following:
				<list type="bullet">
						<item>GetProperty("datawindow.table.select")</item>
						<item>Describe("datawindow.table.select")</item>
					</list>
				</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetSqlSelect(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.CalculateGroups">
            <summary>Recalculates the breaks in the grouping levels in a DataWindow. 
      </summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>Use <b>CalculateGroups</b> to force the DataWindow object to recalculate the breaks in the 
         grouping levels after you have added or modified rows in a DataWindow. <b>CalculateGroups</b> does not 
         sort the data before it recalculates the breaks; therefore, unless you populated the DataWindow 
         in a sorted order, call the <see cref="M:Sybase.DataWindow.IDataWindowBase.Sort"/> method to sort the data before you call <b>CalculateGroups</b>. 
      </remarks><example>This code imports new rows from a file into the DataWindow <c>dwEmp</c> and recalculates 
         the group breaks after applying the default sort ordering stored as part of the DataWindow object:
         <code>
         dwEmp.ImportFile("d:\employee.txt", Sybase.DataWindow.FileSaveAsType.Text)
         dwEmp.Sort()
         dwEmp.CalculateGroups()
         dwEmp.Refresh()
         </code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)">
            <overloads>Tests whether the value of a DataWindow column is null.</overloads><summary>Tests whether the current value of a DataWindow column, specified by number, is null. 
      </summary><returns>
				<c>true</c> if the value at <i>RowNumber</i> and <i>ColumnNumber</i> is null, and <c>false</c> otherwise.</returns><param name="RowNumber">The row number for which you want to test the value.</param><param name="ColumnNumber">The column number for which you want to test the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
			<para>To avoid generating a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>, use <b>IsItemNull</b> to test whether a user-entered value or a value retrieved from the 
         database is null before calling any of the following methods:</para>
				<list type="bullet">
					<item>
						<see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDate(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDateTime(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDecimal(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDouble(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemString(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemTime(System.Int32,System.Int16)"/>
					</item>
				</list>
				<para>If one or more columns in a DataWindow are marked as required, that is, they must
         contain data, updating the database will fail if those columns have null values. Before calling <see cref="M:Sybase.DataWindow.IDataWindowBase.UpdateData"/>, use         <see cref="M:Sybase.DataWindow.DataWindowControl.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)"/> to find any remaining columns with null values, and either prompt the user for input or provide values programmatically.  This is more efficient than using <b>IsItemNull</b> to evaluate each row and column.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemNull(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Tests whether the value of a DataWindow column, specified by number, is null. 
      </summary><returns>
				<c>true</c> if the value at <i>RowNumber</i> and <i>ColumnNumber</i> is null, and <c>false</c> otherwise.</returns><param name="RowNumber">The row number for which you want to test the value.</param><param name="ColumnNumber">The column number for which you want to test the value.</param><param name="Buffer">The DataWindow buffer for which you want to test the value.</param><param name="OriginalData">
				<c>false</c> to test the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to test the value prior to any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>To avoid generating a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>, use <b>IsItemNull</b> to test whether a user-entered value or a value retrieved from the 
         database is null before calling any of the following methods:</para>
				<list type="bullet">
					<item>
						<see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDate(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDateTime(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDecimal(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDouble(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemString(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemTime(System.Int32,System.Int16)"/>
					</item>
				</list>
				<para>If one or more columns in a DataWindow are marked as required, that is, they must
         contain data, updating the database will fail if those columns have null values. Before calling <see cref="M:Sybase.DataWindow.IDataWindowBase.UpdateData"/>, use         <see cref="M:Sybase.DataWindow.DataWindowControl.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)"/> to find any remaining columns with null values, and either prompt the user for input or provide values programmatically.  This is more efficient than using <b>IsItemNull</b> to evaluate each row and column.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemNull(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.String)">
            <summary>Tests whether the current value of a DataWindow column, specified by name, is null. 
      </summary><returns>
				<c>true</c> if the value at <i>RowNumber</i> and <i>ColumnName</i> is null, and <c>false</c> otherwise.</returns><param name="RowNumber">The row number for which you want to test the value.</param><param name="ColumnName">The name of the column for which you want to test the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>To avoid generating a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>, use <b>IsItemNull</b> to test whether a user-entered value or a value retrieved from the 
         database is null before calling any of the following methods:</para>
				<list type="bullet">
					<item>
						<see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDate(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDateTime(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDecimal(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDouble(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemString(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemTime(System.Int32,System.Int16)"/>
					</item>
				</list>
				<para>If one or more columns in a DataWindow are marked as required, that is, they must
         contain data, updating the database will fail if those columns have null values. Before calling <see cref="M:Sybase.DataWindow.IDataWindowBase.UpdateData"/>, use         <see cref="M:Sybase.DataWindow.DataWindowControl.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)"/> to find any remaining columns with null values, and either prompt the user for input or provide values programmatically.  This is more efficient than using <b>IsItemNull</b> to evaluate each row and column.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemNull(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Tests whether the value of a DataWindow column, specified by name, is null. 
      </summary><returns>
				<c>true</c> if the value at <i>RowNumber</i> and <i>ColumnName</i> is null, and <c>false</c> otherwise.</returns><param name="RowNumber">The row number for which you want to test the value.</param><param name="ColumnName">The name of the column for which you want to test the value.</param><param name="Buffer">The DataWindow buffer for which you want to test the value.</param><param name="OriginalData">
				<c>false</c> to test the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to test the value prior to any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>To avoid generating a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>, use <b>IsItemNull</b> to test whether a user-entered value or a value retrieved from the 
         database is null before calling any of the following methods:</para>
				<list type="bullet">
					<item>
						<see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDate(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDateTime(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDecimal(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDouble(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemString(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.IDataWindowBase.GetItemTime(System.Int32,System.Int16)"/>
					</item>
				</list>
				<para>If one or more columns in a DataWindow are marked as required, that is, they must
         contain data, updating the database will fail if those columns have null values. Before calling <see cref="M:Sybase.DataWindow.IDataWindowBase.UpdateData"/>, use         <see cref="M:Sybase.DataWindow.DataWindowControl.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)"/> to find any remaining columns with null values, and either prompt the user for input or provide values programmatically.  This is more efficient than using <b>IsItemNull</b> to evaluate each row and column.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemNull(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.ImportClipboard(Sybase.DataWindow.FileSaveAsType)">
            <overloads>Inserts text data from the clipboard into a DataWindow.</overloads><summary>Inserts comma-separated, tab-separated, or XML data from the clipboard into a DataWindow.</summary><returns>The number of rows that were imported.</returns><param name="ImportType">The text format, either Csv, Text, and Xml.</param><exception cref="T:System.ArgumentException">
				<i>ImportType</i> is not Csv, Text or Xml.</exception><exception cref="T:System.InvalidOperationException">Data in one of the columns has an incompatible datatype.</exception><exception cref="T:System.NotSupportedException"><b>ImportClipboard</b> is not supported for crosstab and composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The clipboard data must be formatted in tab-separated (Text) or comma-separated (Csv) columns or as 
         XML. The datatypes and order of the DataWindow object's columns must match the data on the 
         clipboard.</para>
				<para>If an XML or comma-separated column contains a leading double quote, it is assumed to be part of 
         the column value. A leading double quote has to be closed to mark the end of an item.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.ImportString(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.ImportClipboard(Sybase.DataWindow.FileSaveAsType,System.Int32,System.Int32,System.Int16,System.Int16,System.Int16)">
            <summary>Inserts comma-separated, tab-separated, or XML data from the clipboard into a DataWindow.
      </summary><returns>The number of rows that were imported.</returns><param name="ImportType">The text format, either Csv, Text, or Xml.</param><param name="StartRow">The number of the first row in the clipboard that you want to copy.</param><param name="EndRow">The number of the last row in the clipboard that you want to copy. </param><param name="StartCol">The number of the first column in the clipboard that you want to copy. </param><param name="EndCol">The number of the last column in the clipboard that you want to copy. </param><param name="dwStartCol">The number of the first column in the DataWindow that you want to receive data. </param><exception cref="T:System.ArgumentException">
				<i>ImportType</i> is not Csv, Text or Xml.</exception><exception cref="T:System.InvalidOperationException">Data in one of the columns has an incompatible datatype.</exception><exception cref="T:System.NotSupportedException"><b>ImportClipboard</b> is not supported for crosstab and composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The clipboard data must be formatted in tab-separated (Text) or comma-separated (Csv) columns or as 
         XML. The datatypes and order of the DataWindow object's columns must match the data on the 
         clipboard.</para>
				<para>
					<b>StartCol</b> and <b>EndCol</b> control the number of imported columns and the number of 
         columns in the DataWindow that are affected. <b>dwStartCol</b> specifies the first 
         DataWindow column to be affected. The last column to be affected can be calculated as:
         <c>dwStartCol + (EndCol - StartCol)</c>
				</para>
				<para>If an XML or comma-separated column contains a leading double quote, it is assumed to be part of 
         the column value. A leading double quote has to be closed to mark the end of an item.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.ImportString(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)">
            <overloads>Inserts data from a text file into a DataWIndow.</overloads><summary>Inserts comma-separated, tab-separated, or XML data from a file into a DataWindow.</summary><returns>The number of rows that were imported.</returns><param name="FileName">The name of the file from which to import the rows.</param><param name="ImportType">The file format, either Csv, Text, or Xml.</param><exception cref="T:System.ArgumentException">
				<i>ImportType</i> is not Csv, Text or Xml.</exception><exception cref="T:System.InvalidOperationException">Data in one of the columns has an incompatible datatype.</exception><exception cref="T:System.NotSupportedException"><b>ImportFile</b> is not supported for crosstab and composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The file should consist of rows of data. If the file includes column headings or row 
         labels, use the overloaded version of this method which allows you to skip the first row(s).</para>
				<para>The datatypes and order of the DataWindow object's columns must match the columns of data in the file.</para>
				<para>The location and number of double quote marks in a field in a tab-separated file affect how 
         they are handled when the file is imported:</para>
				<list type="bullet">
					<item>If the string is enclosed in one pair of double quotes, the quotes are discarded.</item>
					<item>If the string is enclosed in two pairs of double quotes, the first 
         pair is considered to enclose a null string, and the rest of the string is discarded. </item>
					<item>If the string is enclosed in three pairs of double quotes, one pair is retained 
         when the string is imported. </item>
					<item>If there 
         is a double quote at the beginning of a string, any characters after the second double quote are 
         discarded. If there is no second double quote, the tab or comma character delimiting the fields 
         is not recognized as a field separator and all characters up to the next occurrence of a double 
         quote, including a carriage return, are considered to be part of the string.</item>
					<item>Double quotes after the first character in the string are rendered literally.</item>
				</list>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.ImportClipboard(Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.ImportString(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType,System.Int32,System.Int32,System.Int16,System.Int16,System.Int16)">
            <summary>Inserts comma-separated, tab-separated, or XML data from a file into a DataWindow.</summary><returns>The number of rows that were imported.</returns><param name="FileName">The name of the file from which to import the rows.</param><param name="ImportType">The file format, either Csv, Text, or Xml.</param><param name="StartRow">The number of the first row in the file that you want to copy.</param><param name="EndRow">The number of the last row in the file that you want to copy. </param><param name="StartCol">The number of the first column in the file that you want to copy. </param><param name="EndCol">The number of the last column in the file that you want to copy.</param><param name="dwStartCol">The number of the first column in the DataWindow that you want to receive data. </param><exception cref="T:System.ArgumentException">
				<i>ImportType</i> is not Csv, Text or Xml.</exception><exception cref="T:System.InvalidOperationException">Data in one of the columns has an incompatible datatype.</exception><exception cref="T:System.NotSupportedException"><b>ImportFile</b> is not supported for crosstab and composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The file should consist of rows of data. If the file includes column headings or row 
         labels, use the overloaded version of this method which allows you to skip the first row(s).</para>
				<para>The datatypes and order of the DataWindow object's columns must match the columns of data in the file.</para>
				<para>
					<b>StartCol</b> and <b>EndCol</b> control the number of imported columns and the number of 
         columns in the DataWindow that are affected. <b>dwStartCol</b> specifies the first 
         DataWindow column to be affected. The last column to be affected can be calculated as:
         <c>dwStartCol + (EndCol - StartCol)</c>
				</para>
				<para>The location and number of double quote marks in a field in a tab-separated file affect how 
         they are handled when the file is imported:</para>
				<list type="bullet">
					<item>If the string is enclosed in one pair of double quotes, the quotes are discarded.</item>
					<item>If the string is enclosed in two pairs of double quotes, the first 
         pair is considered to enclose a null string, and the rest of the string is discarded. </item>
					<item>If the string is enclosed in three pairs of double quotes, one pair is retained 
         when the string is imported. </item>
					<item>
         If there 
         is a double quote at the beginning of a string, any characters after the second double quote are 
         discarded. If there is no second double quote, the tab or comma character delimiting the fields 
         is not recognized as a field separator and all characters up to the next occurrence of a double 
         quote, including a carriage return, are considered to be part of the string.</item>
					<item>Double quotes after the first character in the string are rendered literally.</item>
				</list>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.ImportClipboard(Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.ImportString(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.ImportString(System.String,Sybase.DataWindow.FileSaveAsType)">
            <overloads>Insert data from a string into a DataWIndow.</overloads><summary>Inserts data from comma-separated, tab-separated, or XML  string into a DataWindow.</summary><returns>The number of rows that were imported.</returns><param name="ImportString">The string containing the data.</param><param name="ImportType">The text format, either Csv, Text, or Xml.</param><exception cref="T:System.ArgumentException">
				<i>ImportType</i> is not Csv, Text or Xml.</exception><exception cref="T:System.InvalidOperationException">Data in one of the columns has an incompatible datatype.</exception><exception cref="T:System.NotSupportedException"><b>ImportString</b> is not supported for crosstab and composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The string should consist of rows of data. If the string includes column headings or row 
         labels, use the overloaded version of this method which allows you to skip the first row(s).</para>
				<para>The datatypes and order of the DataWindow object's columns must match the columns of data in the string.</para>
				<para>If an XML or comma-separated column contains a leading double quote it is assumed to be 
         part of the column value. A leading double quote has to be closed to mark the end of an item.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.ImportClipboard(Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.ImportString(System.String,Sybase.DataWindow.FileSaveAsType,System.Int32,System.Int32,System.Int16,System.Int16,System.Int16)">
            <summary>Inserts data from comma-separated, tab-separated, or XML  string into a DataWindow.</summary><returns>The number of rows that were imported.</returns><param name="ImportString">The string containing the data.</param><param name="ImportType">The text format, either Csv, Text, or Xml.</param><param name="StartRow">The number of the first row in the string that you want to copy.</param><param name="EndRow">The number of the last row in the string that you want to copy. </param><param name="StartCol">The number of the first column in the string that you want to copy. </param><param name="EndCol">The number of the last column in the string that you want to copy.</param><param name="dwStartCol">The number of the first column in the DataWindow that you want to receive data. </param><exception cref="T:System.ArgumentException">
				<i>ImportType</i> is not Csv, Text or Xml.</exception><exception cref="T:System.InvalidOperationException">Data in one of the columns has an incompatible datatype.</exception><exception cref="T:System.NotSupportedException"><b>ImportString</b> is not supported for crosstab and composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The string should consist of rows of data. If the string includes column headings or row 
         labels, use the overloaded version of this method which allows you to skip the first row(s).</para>
				<para>The datatypes and order of the DataWindow object's columns must match the columns of data in the string.</para>
				<para>
					<b>StartCol</b> and <b>EndCol</b> control the number of imported columns and the number of 
         columns in the DataWindow that are affected. <b>dwStartCol</b> specifies the first 
         DataWindow column to be affected. The last column to be affected can be calculated as:
         <c>dwStartCol + (EndCol - StartCol)</c>
				</para>
				<para>If an XML or comma-separated column contains a leading double quote it is assumed to be 
         part of the column value. A leading double quote has to be closed to mark the end of an item.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.ImportClipboard(Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.InsertRow(System.Int32)">
            <summary>Inserts a row into a DataWindow. 
      </summary><returns>The number of the row that was added. </returns><param name="RowNumber">The row number before which to insert the new row. Specify 0 to insert a row at the end.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:System.NotSupportedException">Crosstab and composite DataWindow styles do not support <i>InsertRow</i>.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>InsertRow</b> simply inserts a row without changing the display or the current row. If any of the DataWindow columns have 
			default values, these values are added to the Primary buffer before the row is displayed.</para>
				<para>To make the new row the current row, call the <see cref="M:Sybase.DataWindow.IDataWindowBase.SetRow(System.Int32)"/> method. For a DataWindowControl, you can
			invoke <see cref="M:Sybase.DataWindow.DataWindowControl.ScrollToRow(System.Int32)"/> instead if you also want the new row to be visible in the 
			DataWindowControl.</para>
				<para>A newly inserted row (with a <see cref="T:Sybase.DataWindow.RowStatus"/> value of New) is not 
         included in <see cref="P:Sybase.DataWindow.IDataWindowBase.ModifiedCount"/> until data is entered in the row (and its <see cref="T:Sybase.DataWindow.RowStatus"/> changes
         to NewAndModified). </para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.DeleteRow(System.Int32)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.UpdateData"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.Modify(System.String)">
            <summary>Modifies a DataWindow object by applying specifications that
         change the object's definition. 
      </summary><param name="Syntax">A string whose value is the specification for the modification.  See the Remarks section for appropriate formats.</param><exception cref="T:System.ArgumentNullException">
				<i>Syntax</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">
				<i>Syntax</i> is invalid, or an unexpected error has occurred.</exception><remarks>
				<para>
					<b>Modify</b> lets you make many of the same settings in code that you can make when designing the 
         DataWindow. DataWindow Designer automatically gives names to all controls so that you can refer to them in <i>Syntax</i>. 
         See the <i>DataWindow .NET Programmer's Guide</i> for the exhaustive list of control properties that can be used.</para>
				<para>You can use three types of statements in <i>Syntax</i> to create, remove, and modify controls within a DataWindow object.
         <list type="bullet">
						<item>
							<b>CREATE </b>
							<i>control (settings)	</i>
							<para>
         Adds a control to the DataWindow object (such as text, computed fields, and bitmaps). 
         <i>Settings</i> is a list of properties and values using the format you see in exported DataWindow 
         syntax. To create a control, you must supply enough information to define it.</para>
						</item>
						<item>
							<b>DESTROY [COLUMN] </b>
							<i> control</i>
							<para>
         Removes <i>control</i> from the DataWindow object. When <i>control</i> is a column, specify the keyword COLUMN 
         to remove both the column and the column's data from the buffer.</para>
						</item>
						<item>
							<i>controlname.property=value</i>
							<para>Changes the value of <i>property</i> to <i>value</i>. Properties control the location, color, 
         size, font, and other settings for <i>controlname</i>. When <i>controlname</i> is <c>DataWindow</c>, you
         can also set properties for database access. Depending on the specific property, <i>value</i> can
         be a constant, a quoted constant, an expression that consists of a default value followed by a 
         valid DataWindow expression that returns the appropriate datatype for the property. </para>
							<para>If you are changing a single property, you can also use the <see cref="M:Sybase.DataWindow.IDataWindowBase.SetProperty(System.String,System.String)"/> method, or use a property of one of the 
         <see cref="T:Sybase.DataWindow.GraphicObject"/> classes, if the desired property is exposed.</para>
						</item>
					</list>
				</para>
				<para>When you specify an expression for a DataWindow property, the expression has the format:<c> 
         defaultvalue~tDataWindowexpression</c> where:
				</para>
				<list type="bullet">
					<item>
						<c>Defaultvalue</c> is a value that can be converted to the appropriate datatype for the property. It must be followed by a tab character.</item>
					<item>
						<c>DataWindowexpression</c> is an expression that can use any 
         DataWindow expression function. The expression must also evaluate to the appropriate datatype 
         for the property. When you are setting a column's property, the expression is evaluated for each 
         row in the DataWindow, allowing the display to vary based on the data.
         </item>
				</list>
				<para>A typical expression uses the <c>If</c> function: <c>0~tIf(emp_status='T', 255, 0)</c>.  The following Visual Basic .NET statements would equivalently
         change the text color of the <c>emp_id</c> column to red for those employees with a status of 'T' (terminated) in <c>dwEmp</c>:
				</para>
				<list type="bullet">
					<item>
						<c>dwEmp.Modify("emp_id.color='0~tIf(emp_status=~'T~',255,0)'")</c>
					</item>
					<item>
						<c>dwEmp.SetProperty("emp_id.color", "0~tIf(emp_status=~'T~',255,0)")</c>
					</item>
					<item>
						<c>Dim gobEditColumn as Sybase.DataWindow.GraphicObjectEditableColumn</c>
        				<c>gobEditColumn = CObj(dwEmp.GetObjectByName("emp_id"))</c>
        				<c>gobEditColumn.TextColorExpression = "If(emp_status='T',255,0)"</c>
					</item>
				</list>
				<note>DataWindow expressions expect the tilde (~) as an escape character, as can be seen by the examples above.  ~t is a tab character and ~' indicates a nested single quote.</note>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetProperty(System.String,System.String)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.Describe(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.Print">
            <overloads>Prints the DataWindow to the current printer. </overloads><summary>Prints the DataWindow to the current printer.</summary><exception cref="T:System.NotSupportedException">
				<b>Print</b> is not supported for a DataWindowChild that is nested in a composite DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>For a DataStore and DataWindowControl, <b>Print</b> triggers the <see cref="E:Sybase.DataWindow.IDataStore.BeginPrint"/>
			 event just before data is sent to the printer (or 
         spooler), a <see cref="E:Sybase.DataWindow.IDataStore.PagePrinting"/> for each page break, 
         and an <see cref="E:Sybase.DataWindow.IDataStore.EndPrint"/> event when printing is 
         complete.</para>
				<para>Use the overloaded version of <b>Print</b> to display a dialog box allowing the user to cancel the print job.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.PrintCancel"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.Print(System.Boolean)">
            <summary>Prints the DataWindow to the current printer, with the option to display a Cancel dialog box. 
      </summary><param name="ShowCancelDialog">
				<c>true</c> if a dialog box allowing the print job to be canceled is to be displayed, otherwise <c>false</c>.
			</param><exception cref="T:System.NotSupportedException">
				<b>Print</b> is not supported for a DataWindowChild that is nested in a composite DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>For a DataStore and DataWindowControl, <b>Print</b> triggers the <see cref="E:Sybase.DataWindow.IDataStore.BeginPrint"/>
			 event just before data is sent to the printer (or 
         spooler), a <see cref="E:Sybase.DataWindow.IDataStore.PagePrinting"/> for each page break, 
         and an <see cref="E:Sybase.DataWindow.IDataStore.EndPrint"/> event when printing is 
         complete.</para>
				<para>Since a DataStore is non-visual, <i>ShowCancelDialog</i> is always treated as <c>false</c>
         when invoked on a DataStore, and is therefore semantically equivalent to the overload of <b>Print</b> that has no arguments.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.PrintCancel"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.Print(System.Boolean,System.Boolean)">
            <summary>Prints the DataWindow to the current printer, with the option to display a Cancel dialog box
			and an option to display the Print Dialog box.
	        </summary><param name="ShowCancelDialog">
				<c>true</c> if a dialog box allowing the print job to be canceled is to be displayed, otherwise <c>false</c>.
			</param><param name="ShowPrintDialog">
				<c>true</c> if the Print Dialog box is to be displayed, otherwise <c>false</c>.
			</param><exception cref="T:System.NotSupportedException">
				<b>Print</b> is not supported for a DataWindowChild that is nested in a composite DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>For a DataStore and DataWindowControl, <b>Print</b> triggers the <see cref="E:Sybase.DataWindow.IDataStore.BeginPrint"/>
			 event just before data is sent to the printer (or 
         spooler), a <see cref="E:Sybase.DataWindow.IDataStore.PagePrinting"/> for each page break, 
         and an <see cref="E:Sybase.DataWindow.IDataStore.EndPrint"/> event when printing is 
         complete.</para>
				<para>Since a DataStore is non-visual, <i>ShowCancelDialog</i> is always treated as <c>false</c>
         when invoked on a DataStore, and is therefore semantically equivalent to the overload of <b>Print</b> that has no arguments.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.PrintCancel"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.PrintCancel">
            <summary>Cancels printing and deletes the spool file, if any. 
      </summary><returns>
				<c>true</c> if the print job was canceled, <c>false</c> otherwise (including when there is no pending print job).</returns><exception cref="T:System.NotSupportedException">
				<b>PrintCancel</b> is not supported for a DataWindowChild that is nested in a composite DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>PrintCancel cancels the printing of the specified DataWindowChild, DataStore, or DataWindowControl by deleting the spool file, if any, and closing the job. 
      </remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.Print"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.ReselectRow(System.Int32)">
            <summary>Refreshes data for a specific row by reretrieving from the database.</summary><param name="RowNumber">The row to be refreshed.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<see cref="M:Sybase.DataWindow.IDataWindowBase.SetTransaction(Sybase.DataWindow.AdoTransaction)"/> was not called before <b>ReselectRow</b> for a DataWindowChild.</exception><exception cref="T:Sybase.DataWindow.DbErrorException">A database error has occurred.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<b>ReselectRow</b> is supported for SQL Select DataWindows and can be used to discard values 
         the user has changed and replace them with values from the database after an update fails (due to a 
         concurrent access error, for example).  
      </remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.Retrieve(System.Data.DataTable)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.UpdateData"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.Reset">
            <summary>Clears all the data from a DataWindow. 
      </summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>Reset</b> is not the same as deleting rows from the DataWindow since it does not move the rows to Delete buffer.  Use
			<b>Reset</b> only to completely discard any data and changes that have been made.</para>
				<para>Use <see cref="M:Sybase.DataWindow.IDataWindowBase.RowsDiscard(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer)"/> to clear the data from a specific buffer.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.DeleteRow(System.Int32)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.RowsDiscard(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.ResetUpdateStatus">
            <summary>Clears the status flags in the Primary and Filter buffers and empties the Delete buffer of a
         DataWindow. 
      </summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>When a column is modified, its <see cref="T:Sybase.DataWindow.ItemStatus"/> flag is set, 
				marking it for update. Likewise, when a row is added or deleted, its <see cref="T:Sybase.DataWindow.RowStatus"/> flag is set.
				By default 
         the <see cref="M:Sybase.DataWindow.IDataWindowBase.UpdateData"/> method clears these flags; however, if you want to coordinate updates of more than one DataWindow, 
         you can defer clearing the status by setting the <i>ResetUpdateFlags</i> argument to 
         <c>false</c>. Then after you verify that all the updates succeeded, you can call <b>ResetUpdateStatus</b>
          for each DataWindow to clear
         the status flags. If one of the updates fails, you can retain the update statuses, prompt the user to fix the problem, and try the
         updates again.</para>
				<para>You can find out which rows are marked for update with the <see cref="M:Sybase.DataWindow.IDataWindowBase.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)"/> method.</para>
			</remarks><example>This C# code updates the data without resetting flags and commits it before resetting status flags:
         <code>
         try
         {
            dwEmployee.UpdateData(true, false);
            myTrans.Commit();
            
            // If no exception has been caught, update succeeded
            dwEmployee.ResetUpdateStatus();
         }
         catch (Sybase.DataWindow.DbErrorException dbError)
         {
         	// update failed prompt user to fix the problem
         }
         
         </code>
			</example><seealso cref="M:Sybase.DataWindow.IDataWindowBase.UpdateData"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.Retrieve(System.Object[])">
            <summary>Retrieves rows from the database into the DataWindow</summary><returns>The number of rows retrieved.</returns><param name="ArgsList">A list of retrieval arguments to be passed to the SQL statement that is the source of the DataWindow.
			<note>You must use .NET datatypes, 
         such as System.DateTime, in the argument list.</note>
			</param><exception cref="T:Sybase.DataWindow.DbErrorException">A database error has occurred.</exception><exception cref="T:System.InvalidOperationException">
				<see cref="M:Sybase.DataWindow.IDataWindowBase.SetTransaction(Sybase.DataWindow.AdoTransaction)"/> has not been called.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>After rows are retrieved, the DataWindow object's filter is applied. Any retrieved rows that do not 
         meet the filter criteria are immediately moved to the Filter buffer and are not included in the return count.</para>
				<para>Before you can retrieve rows, you must specify a transaction object with 
         <see cref="M:Sybase.DataWindow.IDataWindowBase.SetTransaction(Sybase.DataWindow.AdoTransaction)"/> and connect to the database. Normally, when you call <b>Retrieve</b>, any rows that are already in the 
         DataWindow are discarded and replaced with the newly retrieved rows. You can set the <i>Action</i> property of the 
         <see cref="T:Sybase.DataWindow.BeginRetrieveEventArgs"/> to <c>AppendRows</c> 
         in the <see cref="E:Sybase.DataWindow.DataWindowControl.BeginRetrieve"/> event to add any 
         retrieved rows to the ones that already exist in the buffers.</para>
				<para>If arguments are expected but not specified, the user is prompted for the retrieval arguments.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.ReselectRow(System.Int32)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetTransaction(Sybase.DataWindow.AdoTransaction)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.UpdateData"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.RowsCopy(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Copies a range of rows from one DataWindow to another,
         or from one buffer to another within a single DataWindow. 
      </summary><param name="StartRow">The number of the first row you want to copy.</param><param name="EndRow">The number of the last row you want to copy.</param><param name="FromBuffer">The DataWindow buffer from which you want to copy rows.</param><param name="ToDW">The DataWindow to which you want to copy the rows.</param><param name="BeforeRow">The number of the row in <i>ToDW</i> before which you want to insert the copied rows. <note>To insert after the last row, use any value that is greater than the number of existing rows.</note>
			</param><param name="ToBuffer">The DataWindow buffer in <i>ToDW</i> to which the rows should be copied. </param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>StartRow</i> or <i>EndRow</i> is less than 1, or <i>BeforeRow</i> is less than 0.</exception><exception cref="T:System.ArgumentException">
				<list type="bullet">
					<item>
						<i>StartRow</i> &lt; <i>EndRow</i>, or</item>
					<item>Source DataWindow and <i>ToDW</i> are incompatible.</item>
				</list>
			</exception><exception cref="T:System.ArgumentNullException">
				<i>ToDW</i> is null.</exception><exception cref="T:System.NotSupportedException">Source DataWindow or <i>ToDW</i> is a crosstab.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>When you use the <b>RowsCopy</b> method, the status of the rows that are copied to the <i>ToBuffer</i> is set to
         NewAndModified. If you issue an update request, the DataWindow server sends SQL INSERT statements to the database for any 
         new rows in the Primary buffer.</para>
				<para>Data is not automatically retrieved for drop-down DataWindows in <i>ToDW</i>, as it 
         is when you call <see cref="M:Sybase.DataWindow.IDataWindowBase.InsertRow(System.Int32)"/>. You must explicitly call <see cref="M:Sybase.DataWindow.IDataWindowBase.Retrieve(System.Data.DataTable)"/> for child DataWindows in <i>ToDW</i>.</para>
				<para>When you use <b>RowsCopy</b> to populate another DataWindow, the copied data is not automatically processed 
         by filters or sort criteria in effect on the target DataWindow. You may need to call the <see cref="M:Sybase.DataWindow.IDataWindowBase.Filter"/>, 
         <see cref="M:Sybase.DataWindow.IDataWindowBase.CalculateGroups"/>, or <see cref="M:Sybase.DataWindow.IDataWindowBase.Sort"/> methods to properly process the data.</para>
				<para>A DataWindow cannot be in query mode when you call <b>RowsCopy</b>. </para>
			</remarks><example>This Visual Basic subroutine copies rows from the Delete buffer in a DataWindow into the Primary buffer 
			of a DataWindow called <c>dwDelete</c>:
         <code>
         Public Sub RefreshData()
            Dim primary As DataWindowControl
            Dim filterCount As Integer
         
            Try
               dwDelete.Reset()
               primary = buffersForm.GetPrimaryControl
               filterCount = primary.DeletedCount
               
               'Use the RowsCopy function to copy the rows from the
               'deleted buffer in the primary DataWindow into the DataWindow
               'on this window.
               If filterCount &gt; 0 Then
                  primary.RowsCopy(1, filterCount, DataBuffer.Delete, dwDelete, 1, DataBuffer.Primary)
               End If
            Catch ex As Exception
               ErrorHandler.HandleException(ex)
            End Try
         End Sub
         </code>
			</example><seealso cref="M:Sybase.DataWindow.IDataWindowBase.RowsDiscard(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.RowsMove(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.RowsDiscard(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Discards a range of rows in a DataWindow control.</summary><param name="StartRow">The number of the first row you want to discard.</param><param name="EndRow">The number of the last row you want to discard.</param><param name="Buffer">The DataWindow buffer from which you want to discard the rows.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>StartRow</i> or <i>EndRow</i> is less than 1.</exception><exception cref="T:System.ArgumentException">
				<i>StartRow</i> is less than <i>EndRow</i>.</exception><exception cref="T:System.NotSupportedException">
				<b>RowsDiscard</b> is not supported for crosstab DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Once a row has been discarded using <b>RowsDiscard</b>, you cannot restore the row. 
			You have to retrieve it again from the database.</para>
				<para>Use <b>RowsDiscard</b> when your application has finished with rows in a DataWindow, and you do not
         want an update to affect the database. For example, you can discard rows in the Delete buffer to 
         prevent the associated rows from being removed from the database when you call <see cref="M:Sybase.DataWindow.IDataWindowBase.UpdateData"/>. </para>
				<para>Use <see cref="M:Sybase.DataWindow.IDataWindowBase.Reset"/> to clear all the rows 
         from all three buffers of a DataWindow.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.RowsCopy(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.RowsMove(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.Reset"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.RowsMove(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Removes a range of rows from one DataWindow and inserts them into another, or moves them from one buffer to another within a single DataWindow. 
      </summary><param name="StartRow">The number of the first row you want to move.</param><param name="EndRow">The number of the last row you want to move.</param><param name="FromBuffer">The DataWindow buffer from which you want to move rows.</param><param name="ToDW">The DataWindow to which you want to move the rows.</param><param name="BeforeRow">The number of the row in <i>ToDW</i> before which you want to insert the relocated rows. <note>To insert after the last row, use any value that is greater than the number of existing rows.</note>
			</param><param name="ToBuffer">The DataWindow buffer in <i>ToDW</i> to which the rows should be moved.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>StartRow</i> or <i>EndRow</i> is less than 1, or <i>BeforeRow</i> is less than 0.</exception><exception cref="T:System.ArgumentException">
				<list type="bullet">
					<item>
						<i>StartRow</i> &lt; <i>EndRow</i>, or</item>
					<item>Source DataWindow and <i>ToDW</i> are incompatible.</item>
				</list>
			</exception><exception cref="T:System.ArgumentNullException">
				<i>ToDW</i> is null.</exception><exception cref="T:System.NotSupportedException">Source DataWindow or <i>ToDW</i> is a crosstab.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>When you use <b>RowsMove</b>, the rows have the status NewAndModified in <i>ToDW</i>. If you move rows 
         between buffers within a single DataWindow, knowledge of the rows' origin is taken into account to change their 
         status. For example, if you move unmodified rows from the Primary buffer to 
         the Delete buffer, they are marked for deletion. If you move the rows back to the Primary buffer, their status returns 
         to NotModified; however, if you move a row from one DataWindow control (or DataStore) to another and back 
         again, the <see cref="T:Sybase.DataWindow.RowStatus"/> changes to NewAndModified because it came from a different DataWindow.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.RowsCopy(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.RowsDiscard(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)">
            <overloads>Saves the contents of a DataWindow in the specified format. </overloads><summary>Saves the contents, including column headers, of a DataWindow in the format specified.</summary><param name="FileName">The name of the file in which to save the DataWindow contents.</param><param name="SaveAsType">The format in which to save the DataWindow contents.</param><exception cref="T:System.ArgumentNullException">
				<i>FileName</i> is null or an empty string ("").</exception><exception cref="T:System.IO.PathTooLongException">
				<i>FileName</i> contains more than 248 characters. </exception><exception cref="T:System.NotSupportedException"><b>SaveAs</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The file is saved with UTF-16LE encoding. To specify a different encoding, use the overloaded version of <b>SaveAs</b> that
			accepts a parameter of type <see cref="T:Sybase.DataWindow.FileSaveAsEncoding"/>
				</para>
				<para>Report format (PSReport value of <see cref="T:Sybase.DataWindow.FileSaveAsType"/>) is the best choice if the DataWindow is a composite report.</para>
				<para>For Xml, the XML logical structure used is based on the current XML export template for the DataWindow object. You can 
         change the export template by setting the <c>Export.XML.UseTemplate</c> DataWindow object property. If no export 
         template is specified, the default template is used.</para>
				<para>When you save the contents of a DataWindow to a text file, double quotes are handled in a way that enables the 
         <see cref="M:Sybase.DataWindow.IDataWindowBase.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/> function to produce the same DataWindow when the text file is imported back into the application. 
         Any field 
         that is enclosed in a pair of double quotes is wrapped with three pairs of double quotes in the saved text file. 
         Double quotes at the beginning of a text field that have no matching double quotes at the end of the field are also 
         replaced by three double quotes in the saved text file. A double quote elsewhere in the field is saved as 
         one double quote. </para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SaveAsFormattedText(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType,System.Boolean)">
            <summary>Saves the contents, optionally including column headers, of a DataWindow in the format specified.
      </summary><param name="FileName">The name of the file in which to save the DataWindow contents.</param><param name="SaveAsType">The format in which to save the DataWindow contents.</param><param name="IncludeColumnHeaders">
				<c>true</c> if DataWindow column headings should be included, <c>false</c> otherwise.
			<note>This value is ignored (and treated as <c>true</c>) for formats other than Clipboard, CSV, Excel, and Text.</note>
			</param><exception cref="T:System.ArgumentNullException">
				<i>FileName</i> is null or an empty string ("").</exception><exception cref="T:System.IO.PathTooLongException">
				<i>FileName</i> contains more than 248 characters. </exception><exception cref="T:System.NotSupportedException"><b>SaveAs</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The file is saved with UTF-16LE encoding. To specify a different encoding, use the overloaded version of <b>SaveAs</b> that
			accepts a parameter of type <see cref="T:Sybase.DataWindow.FileSaveAsEncoding"/>
				</para>
				<para>Report format (PSReport value of <see cref="T:Sybase.DataWindow.FileSaveAsType"/>) is the best choice if the DataWindow is a composite report.</para>
				<para>For Xml, the XML logical structure used is based on the current XML export template for the DataWindow object. You can 
         change the export template by setting the <c>Export.XML.UseTemplate</c> DataWindow object property. If no export 
         template is specified, the default template is used.</para>
				<para>When you save the contents of a DataWindow to a text file, double quotes are handled in a way that enables the 
         <see cref="M:Sybase.DataWindow.IDataWindowBase.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/> function to produce the same DataWindow when the text file is imported back into the application. 
         Any field 
         that is enclosed in a pair of double quotes is wrapped with three pairs of double quotes in the saved text file. 
         Double quotes at the beginning of a text field that have no matching double quotes at the end of the field are also 
         replaced by three double quotes in the saved text file. A double quote elsewhere in the field is saved as 
         one double quote. </para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SaveAsFormattedText(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType,System.Boolean,Sybase.DataWindow.FileSaveAsEncoding)">
            <summary>Saves the contents, optionally including column headers, of a DataWindow with the specified format and encoding.</summary><param name="FileName">The name of the file in which to save the DataWindow contents.</param><param name="SaveAsType">The format in which to save the DataWindow contents.</param><param name="IncludeColumnHeaders">
				<c>true</c> if DataWindow column headings should be included, <c>false</c> otherwise.
			<note>This value is ignored (and treated as <c>true</c>) for formats other than Clipboard, CSV, Excel, and Text.</note>
			</param><param name="Encoding">The character encoding used for the file.</param><exception cref="T:System.ArgumentNullException">
				<i>FileName</i> is null or an empty string ("").</exception><exception cref="T:System.IO.PathTooLongException">
				<i>FileName</i> contains more than 248 characters. </exception><exception cref="T:System.NotSupportedException"><b>SaveAs</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Report format (PSReport value of <see cref="T:Sybase.DataWindow.FileSaveAsType"/>) is the best choice if the DataWindow is a composite report.</para>
				<para>For Xml, the XML logical structure used is based on the current XML export template for the DataWindow object. You can 
         change the export template by setting the <c>Export.XML.UseTemplate</c> DataWindow object property. If no export 
         template is specified, the default template is used.</para>
				<para>When you save the contents of a DataWindow to a text file, double quotes are handled in a way that enables the 
         <see cref="M:Sybase.DataWindow.IDataWindowBase.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/> function to produce the same DataWindow when the text file is imported back into the application. 
         Any field 
         that is enclosed in a pair of double quotes is wrapped with three pairs of double quotes in the saved text file. 
         Double quotes at the beginning of a text field that have no matching double quotes at the end of the field are also 
         replaced by three double quotes in the saved text file. A double quote elsewhere in the field is saved as 
         one double quote. </para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SaveAsFormattedText(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SaveAsFormattedText(System.String)">
            <overloads>Saves the contents of a DataWindow as a Unicode text file.</overloads><summary>Saves the contents of a DataWindow as a Unicode text file using default formatting. 
      </summary><param name="FileName">The name of the file in which to save the DataWindow contents.</param><exception cref="T:System.ArgumentNullException">
				<i>FileName</i> is null or an empty string ("").</exception><exception cref="T:System.IO.PathTooLongException">
				<i>FileName</i> contains more than 248 characters. </exception><exception cref="T:System.NotSupportedException"><b>SaveAsFormattedText</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>SaveAsFormattedText</b> is similar to <see cref="M:Sybase.DataWindow.IDataWindowBase.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/> with the Text <see cref="T:Sybase.DataWindow.FileSaveAsType"/>;
				however, <b>SaveAsFormattedText</b>
         formats the text and saves column headers as they are displayed in the DataWindow instead of as the 
         column name. For example, if the heading for the <c>cust_id</c> column is "Customer ID", <b>SaveAsFormattedText</b> saves 
         "Customer ID" to the text file, whereas <see cref="M:Sybase.DataWindow.IDataWindowBase.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/> saves "cust_id". 
         <b>SaveAsFormattedText</b> also saves computed fields, and the overloaded 
         version of the method 
         allows you to customize formats in the file and specify the file encoding.</para>
				<para>In the default formatting implemented by this method, values are wrapped in double quotes and separated by tabs. 
         A newline character is placed at the end of each line. 
         Line feed and carriage return characters within each row are converted to white space. 
         The file is saved with UFT-16LE encoding.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SaveAsFormattedText(System.String,System.String,System.String,System.String,System.Boolean,Sybase.DataWindow.FileSaveAsEncoding)">
            <summary>Saves the contents of a DataWindow as a Unicode text file with user-specified formatting. 
      </summary><param name="FileName">The name of the file in which to save the DataWindow contents.</param><param name="Separator">The character to be used to delimit values. </param><param name="Quote">The character to be used to wrap values. </param><param name="LineEnd">The character to be use as an end-of-line marker.</param><param name="RetainDataNewLineChar">
				<c>true</c> if line feed and carriage return characters should be retained, <c>false</c> if
			they should be converted to white space</param><param name="Encoding">The character encoding used for the file.</param><exception cref="T:System.ArgumentNullException">
				<i>FileName</i> is null or an empty string ("").</exception><exception cref="T:System.IO.PathTooLongException">
				<i>FileName</i> contains more than 248 characters. </exception><exception cref="T:System.NotSupportedException"><b>SaveAsFormattedText</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>SaveAsFormattedText</b> is similar to <see cref="M:Sybase.DataWindow.IDataWindowBase.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/> with the Text <see cref="T:Sybase.DataWindow.FileSaveAsType"/>;
				however, <b>SaveAsFormattedText</b>
         formats the text and saves column headers as they are displayed in the DataWindow instead of as the 
         column name. For example, if the heading for the <c>cust_id</c> column is "Customer ID", <b>SaveAsFormattedText</b> saves 
         "Customer ID" to the text file, whereas <see cref="M:Sybase.DataWindow.IDataWindowBase.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/> saves "cust_id". 
         <b>SaveAsFormattedText</b> also saves computed fields, and the overloaded 
         version of the method 
         allows you to customize formats in the file and specify the file encoding.</para>
			</remarks><example>This statement saves the contents of <c>dwQuarter</c> to the file <c>H:\Q2\results.txt</c>. The saved file has 
         ANSI encoding with the hash mark (#) as the separator character, single quote (') as the value delimiter, 
         and the default line ending. Computed columns are included with the saved information, and line 
         feed and carriage return characters within column data are converted to white space.
         <code>dwQuarter.SaveAsFormattedText("H:\Q2\results.txt","#","'","\n", false, Sybase.FileSaveAsEncoding.Ansi)</code>
			</example><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SelectTreeNode(System.Int32,System.Int32,System.Boolean)">
            <summary>
				Selects or deselects a TreeView node in a TreeView DataWindow, which has the specified group level and includes the specified row.
			</summary><param name="RowNumber">
				The number of the row that belongs to the group of the TreeView node that will be selected or deselected.
			</param><param name="GroupLevel">
				The level of the group of the TreeView node that will be selected or deselected.
			</param><param name="Selected">
				<c>true</c> if the node should be selected, <c>false</c>
				if selection of the node should be deselected.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetColumnValidation(System.Int16,System.String)">
            <overloads>Changes the validation rule for a column in a DataWindow. </overloads><summary>Changes the validation rule for a DataWindow column identified by number. 
      </summary><param name="ColumnNumber">The column number for which you want to set the validation rule.</param><param name="ValidationRule">The new validation rule for the column.</param><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is not valid.</exception><exception cref="T:Sybase.DataWindow.InvalidExpressionException">
				<i>ValidationRule</i> is not a valid boolean DataWindow expression.</exception><exception cref="T:System.ArgumentNullException">
				<i>ValidationRule</i> is null.</exception><exception cref="T:System.NotSupportedException">
				<b>SetColumnValidation</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Validation rules are boolean expressions that usually compare the value in the column's 
         edit control (obtained using <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>) to some other value. 
         When data the user enters fails to meet the criteria 
         established by the validation rule, an <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> event occurs. 
         You can specify validation rules at design time in DataWindow Designer, and you can change the rules in code using 
         <b>SetColumnValidation</b>. A validation rule can include any DataWindow expression function.</para>
				<para>For information about DataWindow expression functions and validation rules, see the 
         DataWindow Designer <i>User's Guide</i>.</para>
			</remarks><example>The following assigns a validation rule to the current column in <c>dwEmployee</c>. The rule ensures 
         that the data entered is greater than zero:
         <code>dwEmployee.SetColumnValidation(dwEmployee.GetColumnNumber(), "Number(GetText( )) &gt; 0")</code>
			</example><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetColumnValidation(System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetColumnValidation(System.String,System.String)">
            <summary>Changes the validation rule for a DataWindow column identified by name. 
      </summary><param name="ColumnName">The column name for which you want to set the validation rule.</param><param name="ValidationRule">The new validation rule for the column.</param><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is not valid.</exception><exception cref="T:Sybase.DataWindow.InvalidExpressionException">
				<i>ValidationRule</i> is not a valid boolean DataWindow expression.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> or <i>ValidationRule</i> is null.</exception><exception cref="T:System.NotSupportedException">
				<b>SetColumnValidation</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Validation rules are boolean expressions that usually compare the value in the column's 
         edit control (obtained using <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>) to some other value. 
         When data the user enters fails to meet the criteria 
         established by the validation rule, an <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> event occurs. 
         You can specify validation rules at design time in DataWindow Designer, and you can change the rules in code using 
         <b>SetColumnValidation</b>. A validation rule can include any DataWindow expression function.</para>
				<para>For information about DataWindow expression functions and validation rules, see the 
         DataWindow Designer <i>User's Guide</i>.</para>
			</remarks><example>The following assigns a validation rule to the current column in <c>dwEmployee</c>. The rule ensures 
         that the data entered is greater than zero:
         <code>dwEmployee.SetColumnValidation(dwEmployee.GetColumnName(), "Number(GetText( )) &gt; 0")</code>
			</example><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetColumnValidation(System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetDetailHeight(System.Int32,System.Int32,System.Int32)">
            <summary>Sets the height of each row in the specified range to the specified value. 
      </summary><param name="StartRow">The first row in the range of rows for which you want to set the height.</param><param name="EndRow">The last row in the range of rows for which you want to set the height.</param><param name="NewHeight">The height of the detail area for the specified rows in the <see cref="T:Sybase.DataWindow.Units"/> specified for the DataWindow object.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>StartRow</i> or <i>EndRow</i> is less than 1.</exception><exception cref="T:System.ArgumentException">
				<i>EndRow</i> &lt; <i>StartRow</i>.</exception><exception cref="T:System.ArgumentOutOfRangeException">
				<i>NewHeight</i> is less than 0.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Call <b>SetDetailHeight</b> in code to vary the amount of space assigned to rows in a DataWindow.
			 You cannot specifically set the height for different rows when you define a 
         DataWindow object in DataWindow Designer; however, you can turn on the Autosize Height property 
         for the detail band so that the height of each row is determined by the data.</para>
				<para>You can set the detail 
         height of one or more rows to zero, which hides them from view.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetFilter(System.String)">
            <summary>Sets the filter criteria for a DataWindow.</summary><param name="FilterExpression">A string whose value is a boolean expression.</param><exception cref="T:Sybase.DataWindow.InvalidExpressionException">
				<i>FilterExpression</i> is not a valid boolean DataWindow expression.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>
				<para>A DataWindow object can have a filter criteria specified as part of its definition. After data is 
         retrieved, rows that do not meet the criteria are immediately transferred from the Primary buffer to the 
         Filter buffer. The <b>SetFilter</b> method replaces any existing filter criteria.</para>
				<para>Rows for which <i>FilterExpression</i> evaluates to <c>false</c> will be moved to the Filter buffer when the <see cref="M:Sybase.DataWindow.IDataWindowBase.Filter"/>
			method is subsequently invoked.</para>
				<para>
					<i>FilterExpression</i> can consist of columns (identified by name or number), relational operators, 
				and values against which column values 
         are compared. Boolean expressions can be connected with logical operators AND and OR. You can also use NOT, 
         the negation operator. Use parentheses to control the order of evaluation.</para>
				<para>Sample expressions include:</para>
				<list type="bullet">
					<item>
						<c>item_id &gt; 5</c>
					</item>
					<item>
						<c>NOT item_id = 5</c>
					</item>
					<item>
						<c>(NOT item_id = 5) AND customer &gt; "Mabson"</c>
					</item>
					<item>
						<c>item_id &gt; 5 AND customer = "Smith"</c>
					</item>
					<item>
						<c>#1 &gt; 5 AND #2 = "Smith"</c>
					</item>
				</list>
				<para>If you build a <i>FilterExpression</i> in code, enclose string constants in quotation marks, and
				 format numbers using U.S. format (period as decimal separator). </para>
				<para>To remove a filter, call <b>SetFilter</b> with the empty string ("") for format and then call <see cref="M:Sybase.DataWindow.IDataWindowBase.Filter"/>.
				 The rows 
         in the filter buffer will be restored to the Primary buffer and positioned after the rows that already exist 
         there.</para>
				<para>To allow users to specify their own filter expression for a DataWindowControl, 
				call <see cref="M:Sybase.DataWindow.DataWindowControl.FilterDialog"/> to display a dialog box allowing for the constructon of a filter expression. 
         Then you can call <see cref="M:Sybase.DataWindow.IDataWindowBase.Filter"/> to apply the dynamically constructed expression to the DataWindowControl.
				</para>
			</remarks><example>The following code defines a filter so that rows within <c>dwEmployee</c> display only if the <c>emp_state</c> field
			matches the current value of <c>var1</c>, in this case "ME" for Maine.
         <code>
         [C#]
         string strState;
         strState = "ME";
         dwEmployee.SetFilter("emp_state = '"+ strState +" '");
         dwEmployee.Filter();
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetFilter(System.String)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.Filter"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetItemDate(System.Int32,System.Int16,System.DateTime)">
            <overloads>Sets the value of a DataWindow Date column. </overloads><summary>Sets the Date value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="DateValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store Date values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDate</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDate</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDate</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDate(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetItemDate(System.Int32,System.String,System.DateTime)">
            <summary>Sets the Date value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="DateValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store Date values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDate</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDate</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDate</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDate(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetItemDateTime(System.Int32,System.Int16,System.DateTime)">
            <overloads>Sets the value of a DataWindow DateTime column. </overloads><summary>Sets the DateTime value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="DateTimeValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store DateTime values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDateTime</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDateTime</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDateTime</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDate(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDateTime(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetItemDateTime(System.Int32,System.String,System.DateTime)">
            <summary>Sets the DateTime value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="DateTimeValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store DateTime values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDateTime</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDateTime</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDateTime</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDate(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDateTime(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)">
            <overloads>Sets the value of a DataWindow DateTime column. </overloads><summary>Sets the DateTime value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="DateTimeValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store DateTime values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlDateTime</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlDateTime</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlDateTime</b> to override the user's erroneous entry with valid data.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDate(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDateTime(System.Int32,System.String,System.Data.SqlTypes.SqlDateTime)">
            <summary>Sets the Decimal value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="DateTimeValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store DateTime values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlDateTime</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlDateTime</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlDateTime</b> to override the user's erroneous entry with valid data.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDate(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetItemDecimal(System.Int32,System.Int16,System.Decimal)">
            <overloads>Sets the value of a DataWindow Decimal column. </overloads><summary>Sets the Decimal value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="DecimalValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store Decimal values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDecimal</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDecimal</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDecimal</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDecimal(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetItemDecimal(System.Int32,System.String,System.Decimal)">
            <summary>Sets the Decimal value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="DecimalValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store Decimal values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDecimal</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDecimal</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDecimal</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDecimal(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)">
            <overloads>Sets the value of a DataWindow Decimal column. </overloads><summary>Sets the Decimal value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="DecimalValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store Decimal values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlDecimal</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlDecimal</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlDecimal</b> to override the user's erroneous entry with valid data.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDecimal(System.Int32,System.Int16,System.Decimal)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDecimal(System.Int32,System.String,System.Data.SqlTypes.SqlDecimal)">
            <summary>Sets the Decimal value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="DecimalValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store Decimal values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlDecimal</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlDecimal</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlDecimal</b> to override the user's erroneous entry with valid data.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDecimal(System.Int32,System.Int16,System.Decimal)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetItemDouble(System.Int32,System.Int16,System.Double)">
            <overloads>Sets the value of a DataWindow integer or floating point column. </overloads><summary>Sets the value of an integer or floating point column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number for which you want to set the value.</param><param name="ColumnNumber">The column number for which you want to set the value.</param><param name="DoubleValue">The value to which you want to set the data at the row and column location.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store numeric values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDouble</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDouble</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDouble</b> to override the user's erroneous entry with valid data.</para>
				<para>If the underlying DataWindow column type is long or ulong, <i>DoubleValue</i> is truncated before being stored in the DataWindow.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDouble(System.Int32,System.Int16,System.Data.SqlTypes.SqlDouble)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDouble(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetItemDouble(System.Int32,System.String,System.Double)">
            <summary>Sets the value of an integer or floating point column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number for which you want to set the value.</param><param name="ColumnName">The column name for which you want to set the value.</param><param name="DoubleValue">The value to which you want to set the data at the row and column location.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store numeric values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDouble</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDouble</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDouble</b> to override the user's erroneous entry with valid data.</para>
				<para>If the underlying DataWindow column type is long or ulong, <i>DoubleValue</i> is truncated before being stored in the DataWindow.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDouble(System.Int32,System.Int16,System.Data.SqlTypes.SqlDouble)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemDouble(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDouble(System.Int32,System.Int16,System.Data.SqlTypes.SqlDouble)">
            <overloads>Sets the value of a DataWindow integer or floating point column. </overloads><summary>Sets the value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="DoubleValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store numeric values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlDouble</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlDouble</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlDouble</b> to override the user's erroneous entry with valid data.</para>
				<para>If the underlying DataWindow column type is long or ulong, <i>DoubleValue</i> is truncated before being stored in the DataWindow.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDouble(System.Int32,System.Int16,System.Double)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDouble(System.Int32,System.String,System.Data.SqlTypes.SqlDouble)">
            <summary>Sets the value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="DoubleValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store numeric values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlDouble</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlDouble</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlDouble</b> to override the user's erroneous entry with valid data.</para>
				<para>If the underlying DataWindow column type is long or ulong, <i>DoubleValue</i> is truncated before being stored in the DataWindow.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDouble(System.Int32,System.Int16,System.Double)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetItemNull(System.Int32,System.Int16)">
            <overloads>Sets the value of a column to null. </overloads><summary>Sets to null  the value of the column, identified by number, in the specified row of the Primary buffer.
      </summary><param name="RowNumber">The row number containing the column.</param><param name="ColumnNumber">The number of the column to be set to null.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.NotSupportedException"><b>SetItemNull</b> is not supported for crosstab DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemNull</b> to set a column value to null before writing it to the database. Alternatively, 
         you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDouble(System.Int32,System.Int16,System.Data.SqlTypes.SqlDouble)"/>, <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)"/>, <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/>, or
         <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)"/> method, since they accept System.Data.SqlTypes datatypes, which support the direct assignment of a null
         value.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetItemNull(System.Int32,System.String)">
            <summary>Sets to null  the value of the column, identified by number, in the specified row of the Primary buffer.
      </summary><param name="RowNumber">The row number containing the column.</param><param name="ColumnName">The name of the column to be set to null.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.NotSupportedException"><b>SetItemNull</b> is not supported for crosstab DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemNull</b> to set a column value to null before writing it to the database. Alternatively, 
         you can use the <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDouble(System.Int32,System.Int16,System.Data.SqlTypes.SqlDouble)"/>, <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)"/>, <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/>, or
         <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)"/> method, since they accept System.Data.SqlTypes datatypes, which support the direct assignment of a null
         value.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.IsItemNull(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.ItemStatus)">
            <overloads>Changes the modification status of a column within a row. </overloads><summary>Changes the modification status of the column, specified by number, within a row. 
      </summary><param name="RowNumber">The row number containing the column.</param><param name="ColumnNumber">The number of the column for which you want to set the status.</param><param name="Buffer">The DataWindow buffer that contains the row.</param><param name="Status">The new <see cref="T:Sybase.DataWindow.ItemStatus"/>.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not a valid row in <i>Buffer</i>.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> in not valid.</exception><exception cref="T:System.NotSupportedException"><b>SetItemStatus</b> is not supported for crosstab DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<see cref="M:Sybase.DataWindow.IDataWindowBase.SetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.RowStatus)"/> changes the modification status of a row; <b>SetItemStatus</b> changes 
         the modification status of an item within a row.</para>
				<para>When data is retrieved into a DataWindow, all rows and columns initially have a status of NotModified. After 
         data has changed in a column in a particular row, either because the user changed the data or the data was changed 
         programmatically, the item status for that column changes to Modified. Once the status for any column in a row changes to Modified,
          the row status also changes to Modified.</para>
				<para>When a row is inserted into a DataWindow, it initially has a row status of New, and all columns in that 
         row initially have an item status of NotModified. After data has changed in a column in the row, either because 
         the user changed the data or the data was changed programmatically, the item status changes to Modified. Once 
         the status for any column in the inserted row changes to Modified, the row status changes to NewAndModified.
         When a DataWindow column has a default value, the column's item status does not change to Modified until the 
         user makes at least one actual change to a column in that row.</para>
				<para>Use <b>SetItemStatus</b> to change the column's status from Modified to NotModified or vice versa. A column marked as NotModified
				will not be included in any UPDATE statements issued by <see cref="M:Sybase.DataWindow.IDataWindowBase.UpdateData"/>.</para>
				<para>For more information about setting the status of rows and columns, see the section on updating the 
         database in the <i>DataWindow .NET Programmer's Guide</i>.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.RowStatus)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetItemStatus(System.Int32,System.String,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.ItemStatus)">
            <summary>Changes the modification status of the column, specified by name, within a row. 
      </summary><param name="RowNumber">The row number containing the column.</param><param name="ColumnName">The name of the column for which you want to set the status.</param><param name="Buffer">The DataWindow buffer that contains the row.</param><param name="Status">The new <see cref="T:Sybase.DataWindow.ItemStatus"/>.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not a valid row in <i>Buffer</i>.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> in not valid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.NotSupportedException"><b>SetItemStatus</b> is not supported for crosstab DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<see cref="M:Sybase.DataWindow.IDataWindowBase.SetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.RowStatus)"/> changes the modification status of a row; <b>SetItemStatus</b> changes 
         the modification status of an item within a row.</para>
				<para>When data is retrieved into a DataWindow, all rows and columns initially have a status of NotModified. After 
         data has changed in a column in a particular row, either because the user changed the data or the data was changed 
         programmatically, the item status for that column changes to Modified. Once the status for any column in a row changes to Modified,
          the row status also changes to Modified.</para>
				<para>When a row is inserted into a DataWindow, it initially has a row status of New, and all columns in that 
         row initially have an item status of NotModified. After data has changed in a column in the row, either because 
         the user changed the data or the data was changed programmatically, the item status changes to Modified. Once 
         the status for any column in the inserted row changes to Modified, the row status changes to NewAndModified.
         When a DataWindow column has a default value, the column's item status does not change to Modified until the 
         user makes at least one actual change to a column in that row.</para>
				<para>Use <b>SetItemStatus</b> to change the column's status from Modified to NotModified or vice versa. A column marked as NotModified
				will not be included in any UPDATE statements issued by <see cref="M:Sybase.DataWindow.IDataWindowBase.UpdateData"/>.</para>
				<para>For more information about setting the status of rows and columns, see the section on updating the 
         database in the <i>DataWindow .NET Programmer's Guide</i>.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.RowStatus)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetItemString(System.Int32,System.Int16,System.String)">
            <overloads>Sets the value of a DataWindow String column. </overloads><summary>Sets the String value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="StringValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store String values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemString</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemString</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemString</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemString(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetItemString(System.Int32,System.String,System.String)">
            <summary>Sets the String value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="StringValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store String values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemString</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemString</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemString</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemString(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)">
            <summary>Sets the String value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="StringValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store String values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlString</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlString</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlString</b> to override the user's erroneous entry with valid data.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemString(System.Int32,System.Int16,System.String)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlString(System.Int32,System.Int16,System.Data.SqlTypes.SqlString)">
            <overloads>Sets the value of a DataWindow String column. </overloads><summary>Sets the String value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="StringValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store String values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlString</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlString</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlString</b> to override the user's erroneous entry with valid data.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemString(System.Int32,System.Int16,System.String)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetItemTime(System.Int32,System.Int16,System.DateTime)">
            <overloads>Sets the value of a DataWindow Time column. </overloads><summary>Sets the Time value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="TimeValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store Time values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemTime</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemTime</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemTime</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemTime(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetItemTime(System.Int32,System.String,System.DateTime)">
            <summary>Sets the Time value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="TimeValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store Time values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemTime</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemTime</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemTime</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetItemTime(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetProperty(System.String,System.String)">
            <summary>Sets the value of a DataWindow object property.</summary><param name="Property">The property you want to modify.</param><param name="Value">The value to which you want to set the property, converted to a string.</param><exception cref="T:System.ArgumentNullException">
				<i>Property</i> or <i>Value</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">
				<i>Property</i> or <i>Value</i> is invalid, or an unexpected error has occurred.</exception><remarks>
				<para>You can only set one property at a time with the <b>SetProperty</b> method, while the <see cref="M:Sybase.DataWindow.IDataWindowBase.Modify(System.String)"/> method 
         lets you supply multiple properties in a single invocation. Some commonly used properties are also exposed on various descendants
         of the <see cref="T:Sybase.DataWindow.GraphicObject"/> classes and can be set directly.  For example, the following code fragments are 
         semantically equivalent:</para>
				<list type="bullet">
					<item>
						<c>dwReport.SetProperty("t_1.background.color", "0~tRGB(0,255,0)")</c>
					</item>
					<item>
						<c>dwReport.Modify("t_1.background.color='0~tRGB(0,255,0)'")</c>
					</item>
					<item>
						<c>Dim gobText as Sybase.DataWindow.GraphicObjectText</c>
        				<c>gobText = CObj(dwEmp.GetObjectByName("t_1"))</c>
        				<c>gobText.BackgroundColor = System.Drawing.Color.Lime</c>
					</item>
				</list>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.Modify(System.String)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetProperty(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetRow(System.Int32)">
            <summary>Sets the current row in a DataWindow. 
      </summary><param name="RowNumber">The row you want to make current.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not valid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>SetRow</b> sets the <see cref="P:Sybase.DataWindow.IDataWindowBase.CurrentRow"/> property. For a DataWindowControl, the cursor moves to the
			current column at <i>RowNumber</i>, but the DataWindow is not scrolled automatically.  Use <see cref="M:Sybase.DataWindow.DataWindowControl.ScrollToRow(System.Int32)"/> 
			passing <i>RowNumber</i> to ensure the row is visible to the user.</para>
				<para>
					<b>SetRow</b> can trigger the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/>, 
         <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/>,
         <see cref="E:Sybase.DataWindow.DataWindowControl.ItemFocusChanged"/>,
         <see cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanging"/>, and
         <see cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanged"/> event. Do not call <b>SetRow</b> 
         in any of these events, because a recursive call can cause a stack fault.</para>
			</remarks><seealso cref="P:Sybase.DataWindow.IDataWindowBase.CurrentRow"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.RowStatus)">
            <summary>Changes the modification status of a row. 
      </summary><param name="RowNumber">The row number for which you want to set the status.</param><param name="Buffer">The DataWindow buffer that contains the row.</param><param name="Status">The new <see cref="T:Sybase.DataWindow.RowStatus"/>.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not a valid row in <i>Buffer</i>.</exception><exception cref="T:System.NotSupportedException"><b>SetRowStatus</b> is not supported for crosstab DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>SetRowStatus</b> changes the modification status of a row; <see cref="M:Sybase.DataWindow.IDataWindowBase.SetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.ItemStatus)"/> changes 
         the modification status of an item within a row.</para>
				<para>When data is retrieved into a DataWindow, all rows and columns initially have a status of NotModified. After 
         data has changed in a column in a particular row, either because the user changed the data or the data was changed 
         programmatically, the item status for that column changes to Modified. Once the status for any column in a row changes to Modified,
          the row status also changes to Modified.</para>
				<para>When a row is inserted into a DataWindow, it initially has a row status of New, and all columns in that 
         row initially have an item status of NotModified. After data has changed in a column in the row, either because 
         the user changed the data or the data was changed programmatically 
         (not including the assignment of a default value), the item status changes to Modified. 
          Once 
         the status for any column in an inserted row changes to Modified, the row status changes to NewAndModified.
</para>
				<para>Changing the row status to NotModified will change the item status of all columns in that row to NotModified.</para>
				<para>Use <b>SetRowStatus</b> when you want to change the way a row will be updated. Typically, you do this to 
         prevent the default behavior from taking place. For example, you might copy a row from one DataWindow 
         to another. After the user modifies the row, you would want to issue an UPDATE statement instead of an 
         INSERT statement, since the row already exists in the database. To do so, you would change the row status of the copied row from NewAndModified to just Modified, signalling <see cref="M:Sybase.DataWindow.IDataWindowBase.UpdateData"/>
         to generate an UPDATE rather than an INSERT statement.</para>
				<para>For more information about setting the status of rows and columns, see the section on updating the 
         database in the <i>DataWindow .NET Programmer's Guide</i>.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.ItemStatus)"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetSort(System.String)">
            <summary>Specifies the sort criteria for a DataWindow control or DataStore. 
      </summary><param name="SortExpression">A string whose value is valid sort expression for the DataWindow.</param><exception cref="T:Sybase.DataWindow.InvalidExpressionException">
				<i>SortExpression</i> is not valid</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>A DataWindow object can have sort criteria specified as part of its definition. <b>SetSort</b> overrides 
         the definition, providing new sort criteria for the DataWindow; however, it does not actually sort the rows. 
         Call the <see cref="M:Sybase.DataWindow.IDataWindowBase.Sort"/> method to perform the actual sorting.</para>
				<para>
					<i>SortExpression</i> can have one of the forms shown below, depending on whether 
         you specify the column by name or number. (Column numbers must be prefaced by #). <c>Order</c> is either <c>A</c> for ascending or <c>D</c> for descending order. You can 
         specify secondary sorting by specifying criteria for additional columns in the format string. Separate each 
         column specification with a comma.</para>
				<list type="bullet">
					<item>
						<c>columnname order</c>, for instance: <c>"emp_lname A"</c> or <c>"emp_lname A, dept_id D"</c>
					</item>
					<item>
						<c>#columnnumber order</c>, for instance: <c>"#3 A"</c>
					</item>
				</list>
				<para>To allow users to specify their own sort expression for a DataWindowControl, 
				call <see cref="M:Sybase.DataWindow.DataWindowControl.SortDialog"/> to display a dialog box allowing for the construction of the expression. 
         Then you can call <see cref="M:Sybase.DataWindow.IDataWindowBase.Sort"/> to apply the dynamically constructed expression to the DataWindowControl.
				</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SortDialog"/><seealso cref="M:Sybase.DataWindow.IDataWindowBase.Sort"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetSqlSelect(System.String)">
            <summary>Specifies the SQL SELECT statement for a DataWindowControl or DataStore.</summary><param name="SqlSyntax">The SQL SELECT syntax</param><exception cref="T:System.InvalidOperationException">
				<see cref="M:Sybase.DataWindow.IDataWindowBase.SetTransaction(Sybase.DataWindow.AdoTransaction)"/> has not been executed.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>You must <see cref="M:Sybase.DataWindow.IDataWindowBase.SetTransaction(Sybase.DataWindow.AdoTransaction)"/> method to set the transaction object before invoking <b>SetSqlSelect</b>, or
				an exception will result.</para>
				<para>Use <b>SetSqlSelect</b> to dynamically change the SQL SELECT statement for a DataWindow.
         If the DataWindow is updatable, the SELECT statement is validated against the database 
         and the DataWindow column specifications. Each column in the SQL SELECT 
         statement must match the column type in the DataWindow object.</para>
				<para>Use <b>SetSqlSelect</b> only if the data source for the DataWindow object is a SQL SELECT statement without 
         retrieval arguments.  You can use <see cref="M:Sybase.DataWindow.IDataWindowBase.Modify(System.String)"/> or <see cref="M:Sybase.DataWindow.IDataWindowBase.SetProperty(System.String,System.String)"/> 
         with the <c>DataWindow.Table.Select</c> property
          when retrieval arguments are involved; however, no validation of the SQL statement will occur, making this technique more
          error prone.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.GetSqlSelect"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetSqlUpdate(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetTransaction(Sybase.DataWindow.AdoTransaction)">
            <summary>Associates a DataWindow with an ADO.NET database connection.
      </summary><param name="AdoTransaction">The <see cref="T:Sybase.DataWindow.AdoTransaction"/> instance referencing the database connection.</param><exception cref="T:System.InvalidOperationException">
				<i>AdoTransaction</i> has not been bound to an ADO.NET connection.</exception><exception cref="T:System.ArgumentNullException">
				<i>AdoTransaction</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In a DataWindow database connection, <i>AdoTransaction</i> is an object that functions 
         as the communications area between the DataWindow and the database. <i>AdoTransaction</i> specifies the 
         parameters for connecting to a database and is a prerequisite for accessing a 
         database via DataWindow .NET using ADO.NET.</para>
				<para>To connect to a database using an ADO.NET connection, you perform the following general steps:
         <list type="number">
						<item>Create a new ADO.NET IDbConnection reference and set its properties. In the initial release of DataWindow .NET, only 
         			<see cref="T:System.Data.OleDb.OleDbConnection"/> is supported.</item>
						<item>Open the connection.</item>
						<item>Create an <see cref="T:Sybase.DataWindow.AdoTransaction"/> object passing the IDBConnection
						reference to its constructor.</item>
						<item>
							<see cref="M:Sybase.DataWindow.AdoTransaction.BindConnection"/> the ADO.NET connection to the internal DataWindow .NET
         database interaction layer.</item>
						<item>Call <b>SetTransaction</b> to associate the transaction with a DataWindow.</item>
						<item>Perform various database operations, such as <see cref="M:Sybase.DataWindow.IDataWindowBase.Retrieve(System.Data.DataTable)"/> and <see cref="M:Sybase.DataWindow.IDataWindowBase.UpdateData"/>.</item>
						<item>Close the ADO.NET connection.</item>
					</list>
				</para>
			</remarks><example>This C# example retrieves and updates a simple DataStore using an ADO.NET connection to Adaptive Server Anywhere 
			(exception handling has been omitted for brevity) :
         <code>
         System.Data.OleDbConnection oleDbConn = new System.Data.OleDb.OleDbConnection();
         oleDbConn.ConnectionString="User ID=dba;Password=sql;Data Source=mydb;Provider=ASAProv.90";
         oleDbConn.Open();
         
         Sybase.DataWindow.AdoTransaction adoTrans = new Sybase.DataWindow.AdoTransaction(oleDbConn);
         adoTrans.BindConnection();
         
         Sybase.DataWindow.DataStore ds = new Sybase.DataWindow.DataStore("hr.pbl","employees");
         ds.SetTransaction(adoTrans);
         ds.Retrieve();
         
         adoTrans.Transaction = adoTrans.Connection.BeginTransaction();
         ds.SetItemString(1,2,"New Hire");
         ds.UpdateData();
         adoTrans.Transaction.Commit();
         
         adoTrans.Connection.Close();
         </code>
			</example><seealso cref="M:Sybase.DataWindow.AdoTransaction.BindConnection"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.SetTransaction(Sybase.DataWindow.Transaction)">
            <overloads>Associates a DataWindow with a physical database connection.</overloads><summary>Associates a DataWindow with a database connection made via a native DataWindow .NET database connection.
      </summary><param name="Transaction">The <see cref="T:Sybase.DataWindow.Transaction"/> instance referencing the database connection.</param><exception cref="T:System.ArgumentNullException">
				<i>Transaction</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In a DataWindow database connection, <i>Transaction</i> is an object that functions 
         as the communications area between the DataWindow and the database. <i>Transaction</i> specifies the 
         parameters for connecting to a database and is a prerequisite for accessing a 
         database via DataWindow .NET when using Sybase-provided database interfaces. <note>You cannot use a
         <see cref="T:Sybase.DataWindow.Transaction"/> to access the database outside of a DataWindow .NET method.  You can do this using
         the <see cref="T:Sybase.DataWindow.AdoTransaction"/> class, however.</note>
				</para>
				<para>The following general steps apply: 
         <list type="number">
						<item>Create a <see cref="T:Sybase.DataWindow.Transaction"/> object instance. </item>
						<item>Set its properties.</item>
						<item>
							<see cref="M:Sybase.DataWindow.Transaction.Connect"/> to the database.</item>
						<item>Call <b>SetTransaction</b> to associate object to a DataWindow.</item>
						<item>Perform various database operations, such as <see cref="M:Sybase.DataWindow.IDataWindowBase.Retrieve(System.Data.DataTable)"/> and <see cref="M:Sybase.DataWindow.IDataWindowBase.UpdateData"/>.</item>
						<item>
							<see cref="M:Sybase.DataWindow.Transaction.Disconnect"/> from the database. </item>
					</list>
				</para>
			</remarks><example>This example connects to the database using the Sybase-provided ODBC interface and uses that connection to 
			retrieve the <c>dwDepartment</c> DataWindowControl:
         <code>
         sqlca = new Sybase.DataWindow.Transaction;
         sqlca.Dbms = Sybase.DataWindow.DbmsType.Odbc;
         sqlca.DbParameter = "ConnectString='DSN=EAS Demo DB V10;UID=dba;PWD=sql'";
         try
         {
         	sqlca.Connect();
         	dwDepartment.SetTransaction(sqlca);
        		dwDepartment.Retrieve();
         } catch (System.Exception ex) {
         	HandleException(ex);
         }
         </code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.ShareData(Sybase.DataWindow.IDataWindowBase)">
            <summary>Shares data retrieved by one DataWindow which is referred with another DataWindow</summary><param name="TargetDW">The (secondary) DataWindow that will share the primary DataWindow's data.</param><exception cref="T:System.ArgumentException">Primary DataWindow cannot be shared with <i>TargetDW</i> due to 
			incompatible formats.</exception><exception cref="T:System.ArgumentNullException">
				<i>TargetDW</i> is null.</exception><exception cref="T:System.NotSupportedException">Crosstab and composite DataWindows cannot be shared, nor can the initiator of <b>ShareData</b>
			be a DataWindowChild nested in composite DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The primary and secondary DataWindows do not share formatting; only the data is shared, including data in the
         Primary, Delete buffer, and Filter buffer, as well as the sort criteria. The columns must be the same for the 
         DataWindow objects, but the SELECT statements can be different. For example, you could share data among DataWindow objects with 
         these SELECT statements:</para>
				<list type="bullet">
					<item>
						<c>SELECT dept_id from dept</c>
					</item>
					<item>
						<c>SELECT dept_id from dept where dept_id = 200</c>
					</item>
					<item>
						<c>SELECT dept_id from employee</c>
					</item>
				</list>
				<para>The WHERE clause in the DataWindow object of <i>TargetDW</i> has no effect on the 
         number of rows returned. The number of rows returned to both DataWindow controls is determined by the 
         WHERE clause in the DataWindow which invoked <b>ShareData</b>.</para>
				<para>When you call methods in either the primary or secondary DataWindow that change the data, 
         messages normally associated with the method are routed to the primary DataWindow 
          and all secondary DataWindows are affected. Such methods include:
         DeleteRow, Filter, FilterDialog, GetSqlSelect, ImportFile, ImportString, ImportClipboard, InsertRow, ReselectRow,
         Reset, Retrieve, SetFilter, SetSort, SetSqlSelect, Sort, SortrDialog, and UpdateData.</para>
				<para>
					<b>ShareData</b> does not automatically share data among DropDownDataWindows
				 in the primary or secondary DataWindows. You must do this explicitly by getting a handle to the DropDownDataWindow 
         using <see cref="M:Sybase.DataWindow.IDataWindowBase.GetChild(System.String)"/> and either retrieving the DropDownDataWindow or using <b>ShareData</b>
         to share data from an appropriate data source with the DropDownDataWindow.</para>
				<para>To turn off sharing in a primary or secondary DataWindow, call the <see cref="M:Sybase.DataWindow.IDataWindowBase.ShareDataOff"/> method. When 
         sharing is turned off for the primary DataWindow, the secondary DataWindows are disconnected and 
         the data disappears. However, turning off sharing for a secondary DataWindow does not affect the 
         data in the primary DataWindow or other secondary DataWindows.</para>
				<para>You cannot use <b>ShareData</b> to share data among application boundaries, <see cref="M:Sybase.DataWindow.IDataStore.GetFullState"/>
				for information on how to manage DataWindows in .NET remoting applications.</para>
				<para>Trying to set 
         the QueryMode or QuerySort DataWindow object properties on a secondary DataWindow is not supported and
         results in an exception.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.ShareDataOff"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.ShareDataOff">
            <summary>Turns off the sharing of data buffers for a DataWindow.</summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>When you call <b>ShareDataOff</b> for a secondary 
         DataWindow, that control no longer contains data, but the primary DataWindow and other secondary controls 
         are not affected. When you call <b>ShareDataOff</b> for the primary DataWindow, all secondary DataWindows are 
         disconnected and no longer contain data. 
      </remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.ShareData(Sybase.DataWindow.IDataWindowBase)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.Sort">
            <summary>Sorts the rows in a DataWindow using the current sort criteria. 
      </summary><exception cref="T:System.NotSupportedException">
				<b>Sort</b> is not supported for a composite DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>To change the sort criteria from the default specified in DataWindow Designer, use
         <see cref="M:Sybase.DataWindow.IDataWindowBase.SetSort(System.String)"/> or <see cref="M:Sybase.DataWindow.DataWindowControl.SortDialog"/> (the latter
         for DataWindowControls only).</para>
				<para>When the <see cref="M:Sybase.DataWindow.IDataWindowBase.Retrieve(System.Data.DataTable)"/> method retrieves data for the DataWindow, it automatically applies the current
				sort criteria. You only need to call <b>Sort</b> after you 
         change the criteria or if the data have changed because of processing or user input.</para>
				<para>After sorting a DataWindow object that includes groups, 
         call <see cref="M:Sybase.DataWindow.IDataWindowBase.CalculateGroups"/> to ensure the groupings take into account changes in the sort order.</para>
				<para>When the Retrieve As Needed DataWindow object property is set, <b>Sort</b> method cancels its effect, because 
         all rows must be retrieved to be sorted correctly.</para>
				<para>When you sort a DataWindow on a specified column, rows with null data remain at the top, regardless of 
         whether you choose ascending or descending order for your sort criteria.</para>
				<para>The sort order is performed 
         on a result set returned from a database, but is not necessarily the same sort order used by the database 
          when an ORDER BY clause is used in a SQL query.</para>
				<para>
					<b>Sort</b> method uses a typical 
         lexical sort, with symbols, such as a hyphen or underline, ranked higher than alphanumeric characters.</para>
			</remarks><example>This example sort <c>dwEmployee</c> by column 1 in ascending order.  Rows with identical values in the first column
			are further sorted by column 2 in descending order:
         <code>
         dwEmployee.SetSort("#1 A, #2 D")
         dwEmployee.Sort()
         </code>
			</example><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetSort(System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SortDialog"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.UpdateData">
            <overloads>Updates the database with the changes made in a DataWindow.</overloads><summary>Updates the database with the changes made in a DataWindow and automatically clears the status flags.</summary><exception cref="T:Sybase.DataWindow.DbErrorException">A database error has occurred.</exception><exception cref="T:System.InvalidOperationException">
				<list type="bullet">
					<item>The DataWindow is not updatable, or</item>
					<item>the associated <see cref="T:Sybase.DataWindow.Transaction"/> or <see cref="T:Sybase.DataWindow.AdoTransaction"/> is not 
				connected to the database.</item>
				</list>
			</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This overload of <b>UpdateData</b> resets the row and item status flags after successfully completing the update. 
				However, you 
         can prevent the flags from being reset until you perform other validations and commit the changes by
         calling one of the overloaded versions of <b>UpdateData</b> and setting the <i>ResetUpdateFlags</i> argument to <c>false</c>. You would then
         later call <see cref="M:Sybase.DataWindow.IDataWindowBase.ResetUpdateStatus"/> to explicitly refresh the status flags. 
         </para>
				<para>
         For DataWindowControls, this version of <b>UpdateData</b> performs an implicit
          <see cref="M:Sybase.DataWindow.DataWindowControl.AcceptText"/> operation on the data within the edit control when the method is 
          invoked.  This ensures that pending data is moved from the edit control to the Primary buffer before the database 
          update occurs. Overloaded versions of this method allow you to change that behavior.</para>
				<para>Do not call this version of <b>UpdateData</b> in the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> event.
         The implicit <see cref="M:Sybase.DataWindow.DataWindowControl.AcceptText"/> will trigger another ItemChanged event leading to
         a recursive loop and likely a stack fault.</para>
				<!-- CHECK ON THIS - SEEMS LIKE A BUG?
				<para>If a DataWindowControl or DataStore is populated using SetChanges or SetFullState, and an UpdateData is done that 
         includes deleted rows, the deleted rows remain in the delete buffer until a subsequent GetChanges is applied 
         to the DataWindow or DataStore.</para>
         -->
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetTransaction(Sybase.DataWindow.AdoTransaction)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.UpdateData(System.Boolean)">
            <summary>Updates the database with the changes made in a DataWindow, optionally accepting a pending change in the edit control.</summary><param name="AcceptData">
				<c>true</c> if an <see cref="M:Sybase.DataWindow.DataWindowControl.AcceptText"/> should be 
			performed prior to the update, false otherwise.</param><exception cref="T:Sybase.DataWindow.DbErrorException">A database error has occurred.</exception><exception cref="T:System.InvalidOperationException">
				<list type="bullet">
					<item>The DataWindow is not updatable, or</item>
					<item>the associated <see cref="T:Sybase.DataWindow.Transaction"/> or <see cref="T:Sybase.DataWindow.AdoTransaction"/> is not 
				connected to the database.</item>
				</list>
			</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Since <see cref="M:Sybase.DataWindow.DataWindowControl.AcceptText"/> applies only to DataWindowControls, this overload is 
				identical to the parameterless version of <b>UpdateData</b> when invoked on a DataStore or DataWindowChild.</para>
				<para>Use this version of <b>UpdateData</b> to ignore any pending changes in the DataWindowControl's edit control
				before performing the update. Changes in the edit control are automatically validated when the user moves from 
				column to column within the control;
				however, if focus leaves the DataWindowControl completely (for instance, a command button is pressed) the last changes made
				in the edit control are not automatically applied to the Primary buffer.  If you want that data to be included in the update, 
				set <i>AcceptData</i> to <c>true</c> (or use the parameterless version of <b>UpdateData</b>).</para>
				<para>If you call <b>UpdateData</b> in the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/>
				event, be sure to set the <i>AcceptData</i> argument to <c>false</c> to 
         avoid an endless loop and a stack fault. If you call <b>UpdateData</b> in that event, the item's old value will be applied
         , not the newly entered value; the new value is not in place until the event completes.
           If you want to include the new value, use an appropriate SetItem method within the event script.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetTransaction(Sybase.DataWindow.AdoTransaction)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindowBase.UpdateData(System.Boolean,System.Boolean)">
            <summary>Updates the database with the changes made in a DataWindow, optionally accepting a pending change in the edit control and
			resetting status flags.</summary><param name="AcceptData">
				<c>true</c> if an <see cref="M:Sybase.DataWindow.DataWindowControl.AcceptText"/> should be 
			performed prior to the update, false otherwise.</param><param name="ResetUpdateFlags">
				<c>true</c> if an row and item status flags should be automatically reset, <c>false</c> if they should
			be retained.</param><exception cref="T:Sybase.DataWindow.DbErrorException">A database error has occurred.</exception><exception cref="T:System.InvalidOperationException">
				<list type="bullet">
					<item>The DataWindow is not updatable, or</item>
					<item>the associated <see cref="T:Sybase.DataWindow.Transaction"/> or <see cref="T:Sybase.DataWindow.AdoTransaction"/> is not 
				connected to the database.</item>
				</list>
			</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>You can use this version of <b>UpdateData</b> to ignore any pending changes in the DataWindowControl's edit control
				before performing the update. Changes in the edit control are automatically validated when the user moves from 
				column to column within the control;
				however, if focus leaves the DataWindowControl completely (for instance, a command button is pressed) the last changes made
				in the edit control are not automatically applied to the Primary buffer.  If you want that data to be included in the update, 
				set <i>AcceptData</i> to <c>true</c> (or use the parameterless version of <b>UpdateData</b>).</para>
				<para>If you call <b>UpdateData</b> in the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/>
				event, be sure to set the <i>AcceptData</i> argument to <c>false</c> to 
         avoid an endless loop and a stack fault. If you call <b>UpdateData</b> in that event, the item's old value will be applied
         , not the newly entered value; the new value is not in place until the event completes.
           If you want to include the new value, use an appropriate SetItem method within the event script.</para>
				<para>If you want to update several tables in one DataWindow, you can use <see cref="M:Sybase.DataWindow.IDataWindowBase.Modify(System.String)"/> or <see cref="M:Sybase.DataWindow.IDataWindowBase.SetProperty(System.String,System.String)"/>
				to change the Update property of columns in each table. To preserve the status flags of the rows and columns, set 
         <i>ResetUpdateFlags</i> argument to <c>false</c>. Because the updates all occur in the same DataWindow control or DataStore, 
         you cannot allow the flags to be cleared until all the tables have used them. When all the updates are 
         successfully completed and committed, call <see cref="M:Sybase.DataWindow.IDataWindowBase.ResetUpdateStatus"/> to clear the status flags and return the DataWindow to 
         an unmodified state.</para>
				<para>Likewise, if you are updating multiple DataWindows as part of one transaction, set the <i>ResetUpdateFlags</i>
         argument to <c>false</c>. This will prevent each DataWindow from "forgetting" which rows to update in case one of 
         the updates fails. You can roll back, try to correct the situation, and attempt to update again. Once all of the 
         DataWindows have been updated successfully, commit the changes to finalize the 
         transaction and call <see cref="M:Sybase.DataWindow.IDataWindowBase.ResetUpdateStatus"/> to reset the status flags.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindowBase.SetTransaction(Sybase.DataWindow.AdoTransaction)"/>
        </member>
        <member name="P:Sybase.DataWindow.IDataWindowBase.DeletedCount">
            <summary>Gets the number of rows that have been marked for deletion in the database. 
      </summary><value>The number of rows currently in the Delete buffer.</value>
        </member>
        <member name="P:Sybase.DataWindow.IDataWindowBase.FilteredCount">
            <summary>Gets the number of rows not included in the Primary buffer
         because of the application of a filter criteria. 
      </summary><value>The number of rows currently in the Filter buffer.</value>
        </member>
        <member name="P:Sybase.DataWindow.IDataWindowBase.ModifiedCount">
            <summary>Get number of rows that have been modified. 
      </summary><value>The number of modified rows in the DataWindow.</value>
        </member>
        <member name="P:Sybase.DataWindow.IDataWindowBase.RowCount">
            <summary>Gets the number of rows in the Primary buffer.</summary><value>The number of rows currently in the Primary buffer.</value>
        </member>
        <member name="P:Sybase.DataWindow.IDataWindowBase.ColumnCount">
            <summary>Returns the number of columns in the DataWindow or DataStore. Computed columns are not included in this value.</summary><value>A short read-only value indicating the number of columns.</value><remarks>This property can also be evaluated using a DataWindow object property.  See the <i>DataWindow Object Reference</i> for more information.	</remarks><example>
		<code>
		short ColCount;
		ColCount = dwEmp.ColumnCount;
		</code>
		</example>
        </member>
        <member name="P:Sybase.DataWindow.IDataWindowBase.CurrentRow">
            <summary>Gets the number of the current row in a DataWindow.
      </summary><value>The number of the current row in the DataWindow.</value>
        </member>
        <member name="P:Sybase.DataWindow.IDataWindowBase.Style">
            <summary>Gets the style of the DataWindow.</summary><value>The style of the DataWindow (e.g., Tabular, Grid, Crosstab).</value><remarks>The Tabular, FreeForm, and Group styles are internally identical; the <b>Style</b> will always be reported as Tabular.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.IDataWindowBase.DataSourceType">
            <!-- No matching elements were found for the following include tag --><include file="DataWindowComments.xml" path="doc/members/member[@name=&quot;P:DataSourceType&quot;]/*"/>
        </member>
        <member name="P:Sybase.DataWindow.IDataWindowBase.Syntax">
            <summary>
        Returns the syntax that describes the DataWindow object.
       </summary><value>A string that contains the complete syntax for the DataWindow object.</value><remarks>This property can also be evaluated using a DataWindow object property. See the <i>DataWindow Object Reference</i> for more information.	</remarks><example>
		<code>
String dwSyntax;
dwSyntax = dw_1.Syntax;
		</code>
		</example>
        </member>
        <member name="P:Sybase.DataWindow.IDataWindowBase.PrintProperties">
            <summary>
        Gets print properties. For a complete list of properties, see the <see cref="T:Sybase.DataWindow.PrintProperties"/> class.
       </summary>
        </member>
        <member name="P:Sybase.DataWindow.IDataWindowBase.ContainsNestedReport">
            <summary>
		Whether the DataWindow contains a nested report.
		</summary><value>A boolean value that is true if the DataWindow contains a nested reported and false otherwise.</value>
        </member>
        <member name="M:Sybase.DataWindow.IDataStore.Create(System.String)">
            <summary>Dynamically creates and assigns a DataWindow object to a DataWindowControl or DataStore. 
      </summary><param name="Syntax">A string containing the DataWindow source code for the DataWindow object.</param><exception cref="T:System.ArgumentNullException">
				<i>Syntax</i> is null. </exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>Use the <see cref="M:Sybase.DataWindow.DataWindowSyntaxGenerator.DataWindowSyntaxFromSql(Sybase.DataWindow.Transaction,System.String)"/> to create the
         DataWindow syntax based on a SQL statement. You can also use the 
         syntax of an existing DataWindow object as a template. To obtain the syntax, use the Export item on the BindAdoDataTable is not supported for crosstab DataWindows.</remarks>
        </member>
        <member name="M:Sybase.DataWindow.IDataStore.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Reports the next row and column that is both required and currently contains a null value. 
      </summary><param name="RowNumber">The first row to be searched. Upon return <i>RowNumber</i> also 
         stores the number of the found row.</param><param name="ColumnNumber">The number of the first column to be searched. Upon return <i>ColumnNumber</i>
         also stores the number of the found column.</param><param name="Buffer">The DataWindow buffer you want to search 
         for required columns. Valid buffers are Primary and Filter.</param><param name="UpdateOnly">A boolean value specifying whether all rows and columns should be searched or only
         rows that have been modified.</param><exception cref="T:System.ArgumentOutOfRangeException">
				<i>Buffer</i> specified the Delete buffer.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>For <b>FindNextRequiredColumn</b> to report an empty required column, the column's value must actually be null, 
         not an empty string. To make a column required, set the <c>Edit.Required</c> property for the DataWindow object to <c>true</c> in 
         code or check the Required check box for the column in the Edit page in the Properties view in DataWindow Designer.</para>
				<para>Additionally, when the user modifies a row and leaves a column empty, the new value is an empty string, unless the 
         column's edit style has the Empty String Is Null check box checked; therefore, <b>FindNextRequiredColumn</b> does not report empty required 
         columns in modified rows unless this property is set.</para>
				<para>New rows have null values in their columns, unless the columns have default values. If <i>UpdateOnly</i> is <c>false</c>, 
         <b>FindNextRequiredColumn</b> reports null required columns in new rows. If <i>UpdateOnly</i> is <c>true</c>, null columns in new rows are 
         reported only if one or more of the columns within that row contains data.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.IDataStore.GetChanges">
            <summary>Retrieves changes made to a DataWindowControl or DataStore in a format suitable for serialization in .NET remoting applications. 
      </summary><returns>A serializable object containing the changes.</returns><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>GetChanges</b> is used in conjunction with <see cref="M:Sybase.DataWindow.IDataStore.SetChanges(Sybase.DataWindow.DataWindowChanges)"/> to synchronize multiple DataWindowControls or 
         DataStores. <b>GetChanges</b> retrieves the data buffers and status flags for modified rows, and <see cref="M:Sybase.DataWindow.IDataStore.SetChanges(Sybase.DataWindow.DataWindowChanges)"/>
         applies the changes to another DataWindowControl or DataStore.</para>
				<!-- Need good remoting example here -->
			</remarks><seealso cref="M:Sybase.DataWindow.IDataStore.SetChanges(Sybase.DataWindow.DataWindowChanges)"/><seealso cref="M:Sybase.DataWindow.IDataStore.GetFullState"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataStore.GetColumnNumber">
            <summary>Obtains the number of the current column.</summary><returns>Returns the number of the current column, or 0 if no column is current.</returns><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>A column becomes the current column after the user tabs to it or clicks it or if 
         the <see cref="M:Sybase.DataWindow.IDataStore.SetColumn(System.Int16)"/> method is called on the column. A column cannot be current if it cannot be edited (if it 
         has a <see cref="P:Sybase.DataWindow.GraphicObjectEditableColumn.TabOrder"/> value of 0). A DataWindowControl always has a current column, 
         even when the control is not active, as long as there is at least one editable column. 
      </remarks><example>This statement returns the number of the current column in <c>dwEmp</c>:
         <code>currentColNum = dwEmp.GetColumn()</code>
			</example><seealso cref="M:Sybase.DataWindow.IDataStore.GetColumnName"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataStore.GetColumnName">
            <summary>Obtains the name of the current column.</summary><returns>Returns the name of the current column, or the empty string ("") if no 
         column is current.</returns><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>A column becomes the current column after the user tabs to it or clicks it or if 
         the <see cref="M:Sybase.DataWindow.IDataStore.SetColumn(System.Int16)"/> method is called on the column. A column cannot be current if it cannot be edited (if it 
         has a <see cref="P:Sybase.DataWindow.GraphicObjectEditableColumn.TabOrder"/> value of 0). A DataWindowControl always has a current column, 
         even when the control is not active, as long as there is at least one editable column. 
      </remarks><example>This statement returns the name of the current column in <c>dwEmp</c>:
         <code>currentColName = dwEmp.GetColumnName()</code>
			</example><seealso cref="M:Sybase.DataWindow.IDataStore.GetColumnNumber"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataStore.GetFullState">
            <summary>Retrieves the contents of a DataWindowControl or DataStore in a format suitable for serialization in .NET remoting applications. 
       
      </summary><returns>A serializable object representing the contents and format of the DataWindow.</returns><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>GetFullState</b> retrieves the entire state of a DataWindowControl or DataStore, including the DataWindow 
         object specification, the data buffers, and the status flags. When you call <see cref="M:Sybase.DataWindow.IDataStore.SetFullState(Sybase.DataWindow.DataWindowFullState)"/> to apply the 
         DataWindowFullState object created by <b>GetFullState</b> to another DataWindowControl (or DataStore), the target DataWindowControl
         (or DataStore) has enough information to 
         recreate the source DataWindow.  If the target already has a DataWindow object assigned, it will be overwritten.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataStore.SetFullState(Sybase.DataWindow.DataWindowFullState)"/><seealso cref="M:Sybase.DataWindow.IDataStore.GetChanges"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataStore.SetChanges(Sybase.DataWindow.DataWindowChanges)">
            <summary>Applies changes captured with <see cref="M:Sybase.DataWindow.IDataStore.GetChanges"/> to a DataWindowControl or DataStore. 
      </summary><param name="Changes">A <see cref="T:Sybase.DataWindow.DataWindowChanges"/> object containing the modifications to be applied.</param><exception cref="T:System.ArgumentNullException">
				<i>Changes</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This method in conjunction with <see cref="M:Sybase.DataWindow.IDataStore.GetChanges"/> to synchronize two or more DataWindowControls or DataStores and is
				designed specifically for use in
				.NET remoting applications.  <see cref="T:Sybase.DataWindow.DataWindowChanges"/> is a serializable object allowing DataWindow
				changes made in a client application space to be transferred to a server application where the changes can be applied to
				the backend database.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataStore.GetChanges"/><seealso cref="M:Sybase.DataWindow.IDataStore.SetFullState(Sybase.DataWindow.DataWindowFullState)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataStore.SetColumn(System.Int16)">
            <overloads>Sets the current column in a DataWindow. </overloads><summary>Sets the current column in a DataWindow given the column number. 
      </summary><param name="ColumnNumber">The column number to be made current.</param><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is not valid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> cannot be made current, because it is not editable.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Only editable columns, that is columns with a <see cref="P:Sybase.DataWindow.GraphicObjectEditableColumn.TabOrder"/> greater than 0, can be current.
				A <see cref="T:System.InvalidOperationException"/> will occur if you attempt to make a noneditable column the current column.</para>
				<para>
					<b>SetColumn</b> can trigger the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/>, <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/>, 
				and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemFocusChanged"/> events. Calling <b>SetColumn</b> in any of these events could result in an infinite loop.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataStore.GetColumnNumber"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataStore.SetColumn(System.String)">
            <summary>Sets the current column in a DataWindow given the column name. 
      </summary><param name="ColumnName">The name of column to be made current.</param><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is not valid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> cannot be made current, because it is not editable.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Only editable columns, that is columns with a <see cref="P:Sybase.DataWindow.GraphicObjectEditableColumn.TabOrder"/> greater than 0, can be current.
				A <see cref="T:System.InvalidOperationException"/> will occur if you attempt to make a noneditable column the current column.</para>
				<para>
					<b>SetColumn</b> can trigger the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/>, <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/>, 
				and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemFocusChanged"/> events. Calling <b>SetColumn</b> in any of these events could result in an infinite loop.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataStore.GetColumnName"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataStore.SetFullState(Sybase.DataWindow.DataWindowFullState)">
            <summary>Applies the DataWindow state obtained by <see cref="M:Sybase.DataWindow.IDataStore.GetFullState"/> to another DataWindowControl or DataStore. 
      </summary><param name="FullState">A <see cref="T:Sybase.DataWindow.DataWindowFullState"/> object containing the data and status information to be applied.</param><exception cref="T:System.ArgumentNullException">
				<i>FullState</i> is null.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<see cref="M:Sybase.DataWindow.IDataStore.GetFullState"/> retrieves the entire state of a DataWindowControl or DataStore including the DataWindow object 
				specification, the data buffers, and the status flags in a format that can be serialized over application boundaries in .NET remoting applications. 
				When you use <b>SetFullState</b> 
         to apply <i>FullState</i>, the target DataWindow has 
         enough information to recreate the source DataWindow. </para>
				<para>Because <i>FullState</i> contains the DataWindow object specification, 
         the call to <b>SetFullState</b> will overwrite the DataWindow object current stored in the targeted DataWindow. 
         If the target of <b>SetFullState</b> does not have a DataWindow object associated with it, the DataWindow object associated 
         with <i>FullState</i> is used. The value of the <see cref="P:Sybase.DataWindow.DataWindowControl.DataWindowObject"/> property remains an empty string (""), however.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataStore.GetFullState"/><seealso cref="M:Sybase.DataWindow.IDataStore.SetChanges(Sybase.DataWindow.DataWindowChanges)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataStore.SetSqlUpdate(System.String)">
            <summary>Specifies the SQL statement that is about to be sent to the database by a DataWindowControl or DataStore. 
      </summary><param name="SqlSyntax">The SQL syntax to be submitted to the database.</param><exception cref="T:System.ArgumentNullException">
				<i>SqlSyntax</i> is null.</exception><exception cref="T:System.NotSupportedException">
				<b>SetSqlUpdate</b> was invoked outside of the <see cref="E:Sybase.DataWindow.IDataStore.SqlPreview"/> event.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>Use <b>SetSqlUpdate</b> to modify SQL syntax before it is sent to the database. This method can only be
			called within the <see cref="E:Sybase.DataWindow.IDataStore.SqlPreview"/> event, where the SQL statement is made available via the 
			SqlSyntax property of <see cref="T:Sybase.DataWindow.SqlPreviewEventArgs"/>. 
      </remarks>
        </member>
        <member name="M:Sybase.DataWindow.IDataStore.SetWSConnection(Sybase.DataWindow.WebServiceConnection)">
            <summary>Specifies overrides for a DataWindow or DataStore's web service connection</summary><param name="wsObject">The <see cref="T:Sybase.DataWindow.WebServiceConnection"/> containing the override values.</param>
        </member>
        <member name="P:Sybase.DataWindow.IDataStore.DataWindowObject">
            <summary>Gets or sets the name of the DataWindow object to load for this DataWindowControl or DataStore. 
      </summary><value>The DataWindow object name.</value><exception cref="T:Sybase.DataWindow.DataWindowLoadFailedException">The specified DataWindow object could not be found in <see cref="P:Sybase.DataWindow.IDataStore.LibraryList"/>.</exception>
        </member>
        <member name="P:Sybase.DataWindow.IDataStore.LibraryList">
            <summary>Gets or sets the list of libraries in which the DataWindowControl or DataStore searches for DataWindow objects. 
      </summary><value>The list of libraries.</value>
        </member>
        <member name="E:Sybase.DataWindow.IDataStore.ItemError">
            <summary>Occurs when a modified column does not pass the validation criteria specified for it.</summary><remarks>This event can be triggered as a result of user input into a <see cref="T:Sybase.DataWindow.DataWindowControl"/>
			and as a result of the <see cref="M:Sybase.DataWindow.DataStore.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/>, <see cref="M:Sybase.DataWindow.DataStore.ImportString(System.String,Sybase.DataWindow.FileSaveAsType)"/>, and <see cref="M:Sybase.DataWindow.DataStore.ImportClipboard(Sybase.DataWindow.FileSaveAsType)"/>
			methods.</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/>
        </member>
        <member name="E:Sybase.DataWindow.IDataStore.DataWindowCreated">
            <summary>Occurs when a DataWindow object is attached to a DataWindowControl or DataStore.</summary><remarks>This event is triggered whenever the <see cref="P:Sybase.DataWindow.IDataStore.DataWindowObject"/> property is modified.</remarks>
        </member>
        <member name="E:Sybase.DataWindow.IDataStore.BeginPrint">
            <summary>Occurs when the printing of the DataWindow starts.</summary><remarks><b>BeginPrint</b> is triggered when the <see cref="M:Sybase.DataWindow.DataWindowControl.Print"/> method is invoked.</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.EndPrint"/><seealso cref="E:Sybase.DataWindow.DataWindowControl.PagePrinting"/>
        </member>
        <member name="E:Sybase.DataWindow.IDataStore.PagePrinting">
            <summary>Occurs before each page is formatted for printing.</summary><remarks>You can set the <see cref="P:Sybase.DataWindow.PagePrintingEventArgs.Cancel"/> property of the associated
			<see cref="T:Sybase.DataWindow.PagePrintingEventArgs"/> object to skip printing the current page.  To cancel, the remainder of the print job, each page must be cancelled
			individually.</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.BeginPrint"/><seealso cref="E:Sybase.DataWindow.DataWindowControl.EndPrint"/>
        </member>
        <member name="E:Sybase.DataWindow.IDataStore.EndPrint">
            <summary>Occurs when the printing of the DataWindow ends.</summary><seealso cref="E:Sybase.DataWindow.DataWindowControl.BeginPrint"/><seealso cref="E:Sybase.DataWindow.DataWindowControl.PagePrinting"/>
        </member>
        <member name="E:Sybase.DataWindow.IDataStore.EndRetrieve">
            <summary>Occurs when the retrieval from the database has completed.</summary><seealso cref="E:Sybase.DataWindow.DataWindowControl.BeginRetrieve"/><seealso cref="E:Sybase.DataWindow.DataWindowControl.RowRetrieved"/>
        </member>
        <member name="E:Sybase.DataWindow.IDataStore.RowRetrieved">
            <summary>Occurs after each row has been retrieved.</summary><remarks>To cancel the retrieval of the remaining rows of a result set, set the <see cref="P:Sybase.DataWindow.RowRetrievedEventArgs.Cancel"/> property of the
			associated <see cref="T:Sybase.DataWindow.RowRetrievedEventArgs"/> object to <c>true</c>.</remarks><seealso cref="E:Sybase.DataWindow.IDataStore.BeginRetrieve"/><seealso cref="E:Sybase.DataWindow.IDataStore.EndRetrieve"/>
        </member>
        <member name="E:Sybase.DataWindow.IDataStore.BeginRetrieve">
            <summary>Occurs when the retrieval from the database is about to begin.</summary><remarks><b>BeginRetrieve</b> is triggered when the <see cref="M:Sybase.DataWindow.DataWindowControl.Retrieve(System.Data.DataTable)"/> method is invoked.</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.EndRetrieve"/><seealso cref="E:Sybase.DataWindow.DataWindowControl.RowRetrieved"/>
        </member>
        <member name="E:Sybase.DataWindow.IDataStore.SqlPreview">
            <summary>Occurs immediately before a SQL statement is submitted to the database.</summary><remarks>The <b>SqlPreview</b> event allows you to intercept all SQL statement issued by a DataStore or DataWindowControl to the database.  Properties of
			the associated <see cref="T:Sybase.DataWindow.SqlPreviewEventArgs"/> object contain the context under which the statement is issued and the text of the SQL itself, allowing
			developers to inspect, change or even cancel the request that is forwarded to the database.</remarks>
        </member>
        <member name="E:Sybase.DataWindow.IDataStore.EndUpdate">
            <summary>Occurs when all the updates to the database have completed.</summary><seealso cref="E:Sybase.DataWindow.DataWindowControl.BeginUpdate"/>
        </member>
        <member name="E:Sybase.DataWindow.IDataStore.BeginUpdate">
            <summary>Occurs just before changes are sent to the database.</summary><remarks>
				<b>BeginUpdate</b> is triggered when the <see cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/> method is invoked.</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.EndUpdate"/>
        </member>
        <member name="E:Sybase.DataWindow.IDataStore.GraphCreated">
            <summary>Occurs after a graph is populated with data, but before it is displayed.</summary><remarks>Add code to this event to modify the graph layout before it is displayed to the user.</remarks>
        </member>
        <member name="E:Sybase.DataWindow.IDataStore.TreeViewExpanding">
            <summary> Occurs when a TreeView node is about to expand.</summary><remarks><b>TreeViewExpanding</b> is triggered when one of the Expand methods is called or when the user clicks on the expand icon.</remarks>
        </member>
        <member name="E:Sybase.DataWindow.IDataStore.TreeViewCollapsing">
            <summary> Occurs when a TreeView node is about to collapse.</summary><remarks><b>TreeViewCollapsing</b> is triggered when one of the Collapse methods is called or when the user clicks on the collapse icon.</remarks>
        </member>
        <member name="E:Sybase.DataWindow.IDataStore.TreeViewNodeSelecting">
            <summary> Occurs when a TreeView node is about to be selected.</summary><remarks>
				<b>TreeViewNodeSelecting</b> is triggered when one of the SelectTreeNode methods is called or when the user selects a TreeView node using mouse.
			</remarks>
        </member>
        <member name="E:Sybase.DataWindow.IDataStore.TreeViewExpanded">
            <summary> Occurs when a TreeView node has expanded.</summary><remarks><b>TreeViewExpanded</b> is triggered after one of the Expand methods is called or when the user clicks on the expand icon if the action was not canceled in the <see cref="E:Sybase.DataWindow.DataWindowControl.TreeViewExpanding"></see> event.</remarks>
        </member>
        <member name="E:Sybase.DataWindow.IDataStore.TreeViewCollapsed">
            <summary> Occurs when a TreeView node has collapsed.</summary><remarks><b>TreeViewCollapse</b> is triggered after one of the Collapse methods is called or when the user clicks on the collapse icon if the action was not canceled in the <see cref="E:Sybase.DataWindow.DataWindowControl.TreeViewCollapsing"></see> event.</remarks>
        </member>
        <member name="E:Sybase.DataWindow.IDataStore.TreeViewNodeSelected">
            <summary> Occurs when a TreeView node is selected.</summary><remarks>
				<b>TreeViewNodeSelected</b> is triggered when one of the SelectTreeNode methods is called or when the user selects a TreeView node using mouse.
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindow.AcceptText">
            <summary>Applies the contents of the DataWindowControl's edit control to the current item in the Primary buffer.</summary><returns>
				<c>true</c> if the edit control's contents pass validation, otherwise <c>false</c>.</returns><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>
				<para>The data in the edit control must pass the validation rule for the 
         column before it can be stored in the item.</para>
				<para>When a user moves from item to item in a DataWindowControl, the control validates and accepts 
         data the user has edited. When a user modifies an item and immediately changes focus to 
         another control on the form, the DataWindowControl does not accept the modified data - the data 
         remains in the edit control. 
         Use <b>AcceptText</b> in this situation to ensure that the user's data is moved from the edit control to the DataWindowControl's Primary buffer.</para>
			</remarks><example>This code in the form's Closing event cancels the close if the changes have not been accepted.<code>
         [Visual Basic]
         Private Sub Form1_Closing(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) 
            ' accept any newly entered data
            If (Not dwEmployee.AcceptText()) Then
               e.Cancel = true
         
            // do not allow close if pending changes
            Else If (dwEmployee.ModifiedCount &gt; 0) Then
               MessageBox.Show("You must either save or cancel pending changes before exiting this application.", _
                 "Cannot Exit Application", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
               e.Cancel = true
            End If
         End Sub
         
         [C#]
         private void Form1_Closing(object sender, System.ComponentModel.CancelEventArgs e)
         {
            // accept any newly entered data
            if (!dwEmployee.AcceptText())
               e.Cancel = true;
         
            // don't allow close if pending changes
            else if (dwEmployee.ModifiedCount &gt; 0) 
            {
               MessageBox.Show("You must either save or cancel pending changes before exiting this application.", 
                  "Cannot Exit Application", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
               e.Cancel = true;
            }
         }
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindow.CrosstabDialog">
            <summary>Displays the Crosstab Definition dialog box so the user can modify the definition of a 
         crosstab DataWindow at runtime. 
      </summary><exception cref="T:System.NotSupportedException">The assigned DataWindow object is not a Crosstab. </exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>You must connect to a database and set the DataWindowControl's transaction object before calling this method.</remarks><example>This statement in the code for a command button's Clicked event displays the CrossTab Definition dialog box so that the user can modify the definition of the crosstab DataWindow object in <c>dwCust</c>:
         <code>
         [Visual Basic]
         dwCust.CrosstabDialog()
         
         [C#]
         dwCust.CrosstabDialog();
         </code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindow.FilterDialog">
            <summary>Displays a dialog box in which the user can dynamically create a filter expression for a DataWindowControl.</summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>
				<para>Call <see cref="M:Sybase.DataWindow.DataWindowControl.Filter"/> after this method to apply the new filter expression to the DataWindowControl.</para>
				<para>Use <see cref="M:Sybase.DataWindow.DataWindowControl.SetFilter(System.String)"/> to set a filter expression programmatically.</para>
			</remarks><example>This statement displays the Specify Filter dialog box for <c>dwEmp</c>:
         <code>dwEmp.FilterDialog()</code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetFilter(System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.Filter"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindow.FindNextSelectedRow(System.Int32)">
            <summary>Reports the number of the next highlighted row in a DataWindowControl. 
      </summary><returns>The number of the selected row, or 0 if no row is selected. </returns><param name="RowNumber">The number of the row after which to begin the search. Use a value of 0 to search from the beginning.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>
				<para>
					<b>FindNextSelectedRow</b> begins searching after <i>RowNumber</i>, and so does not return <i>RowNumber</i> if that row is selected. Use a value of 0 to search from the beginning.</para>
				<para>Rows are not automatically selected (highlighted) when they become current. You can select a 
         row by calling the <see cref="M:Sybase.DataWindow.IDataWindow.SelectRow(System.Int32,System.Boolean)"/> method, perhaps in conjunction with the <see cref="E:Sybase.DataWindow.IDataWindow.RowFocusChanged"/> event.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindow.SelectRow(System.Int32,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindow.GetText">
            <summary>Obtains the current value of the DataWindowControl's edit control.</summary><returns>The string value in the edit control, or the empty string ("") if the edit control is not currently visible.</returns><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>
				<para>The values in the rows and columns of a DataWindow are items in the DataWindow's buffer. 
         When a user edits a value in a row and column, the item value is transferred as text to an edit 
         control in which the user can change the value. When the user leaves the column or when code 
         calls <see cref="M:Sybase.DataWindow.IDataWindow.AcceptText"/>, the text in the edit control becomes the value 
         of the item in the Primary buffer (assuming it passes any validation criteria specified).
          Use <b>GetText</b> to access the value before it has been accepted into the Primary buffer.</para>
				<para>To obtain the value stored in the DataWindow's buffer for a given row and column, use the GetItem 
         method that corresponds with the datatype of the column (such as <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemDateTime(System.Int32,System.Int16)"/> and 
          <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>).</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindow.SetText(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindow.IsSelected(System.Int32)">
            <summary>Tests whether a row is selected (highlighted) in a DataWindowControl.</summary><returns>
				<c>true</c> if <i>RowNumber</i>in the DataWindowControl is selected and <c>false</c> otherwise.</returns><param name="RowNumber">The number of the row you want to test to see if it is selected.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><seealso cref="M:Sybase.DataWindow.IDataWindow.SelectRow(System.Int32,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindow.PrintDialog">
            <summary>Invokes the DataWindowControl's print dialog.</summary>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindow.PrintDialog(System.Boolean)">
            <summary>Invokes the DataWindowControl's print dialog.</summary><param name="showCancelDialog">
				<c>true</c> if a dialog box allowing the print job to be canceled is to be displayed, otherwise <c>false</c>.
			</param>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindow.OleActivate(System.Int32,System.String,System.Int16)">
            <overloads>Activates Object Linking and Embedding (OLE) for a DataWindow column and sends
			 a command verb to the OLE server application. </overloads><summary>Activates Object Linking and Embedding (OLE) for the DataWindow column specified by row and 
         column name and sends a command verb to the OLE server application. 
      </summary><param name="RowNumber">The row containing the OLE-Blob column.</param><param name="ColumnName">The name of the OLE-Blob column.</param><param name="OleVerb">The action for the OLE Server to perform. This is usually 0, is dependent on the OLE server.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not valid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is not valid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain an OLE-Blob.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The user can activate the associated OLE server application by double-clicking an OLE blob column in a DataWindow. 
         Use <b>OLEActivate</b> when you want to perform this activation in response to some other event or action, 
         like when the user clicks a button.</para>
				<para>
					<i>OleVerb</i> specifies what action occurs when the OLE server application is invoked.
         The default verb (0) generally means you want to edit the document. Each OLE application has its 
         own particular set of supported verbs. You can find out what verbs the application supports by 
         using the advanced interface of the Windows RegEdit utility (run REGEDIT /V).</para>
				<para>Data for an OLE application is stored in the database as a Binary Large Object (blob).
         In Adaptive Server Anywhere, the datatype of the database column is long binary.</para>
				<para>To make the 
         blob accessible to users, use DataWindow Designer to set up the blob column. You add an OLE Database Blob object
           to 
         the DataWindow object and specify the OLE server application in the Database Binary/Text Large 
         Object dialog box.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindow.OleActivate(System.Int32,System.Int16,System.Int16)">
            <summary>Activates Object Linking and Embedding (OLE) for the DataWindow column specified by row and 
         column number and sends a command verb to the OLE server application. 
      </summary><param name="RowNumber">The row containing the OLE-Blob column.</param><param name="ColumnNumber">The number of the OLE-Blob column.</param><param name="OleVerb">The action for the OLE Server to perform. This is usually 0, is dependent on the OLE server.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not valid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is not valid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain an OLE-Blob.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The user can activate the associated OLE server application by double-clicking an OLE blob column in a DataWindow. 
         Use <b>OLEActivate</b> when you want to perform this activation in response to some other event or action, 
         like when the user clicks a button.</para>
				<para>
					<i>OleVerb</i> specifies what action occurs when the OLE server application is invoked.
         The default verb (0) generally means you want to edit the document. Each OLE application has its 
         own particular set of supported verbs. You can find out what verbs the application supports by 
         using the advanced interface of the Windows RegEdit utility (run REGEDIT /V).</para>
				<para>Data for an OLE application is stored in the database as a Binary Large Object (blob).
         In Adaptive Server Anywhere, the datatype of the database column is long binary.</para>
				<para>To make the 
         blob accessible to users, use DataWindow Designer to set up the blob column. You add an OLE Database Blob object
           to 
         the DataWindow object and specify the OLE server application in the Database Binary/Text Large 
         Object dialog box.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindow.Scroll(Sybase.DataWindow.ScrollAction)">
            <summary>Scrolls the DataWindowControl to the beginning or end or one line or page in either direction.
      </summary><returns>The number of the first visible row in the DataWindowControl. </returns><param name="Type">The <see cref="T:Sybase.DataWindow.ScrollAction"/> to be performed.</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>To scroll to a specific row in the DataWindowControl, use <see cref="M:Sybase.DataWindow.IDataWindow.ScrollToRow(System.Int32)"/>.</para>
			</remarks><example>This code for a Prior button scrolls to the previous row in the DataWindow dwEmp:
         <code>
         [Visual Basic]
         Private Sub btnPrior_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnPrior.Click
            Try
               '
               ' Scroll to prior row.
               '
               iRowNo = dwEmp.Scroll(Sybase.DataWindow.ScrollAction.ScrollPriorRow)
         
            Catch ex As Exception
               ErrorHandler.HandleException(ex)
            End Try
         End Sub
         
         </code>
				<code>
         [C#]
         private void btnPrior_Click(object sender, System.EventArgs e)
            try
            {
               // Scroll to prior row.
               iRowNo = dwBasic.Scroll(Sybase.DataWindow.ScrollAction.ScrollPriorRow);
            }
         
            catch (Exception ex)
            {
               ErrorHandler.HandleException(ex);
            }
         }
         </code>
			</example><seealso cref="M:Sybase.DataWindow.IDataWindow.ScrollToRow(System.Int32)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindow.ScrollToRow(System.Int32)">
            <summary>Scrolls to the specified row within a DataWindowControl. 
      </summary><returns>The number of the first visible row in the DataWindowControl. </returns><param name="RowNumber">The row number to which to scroll.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is less than 1.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>After you call <b>ScrollToRow</b>, the specified row becomes the new current row. If that row is already visible, 
         the displayed rows do not change. If it is not visible, the DataWindowControl is scrolled so that the target row 
         is displayed.</para>
				<para>
					<b>ScrollToRow</b> 
         does not highlight the row; that is accomplished using <see cref="M:Sybase.DataWindow.IDataWindow.SelectRow(System.Int32,System.Boolean)"/>.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataWindow.Scroll(Sybase.DataWindow.ScrollAction)"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindow.SelectRow(System.Int32,System.Boolean)">
            <summary>Add or removes highlighting (reverse video) from a row within a DataWindowControl.      </summary><param name="RowNumber">The row to be affected; specify 0 to target all rows.</param><param name="Select">
				<c>true</c> if the row(s) should be highlighted, <c>false</c>
			if highlighting should be removed.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><example>The following code, selects the current row after clearing the highlighting from any previously selected row:
         <code>
         dwEmployee.SelectRow(0, false);
         dwEmployee.SelectRow(dwEmployee.CurrentRow, true);
         </code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindow.SetRedrawOn">
            <summary>Enables repainting of the DataWindowControl. 
      </summary><remarks>This method re-enables the redrawing of the DataWindowControl follow a previous invocation of <see cref="M:Sybase.DataWindow.DataWindowControl.SetRedrawOff"/>.  Be sure to call the <see cref="M:System.Windows.Forms.Control.Refresh"/> method after <b>SetRedrawOn</b> to display any pending visual changes.
      </remarks><example>The following C# code toggles the redrawing of the DataWindowControl:
         <code>
         dwCrosstab.SetRedrawOff();
         
         // perform dynamic crosstab manipulation
         
         dwCrosstab.SetRedrawOn();
         dwCrosstab.Refresh();
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetRedrawOn"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindow.SetRedrawOff">
            <summary>Disables repainting of the DataWindowControl. 
      </summary><remarks>This method turns off redrawing temporarily to avoid flicker and reduce redrawing time when you are making several changes to the properties of the DataWindowControl.
      </remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetRedrawOn"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindow.SetRowFocusIndicator(Sybase.DataWindow.RowFocusIndicator)">
            <overloads>Specifies a visual indicator to identify the current row in a DataWindowControl.</overloads><summary>Specifies a stock visual indicator to identify the current row in a DataWindowControl.</summary><param name="FocusIndicator">The <see cref="T:Sybase.DataWindow.RowFocusIndicator"/>.</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>You can specify a hand icon at the left margin of the
			DataWindowControl, a dotted rectangle surrounding the row, or that there be no focus indicator. 
      </remarks>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindow.SetRowFocusIndicator(Sybase.DataWindow.RowFocusIndicator,System.Drawing.Point)">
            <summary>Specifies a stock visual indicator and its position to identify the current row in a DataWindowControl.
      </summary><param name="FocusIndicator">The <see cref="T:Sybase.DataWindow.RowFocusIndicator"/>.</param><param name="Location">The location of <i>FocusIndicator</i> relative to the upper-left corner of the row.</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
If <i>FocusIndicator</i> is Hand, the icon is placed relative 
			to the upper-left corner of the row and shifted according to <i>Location</i>.  The X and Y components of 
			<i>Location</i> must be expressed as Normalized <see cref="T:Sybase.DataWindow.Units"/>, regardless of the setting 
			of the DataWindowControl's <see cref="P:Sybase.DataWindow.IDataWindow.Units"/> property.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindow.SetRowFocusIndicator(System.Drawing.Bitmap)">
            <summary>Specifies a bitmap to identify the current row in a DataWindowControl. 
      </summary><param name="FocusIndicator">The bitmap to be used as the visual indicator.</param><exception cref="T:System.ArgumentNullException">
				<i>FocusIndicator</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<i>FocusIndicator</i> is positioned at the upper-left corner of the row.  
      </remarks>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindow.SetRowFocusIndicator(System.Drawing.Bitmap,System.Drawing.Point)">
            <summary>Specifies a bitmap and it its position to identify the current row in a DataWindowControl. 
      </summary><param name="FocusIndicator">The bitmap to be used as the visual indicator.</param><param name="Location">The location of <i>FocusIndicator</i> relative to the upper-left corner of the row.</param><exception cref="T:System.ArgumentNullException">
				<i>FocusIndicator</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<i>FocusIndicator</i> is placed relative to the upper-left corner of the row and shited according to <i>Location</i>. The X and Y components of 
			<i>Location</i> must be expressed as Normalized <see cref="T:Sybase.DataWindow.Units"/>, regardless of the setting 
			of the DataWindowControl's <see cref="P:Sybase.DataWindow.IDataWindow.Units"/> property.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindow.SetText(System.String)">
            <summary>Replaces the text in the edit control over the current row and column in a DataWindowControl. 
      </summary><param name="TextValue">The string to be placed in the edit control.</param><exception cref="T:System.NotSupportedException">
				<i>SetText</i> was called at an illegal time.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>SetText</b> only sets the value in the edit control. When the user changes focus to another 
         row and column, <i>TextValue</i> is placed in the in the appropriate row and column of the Primary buffer.</para>
				<para>If <i>TextValue</i> is determined to be invalid in the 
         <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> or <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> 
         events, you can call one of the SetItem methods to specify a new value and then invoke <b>SetText</b> to put that 
         same value in the edit control 
         so that the user sees it too.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>
        </member>
        <member name="M:Sybase.DataWindow.IDataWindow.SortDialog">
            <summary>Displays a dialog box in which the user can dynamically create a sort expression for a DataWindowControl.
      </summary><exception cref="T:System.NotSupportedException">
				<b>SortDialog</b> is not supported for a composite DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>
				<para>Call <see cref="M:Sybase.DataWindow.DataWindowControl.Sort"/> after this method to apply the new sort criteria to the DataWindowControl.</para>
				<para>Use <see cref="M:Sybase.DataWindow.DataWindowControl.SetSort(System.String)"/> to set a sort expression programmatically.</para>
			</remarks><example>This statement displays the Specify Sort dialog box for <c>dwEmp</c>:
         <code>dwEmp.SortDialog()</code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetSort(System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.Sort"/>
        </member>
        <member name="P:Sybase.DataWindow.IDataWindow.Icon">
            <summary>Gets or set the icon in the <see cref="P:Sybase.DataWindow.IDataWindow.TitleBar"/> of the DataWindowControl 
      </summary><value>The <see cref="T:System.Drawing.Icon"/> displayed in the DataWindowControl's title bar.</value>
        </member>
        <member name="P:Sybase.DataWindow.IDataWindow.BorderStyle">
            <summary>Gets or sets the border style of the DataWindowControl.</summary><value>The <see cref="T:Sybase.DataWindow.DataWindowBorderStyle"/> of the DataWindowControl.</value>
        </member>
        <member name="P:Sybase.DataWindow.IDataWindow.TitleBar">
            <summary>Gets or sets whether the DataWindowControl has a title bar.</summary><value>
				<c>true</c> if the DataWindowControl has a title bar, <c>false</c> otherwise.</value><remarks>
				<para>A DataWindowControl with a title bar can be moved by the user</para>
				<note>Bcause of underlying restrictions
			in the Windows GDI layer, edit controls within a DataWindowControl with a titlebar do not receive mouse clicks. This makes
			DataWindowControls with title bars unsuitable for data entry purposes.</note>
			</remarks>
        </member>
        <member name="P:Sybase.DataWindow.IDataWindow.ControlBox">
            <summary>Gets or sets whether the DataWindowControl displays a Control box in its title bar.
      </summary><value>
				<c>true</c> if the DataWindowControl has a control box <c>false</c> otherwise.</value><remarks>By design, the Close option in the Control menu box and the Close button are always disabled. 
      </remarks>
        </member>
        <member name="P:Sybase.DataWindow.IDataWindow.MaximizeBox">
            <summary>Gets or sets whether a Maximize box is displayed on the control's title bar.</summary><value>
				<c>true</c> if the DataWindowControl has a Maximize box, <c>false</c> otherwise.</value>
        </member>
        <member name="P:Sybase.DataWindow.IDataWindow.MinimizeBox">
            <summary>Gets or sets whether a Minimize box is displayed on the control's title bar. </summary><value>
				<c>true</c> if the DataWindowControl has a Minimize box, <c>false</c> otherwise.</value>
        </member>
        <member name="P:Sybase.DataWindow.IDataWindow.ScrollBars">
            <summary>Gets or sets whether rows in the DataWindow control should scroll while the user is moving the thumb control in a scroll bar. </summary><value>
				<c>true</c> if the DataWindowControl should scroll, <c>false</c> otherwise.</value>
        </member>
        <member name="P:Sybase.DataWindow.IDataWindow.LiveScroll">
            <summary>Gets or sets whether rows in the DataWindow control should scroll while the user is moving the thumb control in a scroll bar. </summary><value>
				<c>true</c> if the DataWindowControl should scroll, <c>false</c> otherwise.</value>
        </member>
        <member name="P:Sybase.DataWindow.IDataWindow.ObjectUnderMouse">
            <summary>Gets the <see cref="T:Sybase.DataWindow.GraphicObject"/> under the mouse pointer.</summary><value>A <see cref="T:Sybase.DataWindow.GraphicObject"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.IDataWindow.CurrentEdit">
            <summary>Gets the active edit control for the associated DataWindowControl.  
      </summary><value>The current edit control for the DataWindowControl.</value><remarks>If there is no edit control currently active the <see cref="P:Sybase.DataWindow.EditControl.Empty"/> property will be set to <c>true</c> and accessing additional properties of the edit control will result in an exception.
      </remarks>
        </member>
        <member name="P:Sybase.DataWindow.IDataWindow.Units">
            <summary>Gets the unit of measurement under which the DataWindow object was designed.</summary><value>The unit of measurement.</value><remarks>You can use the <see cref="M:Sybase.DataWindow.Utility.PixelsToUnits(System.Int32,Sybase.DataWindow.Axis)"/> or 
		<see cref="M:Sybase.DataWindow.Utility.UnitsToPixels(System.Int32,Sybase.DataWindow.Axis)"/> methods to convert a Pixel measurement to a Normalized value or vice versa.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.IDataWindow.QueryMode">
            <summary>
        Whether or not the DataWindow is in query mode. In query mode, the user can specify the desired data by entering WHERE criteria in one or more columns. After the user specifies retrieval criteria in query mode, subsequent calls to Retrieve use the new criteria.
       </summary><value>A boolean value that is true when the DataWindow is in query mode and false otherwise.</value><remarks>This property can also be set using a DataWindow object property. See the <i>DataWindow Object Reference</i> for more information.	</remarks><example>
		<code>
		dwEmp.QueryMode = true;
		</code>
		</example>
        </member>
        <member name="P:Sybase.DataWindow.IDataWindow.BackgroundColor">
            <summary>Gets or sets the background color of the DataWindow.</summary><value>A value of the System.Drawing.Color structure.</value><example>
		<code>
		dwEmp.BackgroundColor = System.Drawing.Color.Aqua;
		</code>
		</example>
        </member>
        <member name="P:Sybase.DataWindow.IDataWindow.FirstRowOnPage">
            <summary>
        Returns the number of the first row visible on the DataWindow.
       </summary><value>An integer value.</value><remarks>This property can also be evaluated using a DataWindow object property. See the <i>DataWindow Object Reference</i> for more information.	</remarks><example>
		<code>
Dim First As Integer
First = dw_1.FirstRowOnPage
		</code>
		</example>
        </member>
        <member name="P:Sybase.DataWindow.IDataWindow.LastRowOnPage">
            <summary>
        Returns the number of the last row visible on the DataWindow.
       </summary><value>An integer value.</value><remarks>This property can also be evaluated using a DataWindow object property. See the <i>DataWindow Object Reference</i> for more information.	</remarks><example>
		<code>
int first, last;
first = dw_1.FirstRowOnPage;
last = dw_1.LastRowOnPage;
		</code>
		</example>
        </member>
        <member name="E:Sybase.DataWindow.IDataWindow.DataWindowKeyDown">
            <summary>Occurs when a key is pressed in a DataWindowControl's edit control.</summary>
        </member>
        <member name="E:Sybase.DataWindow.IDataWindow.ItemChanged">
            <summary>Occurs when a column has been modified and loses focus.</summary><seealso cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/><seealso cref="E:Sybase.DataWindow.DataWindowControl.ItemFocusChanged"/>
        </member>
        <member name="E:Sybase.DataWindow.IDataWindow.EditChanged">
            <summary>Occurs when a user types in a DataWindowControl's edit control.</summary>
        </member>
        <member name="E:Sybase.DataWindow.IDataWindow.ItemFocusChanged">
            <summary>Occurs when the DataWindowControl's edit control moves to a new column.</summary><remarks>A field can lose focus when the user presses Enter, the Tab key, an arrow key, or clicks the mouse on another field within the <see cref="T:Sybase.DataWindow.DataWindowControl"/>. </remarks>
        </member>
        <member name="E:Sybase.DataWindow.IDataWindow.RowFocusChanged">
            <summary>Occurs when the current row changes.</summary><remarks>
				<para>The <see cref="M:Sybase.DataWindow.DataWindowControl.SetRow(System.Int32)"/> method, as well as user actions,
				can trigger the <b>RowFocusChanged</b> and <see cref="E:Sybase.DataWindow.IDataWindow.ItemFocusChanged"/> events.</para>
				<para>When you use the <see cref="M:Sybase.DataWindow.IDataWindow.ScrollToRow(System.Int32)"/> method to change focus, the <see cref="E:Sybase.DataWindow.IDataWindow.RowFocusChanging"/> event is
         triggered before the scroll occurs, and the <b>RowFocusChanged</b> event is triggered after
         the scroll occurs.</para>
				<para>In a read-only DataWindow, when you click on any column that is not
         in the current row, the <see cref="E:Sybase.DataWindow.IDataWindow.RowFocusChanging"/> and <b>RowFocusChanged</b> events fire, but the current
         column is not changed. The current column remains at 0, since no column can have focus.
         DataWindows are read-only if updates are not allowed, all tab orders are set to 0, or all
         tab columns are protected.</para><para>If focus is on an editable column in a DataWindow, the <see cref="E:Sybase.DataWindow.IDataWindow.RowFocusChanging"/> and <b>RowFocusChanged</b> events
         do not fire when you click on a protected column or on a column whose tab order is 0.
         The focus remains on the current, editable column in the current row.</para>
				<para>If focus moves off an editable column in an updatable DataWindow, the DataWindow switches
         to read-only mode. This can happen when the last row in the DataWindow does not have an
         editable column. In this case, tabbing off the last editable column causes the row focus
         to move to the row following the row with the last editable column. The DataWindow then
         remains in read-only mode until focus is given to an editable column.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanging"/>
        </member>
        <member name="E:Sybase.DataWindow.IDataWindow.RowFocusChanging">
            <summary>Occurs when the current row is about the change.</summary><remarks>
			<para>You can cancel this event, and the subsequent <see cref="E:Sybase.DataWindow.IDataWindow.RowFocusChanged"/> event by setting the <see cref="P:Sybase.DataWindow.RowFocusChangingEventArgs.Cancel"/>
			property of the associated <see cref="T:Sybase.DataWindow.RowFocusChangingEventArgs"/> object to <c>true</c>.</para>
				<para>Typically the <b>RowFocusChanging</b> event is coded to respond to a mouse click or keyboard
         action that would change the current row in the DataWindow object. The following methods can also
         trigger the <b>RowFocusChanging event</b>, as well as the <see cref="E:Sybase.DataWindow.IDataWindow.RowFocusChanged"/> and <see cref="E:Sybase.DataWindow.IDataWindow.ItemFocusChanged"/> events,
         when the action changes the current row:
         <list type="bullet">
         <item><see cref="M:Sybase.DataWindow.DataWindowControl.SetRow(System.Int32)"/></item>
         <item><see cref="M:Sybase.DataWindow.DataWindowControl.Retrieve(System.Data.DataTable)"/></item>
         <item><see cref="M:Sybase.DataWindow.DataWindowControl.DeleteRow(System.Int32)"/></item>
         <item><see cref="M:Sybase.DataWindow.DataWindowControl.RowsCopy(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)"/></item>
         <item><see cref="M:Sybase.DataWindow.DataWindowControl.RowsMove(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)"/></item>
         <item><see cref="M:Sybase.DataWindow.DataWindowControl.RowsDiscard(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer)"/></item>
      	  </list>
 	 In these cases, the <b>RowFocusChanging</b> event code can prevent the changing of the
         DataWindow object's current row only. The code cannot prevent the data from being changed
         (for example, the rows still get moved). </para>
				<para>When you use the <see cref="M:Sybase.DataWindow.IDataWindow.ScrollToRow(System.Int32)"/> method to change focus, the <b>RowFocusChanging</b> event is
         triggered before the scroll occurs, and the <see cref="E:Sybase.DataWindow.IDataWindow.RowFocusChanged"/> event is triggered after
         the scroll occurs.</para>
				<para>In a read-only DataWindow, when you click on any column that is not
         in the current row, the <b>RowFocusChanging</b> and <see cref="E:Sybase.DataWindow.IDataWindow.RowFocusChanged"/> events fire, but the current
         column is not changed. The current column remains at 0, since no column can have focus.
         DataWindows are read-only if updates are not allowed, all tab orders are set to 0, or all
         tab columns are protected.</para><para>If focus is on an editable column in a DataWindow, the <b>RowFocusChanging</b> and <see cref="E:Sybase.DataWindow.IDataWindow.RowFocusChanged"/>
         events do not fire when you click on a protected column or on a column whose tab order is 0.
         The focus remains on the current, editable column in the current row.</para>
				<para>If focus moves off an editable column in an updatable DataWindow, the DataWindow switches
         to read-only mode. This can happen when the last row in the DataWindow does not have an
         editable column. In this case, tabbing off the last editable column causes the row focus
         to move to the row following the row with the last editable column. The DataWindow then
         remains in read-only mode until focus is given to an editable column.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanged"/>
        </member>
        <member name="E:Sybase.DataWindow.IDataWindow.ScrollHorizontal">
            <summary>Occurs when the user scrolls right or left with the tab or arrow keys or the scroll bar.</summary><seealso cref="E:Sybase.DataWindow.IDataWindow.ScrollVertical"/>
        </member>
        <member name="E:Sybase.DataWindow.IDataWindow.ScrollVertical">
            <summary>Occurs when the user scrolls up or down with the tab or arrow keys or the scroll bar.</summary><seealso cref="E:Sybase.DataWindow.IDataWindow.ScrollHorizontal"/>
        </member>
        <member name="E:Sybase.DataWindow.IDataWindow.DropDown">
            <summary>Occurs just before the list provided by a DropDownDataWindow is displayed.</summary>
        </member>
        <member name="E:Sybase.DataWindow.IDataWindow.ButtonClicking">
            <summary>Occurs when a user clicks a button inside a DataWindowControl.</summary><remarks><para><b>ButtonClicking</b> fires immediately before the <see cref="E:Sybase.DataWindow.DataWindowControl.ButtonClicked"/> event.</para>
			<para>You can cancel the action by setting the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property of the associate <see cref="T:System.ComponentModel.CancelEventArgs"/> object to <c>true</c>.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.ButtonClicked"/>
        </member>
        <member name="E:Sybase.DataWindow.IDataWindow.ButtonClicked">
            <summary>Occurs when a user clicks a button inside a DataWindowControl.</summary><remarks><para><b>ButtonClicked</b> fires immediately after the <see cref="E:Sybase.DataWindow.DataWindowControl.ButtonClicking"/> event as long as that even has not been cancelled.</para></remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.ButtonClicking"/>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowControl.PrimaryData">
            <summary>
            Data rows that are displayed in the DataWindow.
            </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowControl.FilteredData">
            <summary>
            Data rows that have been filtered out of the PrimaryData.
            </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowControl.DeletedData">
            <summary>
            Data rows that have been deleted.
            </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowControl.SelectedData">
            <summary>
            Data rows that have been selected (highlighted).
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.#ctor">
            <overloads>Initializes a new instance of the <b>DataWindowControl</b> class.</overloads><summary>Initializes a new instance of the <b>DataWindowControl</b> class.</summary><exception cref="T:Sybase.DataWindow.DataWindowServerLoadFailedException">DataWindow .NET could not be loaded.  This may indicate a configuration or installation issue involving PBDWN110.dll.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.#ctor(System.String,System.String)">
            <overloads>Initializes a new instance of the <b>DataWindowControl</b> class.</overloads><summary>Initializes a new instance of the <b>DataWindowControl</b> class.</summary><exception cref="T:Sybase.DataWindow.DataWindowServerLoadFailedException">DataWindow .NET could not be loaded.  This may indicate a configuration or installation issue involving PBDWN110.dll.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.AcceptText">
            <summary>Applies the contents of the DataWindowControl's edit control to the current item in the Primary buffer.</summary><returns>
				<c>true</c> if the edit control's contents pass validation, otherwise <c>false</c>.</returns><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>
				<para>The data in the edit control must pass the validation rule for the 
         column before it can be stored in the item.</para>
				<para>When a user moves from item to item in a DataWindowControl, the control validates and accepts 
         data the user has edited. When a user modifies an item and immediately changes focus to 
         another control on the form, the DataWindowControl does not accept the modified data - the data 
         remains in the edit control. 
         Use <b>AcceptText</b> in this situation to ensure that the user's data is moved from the edit control to the DataWindowControl's Primary buffer.</para>
			</remarks><example>This code in the form's Closing event cancels the close if the changes have not been accepted.<code>
         [Visual Basic]
         Private Sub Form1_Closing(ByVal sender As Object, ByVal e As System.ComponentModel.CancelEventArgs) 
            ' accept any newly entered data
            If (Not dwEmployee.AcceptText()) Then
               e.Cancel = true
         
            // do not allow close if pending changes
            Else If (dwEmployee.ModifiedCount &gt; 0) Then
               MessageBox.Show("You must either save or cancel pending changes before exiting this application.", _
                 "Cannot Exit Application", MessageBoxButtons.OK, MessageBoxIcon.Exclamation)
               e.Cancel = true
            End If
         End Sub
         
         [C#]
         private void Form1_Closing(object sender, System.ComponentModel.CancelEventArgs e)
         {
            // accept any newly entered data
            if (!dwEmployee.AcceptText())
               e.Cancel = true;
         
            // don't allow close if pending changes
            else if (dwEmployee.ModifiedCount &gt; 0) 
            {
               MessageBox.Show("You must either save or cancel pending changes before exiting this application.", 
                  "Cannot Exit Application", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
               e.Cancel = true;
            }
         }
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.BindAdoDataTable(System.Data.DataTable)">
            <summary>Binds the DataTable data to the DataWindow and copies DataTable data to the DataWindow.
			</summary><remarks>The BindAdoDataTable method does not support the Crosstab presentation style.
			</remarks><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.BindDataView(System.Data.DataView)">
            <summary>
			Binds the DataView data to the DataWindow object and copies the data from the DataView to the DataWindow.
			</summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.Collapse(System.Int32,System.Int32)">
            <summary>
			Collapse a group which has the specified group level and includes the specified row.
			</summary><param name="rowNumber">
			The number of the row that belongs to the group that will be collapsed.
			</param><param name="groupLevel">
			The level of the group that will be collapsed.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.CollapseAll">
            <summary>
			Collapses all groups.
			</summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.CollapseAllChildren(System.Int32,System.Int32)">
            <summary>
			Collapse a group and all child groups beneath it.
			</summary><param name="rowNumber">
			The number of the row that belongs to the group that will be collapsed.
			</param><param name="groupLevel">
			The level of the group that will be collapsed.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.CollapseLevel(System.Int32)">
            <summary>
			Collapse all groups within the specified group level.
			</summary><param name="level">
			The level of the groups that will be collapsed.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.Create(System.String)">
            <summary>Dynamically creates and assigns a DataWindow object to a DataWindowControl or DataStore. 
      </summary><param name="Syntax">A string containing the DataWindow source code for the DataWindow object.</param><exception cref="T:System.ArgumentNullException">
				<i>Syntax</i> is null. </exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>Use the <see cref="M:Sybase.DataWindow.DataWindowSyntaxGenerator.DataWindowSyntaxFromSql(Sybase.DataWindow.Transaction,System.String)"/> to create the
         DataWindow syntax based on a SQL statement. You can also use the 
         syntax of an existing DataWindow object as a template. To obtain the syntax, use the Export item on the BindAdoDataTable is not supported for crosstab DataWindows.</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.CrosstabDialog">
            <summary>Displays the Crosstab Definition dialog box so the user can modify the definition of a 
         crosstab DataWindow at runtime. 
      </summary><exception cref="T:System.NotSupportedException">The assigned DataWindow object is not a Crosstab. </exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>You must connect to a database and set the DataWindowControl's transaction object before calling this method.</remarks><example>This statement in the code for a command button's Clicked event displays the CrossTab Definition dialog box so that the user can modify the definition of the crosstab DataWindow object in <c>dwCust</c>:
         <code>
         [Visual Basic]
         dwCust.CrosstabDialog()
         
         [C#]
         dwCust.CrosstabDialog();
         </code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.DbCancel">
            <summary>Cancels the retrieval in process. 
      </summary><exception cref="T:System.InvalidOperationException">The object is not connected to a database. </exception><exception cref="T:System.NotSupportedException">The object is a DataWindowChild that is a DropDownDataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<!-- You can let users cancel a retrieval in progress by setting the Async database parameter to 1 before beginning a retrieve.-->
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.Retrieve(System.Data.DataTable)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.DeleteRow(System.Int32)">
            <summary>Deletes a row from the DataWindow. 
      </summary><param name="RowNumber">The number of the row to be deleted. If 0, the current row will be deleted.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not valid.</exception><exception cref="T:System.NotSupportedException">The assigned DataWindow object is a Crosstab.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The designated row is removed from the DataWindow's Primary buffer. If the DataWindow is not updatable, 
         all storage associated with the row is cleared. If the DataWindow is updatable, <b>DeleteRow</b> moves the row to 
         the DataWindow's Delete buffer. The row is not deleted from the database table until the application calls the <see cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/> method. After 
         the <see cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/> method has updated the database and the status flags are reset, the storage associated 
         with the row is cleared.</para>
			</remarks><example>This example shows the code for a button that deletes the last row from <c>dwItems</c>:
         <code>      
         [Visual Basic]
         Private Sub cb_delitem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cb_delitem.Click
            dwItems.DeleteRow(dwItems.RowCount)
         End Sub
         
         [C#]
         private void cb_delitem_Click(object sender, System.EventArgs e)
         {
            dwItems.DeleteRow(dwItems.RowCount);
         }
         </code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.Describe(System.String)">
            <summary>Reports the values of properties of a DataWindow object and the controls within it. 
      </summary><returns>A string that includes a value for each property.</returns><param name="Syntax">A string whose value is a blank-separated list of properties.</param><exception cref="T:System.ArgumentNullException">
				<i>Syntax</i> is null.</exception><exception cref="T:System.ArgumentException">
				<i>Syntax</i> contains an invalid property.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>
				<para>Use <b>Describe</b> to understand the structure of a DataWindow object. For example, you can find which 
         bands the DataWindow uses and the datatypes of its columns.</para>
				<para>
					<b>Describe</b> differs from <see cref="M:Sybase.DataWindow.DataWindowControl.GetProperty(System.String)"/> in that it allows you go retrieve multiple properties in one invocation.</para>
			</remarks><example>This Visual Basic example changes a crosstab DataWindow to have a more formatted appearance: 
         <code>
         Private Sub ChangeCrossTab()
         
            'This function will dynamically change a crosstab to have a
            'more formatted appearance.
         
            Dim ColumnCount As Integer
            Dim Counter As Integer
            Dim CurrentIndex, NextIndex As Integer
         
            Dim Split, DWBand, ObjectType As String
            Dim DWObjects, DWObject, ModString As String
            Dim Temp As String
            Dim ColName As String
         
            Try
               ' returns a list of all of the DWObjects on the datawindow
               DWObjects = dwCust.Describe("datawindow.objects")
         
               CurrentIndex = 0
               NextIndex = DWObjects.IndexOf("\t")
         
               Do Until NextIndex = -1
                  DWObject = Mid(DWObjects, CurrentIndex, NextIndex - CurrentIndex)
         
                  'center text in the heading
                  DWBand = dwCust.Describe(DWObject + ".Band")
                  If DWBand.ToLower().Substring(0, 5).Equals("header") Then
                     ModString = ModString + DWObject + ".Alignment=2 " + DWObject + ".Font.Weight=700 "
                  End If
         
                  'format detail and total columns differently
                  ObjectType = dwCust.Describe(DWObject + ".Type")
                  If ObjectType.ToLower().Equals("compute") Then
                     Temp = dwCust.Describe(DWObject + ".Expression")
                     If Temp.IndexOf("sum") &gt; 0 Then
                        ModString = ModString + DWObject + ".Format='$#,##0' "
                     ElseIf Temp.IndexOf("count") &gt; 0 Then
                        ModString = ModString + DWObject + ".Format='#,##0' "
                     End If
                  ElseIf ObjectType.ToLower().Equals("column") Then
                     Temp = dwCust.Describe(DWObject + ".Coltype")
                     If Temp.IndexOf("dec") &gt; 0 Then
                        ModString = ModString + DWObject + ".Format='$#,##0.00' "
                     ElseIf Temp.IndexOf("num") &gt; 0 Then
                        ModString = ModString + DWObject + ".Format='#,##0.00' "
                     End If
                  End If
         
                  'loop through all the DWObjects on the datawindow
                  CurrentIndex = NextIndex + 1
                  NextIndex = DWObjects.IndexOf("\t", CurrentIndex)
               Loop
         
               dwCust.Modify(ModString)
         
            Catch ex As Exception
               ErrorHandler.HandleException(ex)
            End Try
         End Sub
         </code>
			</example><example>This line of code returns a string that lists all the controls in the DataWindow object contained in DW1:
         <code>str = DW1.Describe("datawindow.objects")</code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetProperty(System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.Modify(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.Expand(System.Int32,System.Int32)">
            <summary>
			Expand a group which has the specified group level and includes the specified row.
			</summary><param name="rowNumber">
			The number of the row that belongs to the group that will be expanded.
			</param><param name="groupLevel">
			The level of the group that will be expanded.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.ExpandAll">
            <summary>
			Expands all groups.
			</summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.ExpandAllChildren(System.Int32,System.Int32)">
            <summary>
			Expand a group and all child groups beneath it.
			</summary><param name="rowNumber">
			The number of the row that belongs to the group that will be expanded.
			</param><param name="groupLevel">
			The level of the group that will be expanded.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.ExpandLevel(System.Int32)">
            <summary>
			Expand all groups within the specified group level.
			</summary><param name="level">
			The level of the groups that will be expanded.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.Filter">
            <summary>Moves rows that do not match the current filter expression from the Primary buffer to the Filter buffer. 
      </summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>When the <see cref="M:Sybase.DataWindow.DataWindowControl.Retrieve(System.Data.DataTable)"/> method retrieves rows
         into the DataWindow, it automatically uses the current filter (which may be part of the definition of the DataWindow object). You only need to call this method after changing 
         the filter expression with <see cref="M:Sybase.DataWindow.DataWindowControl.SetFilter(System.String)"/> or <see cref="M:Sybase.DataWindow.DataWindowControl.FilterDialog"/> or if the data has changed because of processing or user input.</para>
				<para>When you filter a DataWindow with groups, you should call <see cref="M:Sybase.DataWindow.DataWindowControl.CalculateGroups"/> after calling <b>Filter</b>.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetFilter(System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.FilterDialog"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.FilterDialog">
            <summary>Displays a dialog box in which the user can dynamically create a filter expression for a DataWindowControl.</summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>
				<para>Call <see cref="M:Sybase.DataWindow.DataWindowControl.Filter"/> after this method to apply the new filter expression to the DataWindowControl.</para>
				<para>Use <see cref="M:Sybase.DataWindow.DataWindowControl.SetFilter(System.String)"/> to set a filter expression programmatically.</para>
			</remarks><example>This statement displays the Specify Filter dialog box for <c>dwEmp</c>:
         <code>dwEmp.FilterDialog()</code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetFilter(System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.Filter"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.FindRow(System.String,System.Int32,System.Int32)">
            <summary>Finds the next row in a DataWindow which meets the specified condition. 
      </summary><returns>The number of the first row between <i>BeginRow</i> and <i>EndRow</i> that meets the search criteria, or 0 if there are no such rows.
         </returns><param name="Expression">A string whose value is a boolean expression to be used as the 
         search criteria.</param><param name="BeginRow">The row number at which to begin the search.</param><param name="EndRow">The row number at which to end the search.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>BeginRow</i> or <i>EndRow</i> is less than zero.</exception><exception cref="T:Sybase.DataWindow.InvalidExpressionException">
				<i>Expression</i> is not valid DataWindow expression syntax.</exception><exception cref="T:System.ArgumentNullException">
				<i>Expression</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The search is case sensitive.</para>
				<para>To search backwards, make <i>EndRow</i> less than <i>BeginRow</i>. Beware of creating an endless loop, which can occur if you are searching for all occurrences within a DataWindow and the last 
         row satisfies the search criteria. To solve this problem, you can make <i>EndRow</i> 1 greater than the number of rows, or exit the search loop when the current 
         row (<i>BeginRow</i> for that iteration of the loop) is greater than the row count.</para>
				<para>If the 
         text you want to find includes quotes, you must treat the nested quote as doubly nested; therefore, you cannot simply alternate double and 
         single quotes, as you can in most strings. For example, to find the name O'Neil, <i>Expression</i> can be:
         <c>"O~~~'Neil"</c> (3 tildes and single quote) or <c>"O~~~~~"Neil"</c> (5 tildes and double quote) but not <c>"O'Neil"</c> or 
         <c>"O~"Neil"</c>.</para>
			</remarks><example>This example finds the first row where the employee salary is greater than 50,000:
         <code>RowNumber = dwStatus.FindRow("emp_salary &gt; 50000", 1, dwStatus.RowCount)</code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.FindGroupChange(System.Int32,System.Int16)">
            <summary>Searches for the next break (change in value) within the specified group. 
      </summary><returns>The row number beginning the next grouping within the level specified by <i>GroupLevel</i>, or 0 if no such row.
         </returns><param name="RowNumber">The row number at which you want to begin searching for the next group break.</param><param name="GroupLevel">The level of the group in which you are searching for the next break. </param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:System.ArgumentOutOfRangeException">
				<i>GroupLevel</i> is less than 0.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>If <i>RowNumber</i> begins a new grouping at <i>GroupLevel</i>, then that row is the one returned. 
         To continue searching for subsequent breaks, increment the starting row so that the search resumes with 
         the next row in the group. 
      </remarks><example>This statement searches for the first break in group 2 within <c>dwRegions</c> that occurs at or after row 5:
         <code>RowNumOfNextBreak = dwRegions.FindGroupChange(5, 2)</code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Reports the next row and column that is both required and currently contains a null value. 
      </summary><param name="RowNumber">The first row to be searched. Upon return <i>RowNumber</i> also 
         stores the number of the found row.</param><param name="ColumnNumber">The number of the first column to be searched. Upon return <i>ColumnNumber</i>
         also stores the number of the found column.</param><param name="Buffer">The DataWindow buffer you want to search 
         for required columns. Valid buffers are Primary and Filter.</param><param name="UpdateOnly">A boolean value specifying whether all rows and columns should be searched or only
         rows that have been modified.</param><exception cref="T:System.ArgumentOutOfRangeException">
				<i>Buffer</i> specified the Delete buffer.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>For <b>FindNextRequiredColumn</b> to report an empty required column, the column's value must actually be null, 
         not an empty string. To make a column required, set the <c>Edit.Required</c> property for the DataWindow object to <c>true</c> in 
         code or check the Required check box for the column in the Edit page in the Properties view in DataWindow Designer.</para>
				<para>Additionally, when the user modifies a row and leaves a column empty, the new value is an empty string, unless the 
         column's edit style has the Empty String Is Null check box checked; therefore, <b>FindNextRequiredColumn</b> does not report empty required 
         columns in modified rows unless this property is set.</para>
				<para>New rows have null values in their columns, unless the columns have default values. If <i>UpdateOnly</i> is <c>false</c>, 
         <b>FindNextRequiredColumn</b> reports null required columns in new rows. If <i>UpdateOnly</i> is <c>true</c>, null columns in new rows are 
         reported only if one or more of the columns within that row contains data.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetChanges">
            <summary>Retrieves changes made to a DataWindowControl or DataStore in a format suitable for serialization in .NET remoting applications. 
      </summary><returns>A serializable object containing the changes.</returns><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>GetChanges</b> is used in conjunction with <see cref="M:Sybase.DataWindow.DataWindowControl.SetChanges(Sybase.DataWindow.DataWindowChanges)"/> to synchronize multiple DataWindowControls or 
         DataStores. <b>GetChanges</b> retrieves the data buffers and status flags for modified rows, and <see cref="M:Sybase.DataWindow.DataWindowControl.SetChanges(Sybase.DataWindow.DataWindowChanges)"/>
         applies the changes to another DataWindowControl or DataStore.</para>
				<!-- Need good remoting example here -->
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetChanges(Sybase.DataWindow.DataWindowChanges)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetFullState"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl._GetChanges(Sybase.DataWindow.DataWindowChanges@,System.Int32@)">
            <summary>
            This method is designed for DataWindow .NET internal usage only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetChild(System.String)">
            <summary>Provides a reference to a DropDownDataWindow or to a report in a composite DataWindow. 
      </summary><returns>A DataWindowChild object.</returns><param name="ChildName">The name of a column with a DropDownDataWindow edit style or of a report in a composite DataWindow.</param><exception cref="T:Sybase.DataWindow.ChildNotFoundException">
				<i>ChildName</i> is not a DropDownDataWindow column or a report.</exception><exception cref="T:System.ArgumentNullException">
				<i>ChildName</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>A report is a read-only DataWindow 
         that is part of a composite DataWindow object. When you define a composite 
         DataWindow in DataWindow Designer, each report is given a name. You can see the name in the Name 
         option of the Properties view. You must use the report name (not the name of the DataWindow object 
         in which the report has been placed) when calling <b>GetChild</b>.</para>
				<para>Use <b>GetChild</b> when you need to explicitly retrieve data for a DropDownDataWindow or a report. Although 
         the DataWindow server automatically retrieves data for the DropDownDataWindow or report when the main DataWindow 
         is displayed, you need to explicitly retrieve data when there are retrieval arguments or when 
         conditions change and you want to retrieve new rows.</para>
				<para>You cannot use <b>GetChild</b> to get a reference to a report in a composite DataWindow when the report 
         itself is a composite or nested DataWindow.</para>
				<para>Changing certain property values using the <see cref="M:Sybase.DataWindow.DataWindowControl.Modify(System.String)"/> or <see cref="M:Sybase.DataWindow.DataWindowControl.SetProperty(System.String,System.String)"/> methods can cause the 
				reference returned by <b>GetChild</b> to 
         become invalid. Best practices dictate calling <b>GetChild</b> again after such changes.</para>
			</remarks><example>In a composite DataWindow there are two reports: orders and current inventory. The orders report 
         has a retrieval argument for selecting the order status. This report will display open orders. The composite 
         DataWindow is displayed in a DataWindow control called <c>dwNews</c>, and the reports are named <c>orders</c> and 
         <c>current_inv</c>. The following code in the Load event of the form that contains <c>dwNews</c> provides a retrieval 
         argument for <c>orders</c>.<code>
         Dim dwcOrders as Sybase.DataWindow.DataWindowChild
         Try
            dwcOrders = dwNews.GetChild("orders")
            dwcOrders.SetTransaction(myTrans)
            dwcOrders.Retrieve("open")
         Catch NoSuchChild As Sybase.DataWindow.ChildNotFoundException
            ' handle condition where order is not a valid child DataWindow
         Catch DbException As Sybase.DataWindow.DbErrorException
            ' handle database retrieval error
         End Try
         </code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetColumnNumber">
            <summary>Obtains the number of the current column.</summary><returns>Returns the number of the current column, or 0 if no column is current.</returns><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>A column becomes the current column after the user tabs to it or clicks it or if 
         the <see cref="M:Sybase.DataWindow.DataWindowControl.SetColumn(System.Int16)"/> method is called on the column. A column cannot be current if it cannot be edited (if it 
         has a <see cref="P:Sybase.DataWindow.GraphicObjectEditableColumn.TabOrder"/> value of 0). A DataWindowControl always has a current column, 
         even when the control is not active, as long as there is at least one editable column. 
      </remarks><example>This statement returns the number of the current column in <c>dwEmp</c>:
         <code>currentColNum = dwEmp.GetColumn()</code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetColumnName"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetColumnName">
            <summary>Obtains the name of the current column.</summary><returns>Returns the name of the current column, or the empty string ("") if no 
         column is current.</returns><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>A column becomes the current column after the user tabs to it or clicks it or if 
         the <see cref="M:Sybase.DataWindow.DataWindowControl.SetColumn(System.Int16)"/> method is called on the column. A column cannot be current if it cannot be edited (if it 
         has a <see cref="P:Sybase.DataWindow.GraphicObjectEditableColumn.TabOrder"/> value of 0). A DataWindowControl always has a current column, 
         even when the control is not active, as long as there is at least one editable column. 
      </remarks><example>This statement returns the name of the current column in <c>dwEmp</c>:
         <code>currentColName = dwEmp.GetColumnName()</code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetColumnNumber"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetColumnObjectByNumber(System.Int16)">
            <summary>Returns a column within the DataWindow.</summary><returns>An instance of the <see cref="T:Sybase.DataWindow.GraphicObjectColumn"/> class representing the column.</returns><param name="ColumnNumber">The number of the column to be returned.</param><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is not valid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<see cref="T:Sybase.DataWindow.GraphicObjectColumn"/> is an abstract class, and the actual value returned will be:</para>
				<list type="bullet">
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectBlobColumn"/> for an OLE-Blob column,</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectComputedColumn"/> for a computed column, or</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectEditableColumn"/> for a database column.</item>
				</list>
				<para>After narrowing the returned object to one of these classes, you can access some of the more common properties of the object such as format, border style, X and Y coordinates, and colors.
				Additionally, you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.Modify(System.String)"/> or <see cref="M:Sybase.DataWindow.DataWindowControl.SetProperty(System.String,System.String)"/> methods to modify properties that are not exposed by the <see cref="T:Sybase.DataWindow.GraphicObject"/> classes.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowControl.GetObjectByName(System.String)"/> method to get any control on a DataWindow, including a column,
				 when you know the name of that control.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetObjectByName(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetColumnValidation(System.String)">
            <summary>Obtains the validation rule for a DataWindow column given the column name.
      </summary><returns>The validation rule for the column, or an empty string ("")
         if no validation rule is defined for the column.</returns><param name="ColumnName">The name of the column for which you want the validation rule.</param><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>You can use <b>GetColumnValidation</b> to save the current validation rule before calling <see cref="M:Sybase.DataWindow.DataWindowControl.SetColumnValidation(System.Int16,System.String)"/> to change 
         the rule temporarily.
      </remarks><example>These statements save the validation rule for the <c>salary</c> column in the DataWindowControl <c>dwEmp</c> in 
         the string <c>Rule1</c> and set the new validation rule to the string <c>Rule2</c>:
         <code>
         Dim Rule1 as String
         Dim Rule2 as String
         ' ...
         Rule1 = dwEmp.GetColumnValidation("salary")
         dwEmp.SetColumnValidation("salary", Rule2)
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetColumnValidation(System.Int16,System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetColumnValidation(System.Int16)">
            <overloads>Obtains the validation rule for a DataWindow column.</overloads><summary>Obtains the validation rule for a DataWindow column given the column number.
      </summary><returns>The validation rule for the column, or an empty string ("")
         if no validation rule is defined for the column.</returns><param name="ColumnNumber">The column number for which you want the validation rule.</param><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>You can use <b>GetColumnValidation</b> to save the current validation rule before calling <see cref="M:Sybase.DataWindow.DataWindowControl.SetColumnValidation(System.Int16,System.String)"/> to change 
         the rule temporarily.
      </remarks><example>These statements save the validation rule for column 7 in the DataWindowControl <c>dwEmp</c> in 
         the string <c>Rule1</c> and set the new validation rule to the string <c>Rule2</c>:
         <code>
         Dim Rule1 as String
         Dim Rule2 as String
         ' ...
         Rule1 = dwEmp.GetColumnValidation(7)
         dwEmp.SetColumnValidation(7, Rule2)
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetColumnValidation(System.Int16,System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetFullState">
            <summary>Retrieves the contents of a DataWindowControl or DataStore in a format suitable for serialization in .NET remoting applications. 
       
      </summary><returns>A serializable object representing the contents and format of the DataWindow.</returns><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>GetFullState</b> retrieves the entire state of a DataWindowControl or DataStore, including the DataWindow 
         object specification, the data buffers, and the status flags. When you call <see cref="M:Sybase.DataWindow.DataWindowControl.SetFullState(Sybase.DataWindow.DataWindowFullState)"/> to apply the 
         DataWindowFullState object created by <b>GetFullState</b> to another DataWindowControl (or DataStore), the target DataWindowControl
         (or DataStore) has enough information to 
         recreate the source DataWindow.  If the target already has a DataWindow object assigned, it will be overwritten.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetFullState(Sybase.DataWindow.DataWindowFullState)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetChanges"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl._GetFullState(Sybase.DataWindow.DataWindowFullState@,System.Int32@)">
            <summary>
            This method is designed for DataWindow .NET internal usage only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemDate(System.Int32,System.Int16)">
            <overloads>Gets a Date value from a DataWindow column.</overloads><summary>Gets the current Date value from a DataWindow column within a row of the Primary buffer given the column number.</summary><returns>The Date value located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.DateTime.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Date value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Date value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDate(RowNumber, ColumnNumber, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDate</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Date value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDate(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemDate(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a Date value from a DataWindow column given the column number.</summary><returns>The original or current Date value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.DateTime.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Date value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Date value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDate</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Date value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDate(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemDate(System.Int32,System.String)">
            <summary>Gets the current Date value from a DataWindow column within a row of the Primary buffer given the column name.</summary><returns>The Date value located at <i>RowNumber</i> and <i>ColumnName</i> as a System.DateTime.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Date value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Date value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDate(RowNumber, ColumnName, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDate</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Date value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDate(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemDate(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a Date value from a DataWindow column given the column name.</summary><returns>The original or current Date value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.DateTime.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Date value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Date value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDate</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Date value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDate(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemDateTime(System.Int32,System.Int16)">
            <overloads>Gets a DateTime value from a DataWindow column.</overloads><summary>Gets the current DateTime value from a DataWindow column within a row of the Primary buffer given the column number. 
      </summary><returns>The DateTime located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.DateTime.
				<note>The DataWindow DateTime datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemDateTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The DateTime value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a DateTime value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDateTime(RowNumber, ColumnNumber, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDateTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the DateTime value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDate(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a DateTime value from a DataWindow column given the column number.
      </summary><returns>The DateTime located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.DateTime.
				<note>The DataWindow DateTime datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemDateTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The DateTime value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a DateTime value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDateTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the DateTime value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDate(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemDateTime(System.Int32,System.String)">
            <summary>Gets the current DateTime value from a DataWindow column within a row of the Primary buffer given the column name.
      </summary><returns>The DateTime located at <i>RowNumber</i> and <i>ColumnName</i> as a System.DateTime.
				<note>The DataWindow DateTime datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemDateTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The DateTime value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a DateTime value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDateTime(RowNumber, ColumnName, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDateTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the DateTeime value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDate(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a DateTime value from a DataWindow column given the column name.</summary><returns>The DateTime located at <i>RowNumber</i> and <i>ColumnName</i> as a System.DateTime.
				<note>The DataWindow DateTime datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemDateTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The DateTime value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a DateTime value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDateTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the DateTime value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDate(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <overloads>Gets a Date, Time, or DateTime value from a DataWindow column.</overloads><summary>Gets a Date, Time, or DateTime value from a DataWindow column given the column number.</summary><returns>The Date, Time, or DateTime value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlDateTime. 				<note>The DataWindow DateTime datatype stores fractional seconds to microsecond precision; the .NET System.Data.SqlTypes.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemSqlDateTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Date, Time, or DateTime value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>When the DataWindow column has a Date type, the resulting SqlDateTime variable will contain 00:00:00 as its time element.  When the DataWindow column has a Time type, the resulting SqlDateTime variable will contain the current date as its date element.</para>
				<para>In contrast to <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemDateTime(System.Int32,System.Int16)"/>, <b>GetItemSqlDateTime</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlDateTime.IsNull"/> property of the returned SqlDateTime structure.</para>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDate(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <overloads/><summary>Gets a Date, Time, or DateTime value from a DataWindow column given the column name.</summary><returns>The Date, Time, or DateTime value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlDateTime. 				<note>The DataWindow DateTime datatype stores fractional seconds to microsecond precision; the .NET System.Data.SqlTypes.SqlDateTime datatype stores only to millisecond precision. As a result, <b>GetItemSqlDateTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Date, Time, or DateTime value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>When the DataWindow column has a Date type, the resulting SqlDateTime variable will contain 00:00:00 as its time element.  When the DataWindow column has a Time type, the resulting SqlDateTime variable will contain the current date as its date element.</para>
				<para>In contrast to <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemDateTime(System.Int32,System.Int16)"/>, <b>GetItemSqlDateTime</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlDateTime.IsNull"/> property of the returned SqlDateTime structure.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDate(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemDecimal(System.Int32,System.Int16)">
            <overloads>Gets a Decimal value from a DataWindow column.</overloads><summary>Gets the current Decimal value from a DataWindow column within a row of the Primary buffer given the column number.       </summary><returns>The Decimal value located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.Decimal.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Decimal value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Decimal value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDecimal(RowNumber, ColumnNumber, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDecimal</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Decimal value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDecimal(System.Int32,System.Int16,System.Decimal)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemDecimal(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a Decimal value from a DataWindow column given the column number.      </summary><returns>The original or current Decimal value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.Decimal.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Decimal value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Decimal value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDecimal</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Decimal value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDecimal(System.Int32,System.Int16,System.Decimal)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemDecimal(System.Int32,System.String)">
            <summary>Gets the current Decimal value from a DataWindow column within a row of the Primary buffer given the column name.      </summary><returns>The Decimal value located at <i>RowNumber</i> and <i>ColumnName</i> as a System.Decimal.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Decimal value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Decimal value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDecimal(RowNumber, ColumnName, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDecimal</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Decimal value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDecimal(System.Int32,System.Int16,System.Decimal)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a Decimal value from a DataWindow column given the column name.      </summary><returns>The original or current Decimal value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.Decimal.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Decimal value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Decimal value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDecimal</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Decimal value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDecimal(System.Int32,System.Int16,System.Decimal)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <overloads/><summary>Gets a Decimal value from a DataWindow column given the column name.</summary><returns>The Decimal value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlDecimal.		</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Decimal value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In contrast to <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemDecimal(System.Int32,System.Int16)"/>, <b>GetItemSqlDecimal</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlDecimal.IsNull"/> property of the returned SqlDecimal structure.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDecimal(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDecimal(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <overloads>Gets a Decimal value from a DataWindow column.</overloads><summary>Gets a Decimal value from a DataWindow column given the column number.</summary><returns>The Decimal value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlDecimal.			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Decimal value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In contrast to <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemDecimal(System.Int32,System.Int16)"/>, <b>GetItemSqlDecimal</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlDecimal.IsNull"/> property of the returned SqlDecimal structure.</para>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDecimal(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemDouble(System.Int32,System.Int16)">
            <overloads>Gets an integer or floating point value from a DataWindow column.</overloads><summary>Gets the current integer or floating point value from a DataWindow column within a row of the Primary buffer given the column number. </summary><returns>The value located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.Double.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain an integer or floating point value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDouble(RowNumber, ColumnNumber, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDouble</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDouble(System.Int32,System.Int16,System.Double)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemDouble(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets an integer or floating point value from a DataWindow column given the column number.      </summary><returns>The original or current value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.Double.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain an integer or floating point value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDouble</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDouble(System.Int32,System.Int16,System.Double)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemDouble(System.Int32,System.String)">
            <summary>Gets the current integer or floating point value from a DataWindow column within a row of the Primary buffer given the column name.      </summary><returns>The value located at <i>RowNumber</i> and <i>ColumnName</i> as a System.Double.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain an integer or floating point value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDouble(RowNumber, ColumnName, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDouble</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDouble(System.Int32,System.Int16,System.Double)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets an integer or floating point value from a DataWindow column given the column name.      </summary><returns>The original or current value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.Double.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain an integer or floating point value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDouble</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDouble(System.Int32,System.Int16,System.Double)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets an integer or floating point value from a DataWindow column given the column name.</summary><returns>The value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlDouble.		</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain an integer or floating point value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In contrast to <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemDouble(System.Int32,System.Int16)"/>, <b>GetItemSqlDouble</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlDouble.IsNull"/> property of the returned SqlDouble structure.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDouble(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDouble(System.Int32,System.String,System.Data.SqlTypes.SqlDouble)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDouble(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <overloads>Gets an integer or floating point value from a DataWindow column.</overloads><summary>Gets an integer or floating point value from a DataWindow column given the column number.
      </summary><returns>The value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlDouble.			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain an integer or floating point value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In contrast to <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemDouble(System.Int32,System.Int16)"/>, <b>GetItemSqlDouble</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlDouble.IsNull"/> property of the returned SqlDouble structure.</para>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDouble(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDouble(System.Int32,System.String,System.Data.SqlTypes.SqlDouble)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer)">
            <overloads>Reports the modification status of a DataWindow column in a specific row.</overloads><summary>Reports the modification status of a DataWindow column in a specific row, given the column number.</summary><returns>The <see cref="T:Sybase.DataWindow.ItemStatus"/>.</returns><param name="RowNumber">The row number containing the column of interest.</param><param name="ColumnNumber">The column number for which you want the modification status.</param><param name="Buffer">The DataWindow buffer containing the row and column for which you want to get the status.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>Use <b>GetItemStatus</b> to understand what SQL statements will be generated for new and changed information when you update 
         the database. <see cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/> generates a SQL UPDATE statement for rows that have columns with an ItemStatus of Modified. The columns themselves
         are included in the SET clause of the UPDATE statement.
 </remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.ItemStatus)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemStatus(System.Int32,System.String,Sybase.DataWindow.DataBuffer)">
            <summary>Reports the modification status of a DataWindow column in a specific row, given the column name.</summary><returns>The <see cref="T:Sybase.DataWindow.ItemStatus"/>.</returns><param name="RowNumber">The row number containing the column of interest.</param><param name="ColumnName">The name of the column for which you want the modification status.</param><param name="Buffer">The DataWindow buffer containing the row and column for which you want to get the status.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>Use <b>GetItemStatus</b> to understand what SQL statements will be generated for new and changed information when you update 
         the database. <see cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/> generates a SQL UPDATE statement for rows that have columns with an ItemStatus of Modified. The columns themselves
         are included in the SET clause of the UPDATE statement.
         </remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.ItemStatus)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemString(System.Int32,System.Int16)">
            <overloads>Gets a String value from a DataWindow column.</overloads><summary>Gets the current String value from a DataWindow column within a row of the Primary buffer given the column number. </summary><returns>The value located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.String.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The String value is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemString(RowNumber, ColumnNumber, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>You can use <b>GetItemString</b> for columns of any datatype. If the column type is not a string, the return value is a string representation of the data with the column format applied.  If <i>ColumnNumber</i>'s datatype is string, any assigned format string is not applied and the raw data is returned.</para>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemString</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemString(System.Int32,System.Int16,System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemString(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a String value from a DataWindow column given the column number.      </summary><returns>The original or current value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.String.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The String value is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>You can use <b>GetItemString</b> for columns of any datatype. If the column type is not a string, the return value is a string representation of the data with the column format applied.  If <i>ColumnNumber</i>'s datatype is string, any assigned format string is not applied and the raw data is returned.</para>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemString</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Double value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemString(System.Int32,System.Int16,System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemString(System.Int32,System.String)">
            <summary>Gets the current String value from a DataWindow column within a row of the Primary buffer given the column name.     
      </summary><returns>The value located at <i>RowNumber</i> and <i>ColumnName</i> as a System.String.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The String value is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemString(RowNumber, ColumnName, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>You can use <b>GetItemString</b> for columns of any datatype. If the column type is not a string, the return value is a string representation of the data with the column format applied.  If <i>ColumnName</i>'s type is a string, any assigned format string is not applied and the raw data is returned, unless <i>ColumnName</i> is a computed column, in which case the format is applied.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemString</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemString(System.Int32,System.Int16,System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a String value from a DataWindow column given the column name.      </summary><returns>The original or current value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.String.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The String value is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>You can use <b>GetItemString</b> for columns of any datatype. If the column type is not a string, the return value is a string representation of the data with the column format applied.  If <i>ColumnName</i>'s type is a string, any assigned format string is not applied and the raw data is returned, unless <i>ColumnName</i> is a computed column, in which case the format is applied.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemString</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemString(System.Int32,System.Int16,System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a String value from a DataWindow column given the column name.</summary><returns>The String value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlString.		</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In contrast to <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemString(System.Int32,System.Int16)"/>, <b>GetItemSqlString</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlString.IsNull"/> property of the returned SqlString structure.</para>
				<para>You can use <b>GetItemSqlString</b> for columns of any datatype. If the column type is not a string, the return value is a string representation of the data with the column format applied.  If <i>ColumnName</i>'s datatype is a string, any assigned format string is not applied and the raw data is returned, unless <i>ColumnName</i> is a computed column, in which case the format is applied.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemString(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemSqlString(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <overloads>Gets a String value from a DataWindow column.</overloads><summary>Gets a String value from a DataWindow column given the column number.
      </summary><returns>The String value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlString.			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In contrast to <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemString(System.Int32,System.Int16)"/>, <b>GetItemSqlString</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlString.IsNull"/> property of the returned SqlString structure.</para>
				<para>You can use <b>GetItemSqlString</b> for columns of any datatype. If the column type is not a string, the return value is a string representation of the data with the column format applied.  If <i>ColumnNumber</i>'s datatype is a string, any assigned format string is not applied and the raw data is returned.</para>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemString(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemTime(System.Int32,System.Int16)">
            <overloads>Gets a Time value from a DataWindow column. </overloads><summary>Gets the current Time value from a DataWindow column within a row of the Primary buffer given the column number.
      </summary><returns>The Time value located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.DateTime.<note>The DataWindow Time datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Time value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Time value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemTime(RowNumber, ColumnNumber, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Time value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a Time value from a DataWindow column given the column number.      </summary><returns>The original or current Time value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.DateTime.<note>The DataWindow Time datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Time value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Time value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Time value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemTime(System.Int32,System.String)">
            <summary>Gets the current Time value from a DataWindow column within a row of the Primary buffer given the column name.   
      </summary><returns>The Time value located at <i>RowNumber</i> and <i>ColumnName</i> as a System.DateTime.<note>The DataWindow Time datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Time value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Time value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemTime(RowNumber, ColumnName, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Time value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetItemTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a Time value from a DataWindow column given the column name.  
      </summary><returns>The original or current Time value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.DateTime.<note>The DataWindow Time datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Time value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Time value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Time value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.FindNextModifiedRow(System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Reports the next row that has been modified in the specified buffer. 
      </summary><returns>The number of the first modified row in <i>Buffer</i> after <i>RowNumber</i>, or 0 if there is no such row.</returns><param name="RowNumber">The number of the row after which to begin the search. Use a value of 0 to search from the beginning.</param><param name="Buffer">The DataWindow buffer in which to search.</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>FindNextModifiedRow</b> reports rows with a <see cref="T:Sybase.DataWindow.RowStatus"/> of 
         NewAndModified and Modified.</para>
				<para>The search begins in the row after the value you specify in <i>RowNumber</i>. 
         This is different from the behavior of <see cref="M:Sybase.DataWindow.DataWindowControl.FindRow(System.String,System.Int32,System.Int32)"/>, <see cref="M:Sybase.DataWindow.DataWindowControl.FindGroupChange(System.Int32,System.Int16)"/>, and <see cref="M:Sybase.DataWindow.DataWindowControl.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)"/>, which begin searching in the row you specify.</para>
			</remarks><example>These C# statements count the number or rows that were modified in the Primary buffer of <c>dwStatus</c>
         and then display a message reporting the number modified (thus reporting the same value as the <see cref="P:Sybase.DataWindow.DataWindowControl.ModifiedCount"/> property):
         <code>
         int NbrRows, rowNum, count;
         
         dwStatus.AcceptText();
         NbrRows = dwStatus.RowCount;
         count = 0;
         rowNum = 0;
         do 
         {
            rowNum = dwStatus.FindNextModifiedRow(rowNum, Sybase.DataWindow.DataBuffer.Primary);
         
            if (rowNum &gt; 0) 
              count = count + 1;
            else
              rowNum = NbrRows;
         }
         while (rowNum &lt; NbrRows);
         
         MessageBox.Show(count.ToString() + " rows were modified.", "Modified Count");	
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.FindRow(System.String,System.Int32,System.Int32)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetObjectByName(System.String)">
            <summary>Returns a named control within the DataWindow object.</summary><returns>An instance of <see cref="T:Sybase.DataWindow.GraphicObject"/> representing the named control.</returns><param name="Name">The name of the control (e.g., column, button, text) within the DataWindow object.</param><exception cref="T:System.ArgumentNullException">
				<i>Name</i> is null.</exception><exception cref="T:System.ArgumentException">
				<i>Name</i> is not a valid control within the DataWindow object.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In most cases, you will need to cast the return value to the specific <see cref="T:Sybase.DataWindow.GraphicObject"/> descendant, namely: </para>
				<list type="bullet">
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectButton"/>
					</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectText"/>
					</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectPicture"/>
					</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectReport"/>
					</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectBlobColumn"/>
					</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectComputedColumn"/>
					</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectEditableColumn"/>
					</item>
				</list>
				<para>After narrowing the reference, you can directly modify some of the more common properties of the object
         such as format, border style, X and Y coordinates, and colors.  You can modify other properties not exposed in a <see cref="T:Sybase.DataWindow.GraphicObject"/> class using the <see cref="M:Sybase.DataWindow.DataWindowControl.Modify(System.String)"/> or <see cref="M:Sybase.DataWindow.DataWindowControl.SetProperty(System.String,System.String)"/> methods.</para>
				<para>To obtain a column object by the number of
         the column, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetColumnObjectByNumber(System.Int16)"/>.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetColumnObjectByNumber(System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetProperty(System.String)">
            <summary>Returns a property value for a control within a DataWindow object.</summary><returns>The property value as a string.</returns><param name="Syntax">The DataWindow object property.</param><exception cref="T:System.ArgumentNullException">
				<i>Syntax</i> is null.</exception><exception cref="T:System.ArgumentException">
				<i>Syntax</i> is not a valid property.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>
				<para>This method can be used in lieu of <see cref="M:Sybase.DataWindow.DataWindowControl.Describe(System.String)"/> whenever a single property value is desired. It can also be used to obtain property values not exposed by the <see cref="T:Sybase.DataWindow.GraphicObject"/> classes.</para>
				<para>See the <i>DataWindow .NET Programmer's Guide</i> for a complete list of DataWindow object properties that can be used with <b>GetProperty</b>
				</para>
			</remarks><example>This C# code gets the value of a property in a DataWindow object when the user selects 
         an object type (such as a label or a column) and an attribute (such as <c>color</c> or <c>font.face</c>) from 
         two list boxes:
         <code>
         string strObject, strAttr, strValue;
         
         strObject = (string)lbObjects.SelectedItem;
         strAttr = (string)lbAttributes.SelectedItem;
         
         strValue = DW1.GetProperty(strObject + "." + strAttr);
         
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetProperty(System.String,System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.Describe(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetRowFromRowId(System.Int32)">
            <overloads>Gets a row number given the unique row identifier associated with that row. </overloads><summary>Gets the number of a row in the Primary buffer given the unique row identifier associated with that row. 
      </summary><returns>The row number.</returns><param name="RowId">The row identifier for which you want the associated row number.</param><exception cref="T:System.ArgumentException">
				<i>RowId</i> is not a valid row identifier, or the row is no longer in the Primary buffer.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>This method allows you to use a unique row identifier to obtain the current row number position within the Primary buffer. 
			The row identifier is not affected by operations such as 
         Insert, Delete, Filter, or Sort that may change the original order - and consequently the row numbers.
      </remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetRowIdFromRow(System.Int32)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetRowFromRowId(System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Gets the number of a row in the specified buffer given the unique row identifier associated with that row. 
      </summary><returns>The row number.</returns><param name="RowId">The row identifier for which you want the associated row number.</param><param name="Buffer">The DataWindow buffer containing the row.</param><exception cref="T:System.ArgumentException">
				<i>RowId</i> is not a valid row identifier, or the row is no longer in the <i>Buffer</i>.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>This method allows you to use a unique row identifier to obtain the current row number position within the Primary buffer. 
			The row identifier is not affected by operations such as 
         Insert, Delete, Filter, or Sort that may change the original order - and consequently the row numbers.
      </remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetRowIdFromRow(System.Int32)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetRowIdFromRow(System.Int32)">
            <overloads>Gets a unique row identifier for a given row. </overloads><summary>Gets a unique row identifier for the given row in the Primary buffer.</summary><returns>The unique row identifier.</returns><param name="RowNumber">The number of the row for which you want a unique row identifier.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not a valid row in the Primary buffer.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>The row identifier value is not the same as the row number value used by many DataWindow .NET
         methods. First 
         convert the unique row identifier into a row number by calling <see cref="M:Sybase.DataWindow.DataWindowControl.GetRowFromRowId(System.Int32)"/>.
      </remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetRowFromRowId(System.Int32)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetRowIdFromRow(System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Gets a unique row identifier for the given row in the specified buffer.</summary><returns>The unique row identifier.</returns><param name="RowNumber">The number of the row for which you want a unique row identifier.</param><param name="Buffer">The DataWindow buffer containing the row for which you want the unique identifier.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not a valid row in <i>Buffer</i>.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>The row identifier value is not the same as the row number value used by many DataWindow .NET
         methods. First 
         convert the unique row identifier into a row number by calling <see cref="M:Sybase.DataWindow.DataWindowControl.GetRowFromRowId(System.Int32)"/>.
      </remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetRowFromRowId(System.Int32)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Reports the modification status of a row in a DataWindow.
      </summary><returns>The <see cref="T:Sybase.DataWindow.RowStatus"/>.</returns><param name="RowNumber">The row number for which you want the status.</param><param name="Buffer">The DataWindow buffer containing the row.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>Use <b>GetRowStatus</b> to understand what SQL statements will be generated when you update the database. 
			For rows in the Primary and Filter buffers, <see cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/>
         generates:
         <list type="bullet">
					<item>an INSERT statement for rows in the Primary and Filter buffers with the NewAndModified status;</item>
					<item>an UPDATE statement for rows in the Primary and Filter buffers with Modified status.  The generated
					SQL statement includes the columns that have an
					<see cref="T:Sybase.DataWindow.ItemStatus"/> of Modified within the SET clause; and</item>
					<item> a DELETE statement for rows in the Delete buffer that have a status of Modified or NotModified. 
					New and NewAndModified rows do not exist yet in the database;
         therefore, there is nothing to actually delete.</item>
				</list>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.RowStatus)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.FindNextSelectedRow(System.Int32)">
            <summary>Reports the number of the next highlighted row in a DataWindowControl. 
      </summary><returns>The number of the selected row, or 0 if no row is selected. </returns><param name="RowNumber">The number of the row after which to begin the search. Use a value of 0 to search from the beginning.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>
				<para>
					<b>FindNextSelectedRow</b> begins searching after <i>RowNumber</i>, and so does not return <i>RowNumber</i> if that row is selected. Use a value of 0 to search from the beginning.</para>
				<para>Rows are not automatically selected (highlighted) when they become current. You can select a 
         row by calling the <see cref="M:Sybase.DataWindow.DataWindowControl.SelectRow(System.Int32,System.Boolean)"/> method, perhaps in conjunction with the <see cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanged"/> event.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SelectRow(System.Int32,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetSqlSelect">
            <summary>Returns the SQL SELECT statement that is the data source of a DataWindow.</summary><returns>A string containing the SQL SELECT statement that is the source of the DataWindow, 
			or an empty string ("") if the data source is not a SELECT statement.</returns><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>
				<para>When you want to change the SQL SELECT statement for a DataWindow or DataStore at runtime
         you can use <b>GetSqlSelect</b> to save the current SELECT statement before making the change.</para>
				<para>When you 
         define a DataWindow object graphically in DataWindow Designer, a special SELECT statement (called a 
         PBSELECT statement) is stored with the DataWindow object.  This database-vendor independent syntax is
         translated to native SQL when a connected <see cref="T:Sybase.DataWindow.Transaction"/> or 
         <see cref="T:Sybase.DataWindow.AdoTransaction"/>
         has been associated with the DataWindowControl or DataStore via the <see cref="M:Sybase.DataWindow.DataWindowControl.SetTransaction(Sybase.DataWindow.AdoTransaction)"/> method.  If there is no
         associated connection when <b>GetSqlSelect</b> is invoked, the PBSELECT syntax is returned.
         </para>
				<para>
					<b>GetSqlSelect</b> is equivalent to the following:
				<list type="bullet">
						<item>GetProperty("datawindow.table.select")</item>
						<item>Describe("datawindow.table.select")</item>
					</list>
				</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetSqlSelect(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetText">
            <summary>Obtains the current value of the DataWindowControl's edit control.</summary><returns>The string value in the edit control, or the empty string ("") if the edit control is not currently visible.</returns><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>
				<para>The values in the rows and columns of a DataWindow are items in the DataWindow's buffer. 
         When a user edits a value in a row and column, the item value is transferred as text to an edit 
         control in which the user can change the value. When the user leaves the column or when code 
         calls <see cref="M:Sybase.DataWindow.DataWindowControl.AcceptText"/>, the text in the edit control becomes the value 
         of the item in the Primary buffer (assuming it passes any validation criteria specified).
          Use <b>GetText</b> to access the value before it has been accepted into the Primary buffer.</para>
				<para>To obtain the value stored in the DataWindow's buffer for a given row and column, use the GetItem 
         method that corresponds with the datatype of the column (such as <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemDateTime(System.Int32,System.Int16)"/> and 
          <see cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>).</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetText(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.CalculateGroups">
            <summary>Recalculates the breaks in the grouping levels in a DataWindow. 
      </summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>Use <b>CalculateGroups</b> to force the DataWindow object to recalculate the breaks in the 
         grouping levels after you have added or modified rows in a DataWindow. <b>CalculateGroups</b> does not 
         sort the data before it recalculates the breaks; therefore, unless you populated the DataWindow 
         in a sorted order, call the <see cref="M:Sybase.DataWindow.DataWindowControl.Sort"/> method to sort the data before you call <b>CalculateGroups</b>. 
      </remarks><example>This code imports new rows from a file into the DataWindow <c>dwEmp</c> and recalculates 
         the group breaks after applying the default sort ordering stored as part of the DataWindow object:
         <code>
         dwEmp.ImportFile("d:\employee.txt", Sybase.DataWindow.FileSaveAsType.Text)
         dwEmp.Sort()
         dwEmp.CalculateGroups()
         dwEmp.Refresh()
         </code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.Hide">
            <summary>Makes the DataWindowControl invisible.</summary><remarks>Users cannot interact with an invisible DataWindowControl. It does not respond to any events, so the object 
         is also, in effect, disabled.
         </remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.Show"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.ImportClipboard(Sybase.DataWindow.FileSaveAsType)">
            <overloads>Inserts text data from the clipboard into a DataWindow.</overloads><summary>Inserts comma-separated, tab-separated, or XML data from the clipboard into a DataWindow.</summary><returns>The number of rows that were imported.</returns><param name="ImportType">The text format, either Csv, Text, and Xml.</param><exception cref="T:System.ArgumentException">
				<i>ImportType</i> is not Csv, Text or Xml.</exception><exception cref="T:System.InvalidOperationException">Data in one of the columns has an incompatible datatype.</exception><exception cref="T:System.NotSupportedException"><b>ImportClipboard</b> is not supported for crosstab and composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The clipboard data must be formatted in tab-separated (Text) or comma-separated (Csv) columns or as 
         XML. The datatypes and order of the DataWindow object's columns must match the data on the 
         clipboard.</para>
				<para>If an XML or comma-separated column contains a leading double quote, it is assumed to be part of 
         the column value. A leading double quote has to be closed to mark the end of an item.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.ImportString(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.ImportClipboard(Sybase.DataWindow.FileSaveAsType,System.Int32,System.Int32,System.Int16,System.Int16,System.Int16)">
            <summary>Inserts comma-separated, tab-separated, or XML data from the clipboard into a DataWindow.
      </summary><returns>The number of rows that were imported.</returns><param name="ImportType">The text format, either Csv, Text, or Xml.</param><param name="StartRow">The number of the first row in the clipboard that you want to copy.</param><param name="EndRow">The number of the last row in the clipboard that you want to copy. </param><param name="StartCol">The number of the first column in the clipboard that you want to copy. </param><param name="EndCol">The number of the last column in the clipboard that you want to copy. </param><param name="dwStartCol">The number of the first column in the DataWindow that you want to receive data. </param><exception cref="T:System.ArgumentException">
				<i>ImportType</i> is not Csv, Text or Xml.</exception><exception cref="T:System.InvalidOperationException">Data in one of the columns has an incompatible datatype.</exception><exception cref="T:System.NotSupportedException"><b>ImportClipboard</b> is not supported for crosstab and composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The clipboard data must be formatted in tab-separated (Text) or comma-separated (Csv) columns or as 
         XML. The datatypes and order of the DataWindow object's columns must match the data on the 
         clipboard.</para>
				<para>
					<b>StartCol</b> and <b>EndCol</b> control the number of imported columns and the number of 
         columns in the DataWindow that are affected. <b>dwStartCol</b> specifies the first 
         DataWindow column to be affected. The last column to be affected can be calculated as:
         <c>dwStartCol + (EndCol - StartCol)</c>
				</para>
				<para>If an XML or comma-separated column contains a leading double quote, it is assumed to be part of 
         the column value. A leading double quote has to be closed to mark the end of an item.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.ImportString(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)">
            <overloads>Inserts data from a text file into a DataWIndow.</overloads><summary>Inserts comma-separated, tab-separated, or XML data from a file into a DataWindow.</summary><returns>The number of rows that were imported.</returns><param name="FileName">The name of the file from which to import the rows.</param><param name="ImportType">The file format, either Csv, Text, or Xml.</param><exception cref="T:System.ArgumentException">
				<i>ImportType</i> is not Csv, Text or Xml.</exception><exception cref="T:System.InvalidOperationException">Data in one of the columns has an incompatible datatype.</exception><exception cref="T:System.NotSupportedException"><b>ImportFile</b> is not supported for crosstab and composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The file should consist of rows of data. If the file includes column headings or row 
         labels, use the overloaded version of this method which allows you to skip the first row(s).</para>
				<para>The datatypes and order of the DataWindow object's columns must match the columns of data in the file.</para>
				<para>The location and number of double quote marks in a field in a tab-separated file affect how 
         they are handled when the file is imported:</para>
				<list type="bullet">
					<item>If the string is enclosed in one pair of double quotes, the quotes are discarded.</item>
					<item>If the string is enclosed in two pairs of double quotes, the first 
         pair is considered to enclose a null string, and the rest of the string is discarded. </item>
					<item>If the string is enclosed in three pairs of double quotes, one pair is retained 
         when the string is imported. </item>
					<item>If there 
         is a double quote at the beginning of a string, any characters after the second double quote are 
         discarded. If there is no second double quote, the tab or comma character delimiting the fields 
         is not recognized as a field separator and all characters up to the next occurrence of a double 
         quote, including a carriage return, are considered to be part of the string.</item>
					<item>Double quotes after the first character in the string are rendered literally.</item>
				</list>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.ImportClipboard(Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.ImportString(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType,System.Int32,System.Int32,System.Int16,System.Int16,System.Int16)">
            <summary>Inserts comma-separated, tab-separated, or XML data from a file into a DataWindow.</summary><returns>The number of rows that were imported.</returns><param name="FileName">The name of the file from which to import the rows.</param><param name="ImportType">The file format, either Csv, Text, or Xml.</param><param name="StartRow">The number of the first row in the file that you want to copy.</param><param name="EndRow">The number of the last row in the file that you want to copy. </param><param name="StartCol">The number of the first column in the file that you want to copy. </param><param name="EndCol">The number of the last column in the file that you want to copy.</param><param name="dwStartCol">The number of the first column in the DataWindow that you want to receive data. </param><exception cref="T:System.ArgumentException">
				<i>ImportType</i> is not Csv, Text or Xml.</exception><exception cref="T:System.InvalidOperationException">Data in one of the columns has an incompatible datatype.</exception><exception cref="T:System.NotSupportedException"><b>ImportFile</b> is not supported for crosstab and composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The file should consist of rows of data. If the file includes column headings or row 
         labels, use the overloaded version of this method which allows you to skip the first row(s).</para>
				<para>The datatypes and order of the DataWindow object's columns must match the columns of data in the file.</para>
				<para>
					<b>StartCol</b> and <b>EndCol</b> control the number of imported columns and the number of 
         columns in the DataWindow that are affected. <b>dwStartCol</b> specifies the first 
         DataWindow column to be affected. The last column to be affected can be calculated as:
         <c>dwStartCol + (EndCol - StartCol)</c>
				</para>
				<para>The location and number of double quote marks in a field in a tab-separated file affect how 
         they are handled when the file is imported:</para>
				<list type="bullet">
					<item>If the string is enclosed in one pair of double quotes, the quotes are discarded.</item>
					<item>If the string is enclosed in two pairs of double quotes, the first 
         pair is considered to enclose a null string, and the rest of the string is discarded. </item>
					<item>If the string is enclosed in three pairs of double quotes, one pair is retained 
         when the string is imported. </item>
					<item>
         If there 
         is a double quote at the beginning of a string, any characters after the second double quote are 
         discarded. If there is no second double quote, the tab or comma character delimiting the fields 
         is not recognized as a field separator and all characters up to the next occurrence of a double 
         quote, including a carriage return, are considered to be part of the string.</item>
					<item>Double quotes after the first character in the string are rendered literally.</item>
				</list>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.ImportClipboard(Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.ImportString(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.ImportString(System.String,Sybase.DataWindow.FileSaveAsType)">
            <overloads>Insert data from a string into a DataWIndow.</overloads><summary>Inserts data from comma-separated, tab-separated, or XML  string into a DataWindow.</summary><returns>The number of rows that were imported.</returns><param name="ImportString">The string containing the data.</param><param name="ImportType">The text format, either Csv, Text, or Xml.</param><exception cref="T:System.ArgumentException">
				<i>ImportType</i> is not Csv, Text or Xml.</exception><exception cref="T:System.InvalidOperationException">Data in one of the columns has an incompatible datatype.</exception><exception cref="T:System.NotSupportedException"><b>ImportString</b> is not supported for crosstab and composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The string should consist of rows of data. If the string includes column headings or row 
         labels, use the overloaded version of this method which allows you to skip the first row(s).</para>
				<para>The datatypes and order of the DataWindow object's columns must match the columns of data in the string.</para>
				<para>If an XML or comma-separated column contains a leading double quote it is assumed to be 
         part of the column value. A leading double quote has to be closed to mark the end of an item.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.ImportClipboard(Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.ImportString(System.String,Sybase.DataWindow.FileSaveAsType,System.Int32,System.Int32,System.Int16,System.Int16,System.Int16)">
            <summary>Inserts data from comma-separated, tab-separated, or XML  string into a DataWindow.</summary><returns>The number of rows that were imported.</returns><param name="ImportString">The string containing the data.</param><param name="ImportType">The text format, either Csv, Text, or Xml.</param><param name="StartRow">The number of the first row in the string that you want to copy.</param><param name="EndRow">The number of the last row in the string that you want to copy. </param><param name="StartCol">The number of the first column in the string that you want to copy. </param><param name="EndCol">The number of the last column in the string that you want to copy.</param><param name="dwStartCol">The number of the first column in the DataWindow that you want to receive data. </param><exception cref="T:System.ArgumentException">
				<i>ImportType</i> is not Csv, Text or Xml.</exception><exception cref="T:System.InvalidOperationException">Data in one of the columns has an incompatible datatype.</exception><exception cref="T:System.NotSupportedException"><b>ImportString</b> is not supported for crosstab and composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The string should consist of rows of data. If the string includes column headings or row 
         labels, use the overloaded version of this method which allows you to skip the first row(s).</para>
				<para>The datatypes and order of the DataWindow object's columns must match the columns of data in the string.</para>
				<para>
					<b>StartCol</b> and <b>EndCol</b> control the number of imported columns and the number of 
         columns in the DataWindow that are affected. <b>dwStartCol</b> specifies the first 
         DataWindow column to be affected. The last column to be affected can be calculated as:
         <c>dwStartCol + (EndCol - StartCol)</c>
				</para>
				<para>If an XML or comma-separated column contains a leading double quote it is assumed to be 
         part of the column value. A leading double quote has to be closed to mark the end of an item.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.ImportClipboard(Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.IsExpanded(System.Int32,System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="DataWindowComments.xml" path="doc/members/member[@name=&quot;M:IsExpanded&quot;]/*"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)">
            <overloads>Tests whether the value of a DataWindow column is null.</overloads><summary>Tests whether the current value of a DataWindow column, specified by number, is null. 
      </summary><returns>
				<c>true</c> if the value at <i>RowNumber</i> and <i>ColumnNumber</i> is null, and <c>false</c> otherwise.</returns><param name="RowNumber">The row number for which you want to test the value.</param><param name="ColumnNumber">The column number for which you want to test the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
			<para>To avoid generating a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>, use <b>IsItemNull</b> to test whether a user-entered value or a value retrieved from the 
         database is null before calling any of the following methods:</para>
				<list type="bullet">
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowControl.GetItemDate(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowControl.GetItemDateTime(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowControl.GetItemDecimal(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowControl.GetItemDouble(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowControl.GetItemString(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowControl.GetItemTime(System.Int32,System.Int16)"/>
					</item>
				</list>
				<para>If one or more columns in a DataWindow are marked as required, that is, they must
         contain data, updating the database will fail if those columns have null values. Before calling <see cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/>, use         <see cref="M:Sybase.DataWindow.DataWindowControl.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)"/> to find any remaining columns with null values, and either prompt the user for input or provide values programmatically.  This is more efficient than using <b>IsItemNull</b> to evaluate each row and column.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemNull(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Tests whether the value of a DataWindow column, specified by number, is null. 
      </summary><returns>
				<c>true</c> if the value at <i>RowNumber</i> and <i>ColumnNumber</i> is null, and <c>false</c> otherwise.</returns><param name="RowNumber">The row number for which you want to test the value.</param><param name="ColumnNumber">The column number for which you want to test the value.</param><param name="Buffer">The DataWindow buffer for which you want to test the value.</param><param name="OriginalData">
				<c>false</c> to test the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to test the value prior to any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>To avoid generating a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>, use <b>IsItemNull</b> to test whether a user-entered value or a value retrieved from the 
         database is null before calling any of the following methods:</para>
				<list type="bullet">
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowControl.GetItemDate(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowControl.GetItemDateTime(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowControl.GetItemDecimal(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowControl.GetItemDouble(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowControl.GetItemString(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowControl.GetItemTime(System.Int32,System.Int16)"/>
					</item>
				</list>
				<para>If one or more columns in a DataWindow are marked as required, that is, they must
         contain data, updating the database will fail if those columns have null values. Before calling <see cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/>, use         <see cref="M:Sybase.DataWindow.DataWindowControl.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)"/> to find any remaining columns with null values, and either prompt the user for input or provide values programmatically.  This is more efficient than using <b>IsItemNull</b> to evaluate each row and column.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemNull(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.String)">
            <summary>Tests whether the current value of a DataWindow column, specified by name, is null. 
      </summary><returns>
				<c>true</c> if the value at <i>RowNumber</i> and <i>ColumnName</i> is null, and <c>false</c> otherwise.</returns><param name="RowNumber">The row number for which you want to test the value.</param><param name="ColumnName">The name of the column for which you want to test the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>To avoid generating a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>, use <b>IsItemNull</b> to test whether a user-entered value or a value retrieved from the 
         database is null before calling any of the following methods:</para>
				<list type="bullet">
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowControl.GetItemDate(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowControl.GetItemDateTime(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowControl.GetItemDecimal(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowControl.GetItemDouble(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowControl.GetItemString(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowControl.GetItemTime(System.Int32,System.Int16)"/>
					</item>
				</list>
				<para>If one or more columns in a DataWindow are marked as required, that is, they must
         contain data, updating the database will fail if those columns have null values. Before calling <see cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/>, use         <see cref="M:Sybase.DataWindow.DataWindowControl.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)"/> to find any remaining columns with null values, and either prompt the user for input or provide values programmatically.  This is more efficient than using <b>IsItemNull</b> to evaluate each row and column.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemNull(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Tests whether the value of a DataWindow column, specified by name, is null. 
      </summary><returns>
				<c>true</c> if the value at <i>RowNumber</i> and <i>ColumnName</i> is null, and <c>false</c> otherwise.</returns><param name="RowNumber">The row number for which you want to test the value.</param><param name="ColumnName">The name of the column for which you want to test the value.</param><param name="Buffer">The DataWindow buffer for which you want to test the value.</param><param name="OriginalData">
				<c>false</c> to test the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to test the value prior to any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>To avoid generating a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>, use <b>IsItemNull</b> to test whether a user-entered value or a value retrieved from the 
         database is null before calling any of the following methods:</para>
				<list type="bullet">
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowControl.GetItemDate(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowControl.GetItemDateTime(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowControl.GetItemDecimal(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowControl.GetItemDouble(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowControl.GetItemString(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowControl.GetItemTime(System.Int32,System.Int16)"/>
					</item>
				</list>
				<para>If one or more columns in a DataWindow are marked as required, that is, they must
         contain data, updating the database will fail if those columns have null values. Before calling <see cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/>, use         <see cref="M:Sybase.DataWindow.DataWindowControl.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)"/> to find any remaining columns with null values, and either prompt the user for input or provide values programmatically.  This is more efficient than using <b>IsItemNull</b> to evaluate each row and column.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemNull(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.InsertRow">
            <summary>
            Inserts a row to the DataWindow by adding it to the end of the DataWindow.
            </summary>
            <returns>The row number of the inserted row.</returns>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.InsertRow(System.Int32)">
            <summary>Inserts a row into a DataWindow. 
      </summary><returns>The number of the row that was added. </returns><param name="RowNumber">The row number before which to insert the new row. Specify 0 to insert a row at the end.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:System.NotSupportedException">Crosstab and composite DataWindow styles do not support <i>InsertRow</i>.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>InsertRow</b> simply inserts a row without changing the display or the current row. If any of the DataWindow columns have 
			default values, these values are added to the Primary buffer before the row is displayed.</para>
				<para>To make the new row the current row, call the <see cref="M:Sybase.DataWindow.DataWindowControl.SetRow(System.Int32)"/> method. For a DataWindowControl, you can
			invoke <see cref="M:Sybase.DataWindow.DataWindowControl.ScrollToRow(System.Int32)"/> instead if you also want the new row to be visible in the 
			DataWindowControl.</para>
				<para>A newly inserted row (with a <see cref="T:Sybase.DataWindow.RowStatus"/> value of New) is not 
         included in <see cref="P:Sybase.DataWindow.DataWindowControl.ModifiedCount"/> until data is entered in the row (and its <see cref="T:Sybase.DataWindow.RowStatus"/> changes
         to NewAndModified). </para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.DeleteRow(System.Int32)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.IsSelected(System.Int32)">
            <summary>Tests whether a row is selected (highlighted) in a DataWindowControl.</summary><returns>
				<c>true</c> if <i>RowNumber</i>in the DataWindowControl is selected and <c>false</c> otherwise.</returns><param name="RowNumber">The number of the row you want to test to see if it is selected.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><seealso cref="M:Sybase.DataWindow.DataWindowControl.SelectRow(System.Int32,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.Modify(System.String)">
            <summary>Modifies a DataWindow object by applying specifications that
         change the object's definition. 
      </summary><param name="Syntax">A string whose value is the specification for the modification.  See the Remarks section for appropriate formats.</param><exception cref="T:System.ArgumentNullException">
				<i>Syntax</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">
				<i>Syntax</i> is invalid, or an unexpected error has occurred.</exception><remarks>
				<para>
					<b>Modify</b> lets you make many of the same settings in code that you can make when designing the 
         DataWindow. DataWindow Designer automatically gives names to all controls so that you can refer to them in <i>Syntax</i>. 
         See the <i>DataWindow .NET Programmer's Guide</i> for the exhaustive list of control properties that can be used.</para>
				<para>You can use three types of statements in <i>Syntax</i> to create, remove, and modify controls within a DataWindow object.
         <list type="bullet">
						<item>
							<b>CREATE </b>
							<i>control (settings)	</i>
							<para>
         Adds a control to the DataWindow object (such as text, computed fields, and bitmaps). 
         <i>Settings</i> is a list of properties and values using the format you see in exported DataWindow 
         syntax. To create a control, you must supply enough information to define it.</para>
						</item>
						<item>
							<b>DESTROY [COLUMN] </b>
							<i> control</i>
							<para>
         Removes <i>control</i> from the DataWindow object. When <i>control</i> is a column, specify the keyword COLUMN 
         to remove both the column and the column's data from the buffer.</para>
						</item>
						<item>
							<i>controlname.property=value</i>
							<para>Changes the value of <i>property</i> to <i>value</i>. Properties control the location, color, 
         size, font, and other settings for <i>controlname</i>. When <i>controlname</i> is <c>DataWindow</c>, you
         can also set properties for database access. Depending on the specific property, <i>value</i> can
         be a constant, a quoted constant, an expression that consists of a default value followed by a 
         valid DataWindow expression that returns the appropriate datatype for the property. </para>
							<para>If you are changing a single property, you can also use the <see cref="M:Sybase.DataWindow.DataWindowControl.SetProperty(System.String,System.String)"/> method, or use a property of one of the 
         <see cref="T:Sybase.DataWindow.GraphicObject"/> classes, if the desired property is exposed.</para>
						</item>
					</list>
				</para>
				<para>When you specify an expression for a DataWindow property, the expression has the format:<c> 
         defaultvalue~tDataWindowexpression</c> where:
				</para>
				<list type="bullet">
					<item>
						<c>Defaultvalue</c> is a value that can be converted to the appropriate datatype for the property. It must be followed by a tab character.</item>
					<item>
						<c>DataWindowexpression</c> is an expression that can use any 
         DataWindow expression function. The expression must also evaluate to the appropriate datatype 
         for the property. When you are setting a column's property, the expression is evaluated for each 
         row in the DataWindow, allowing the display to vary based on the data.
         </item>
				</list>
				<para>A typical expression uses the <c>If</c> function: <c>0~tIf(emp_status='T', 255, 0)</c>.  The following Visual Basic .NET statements would equivalently
         change the text color of the <c>emp_id</c> column to red for those employees with a status of 'T' (terminated) in <c>dwEmp</c>:
				</para>
				<list type="bullet">
					<item>
						<c>dwEmp.Modify("emp_id.color='0~tIf(emp_status=~'T~',255,0)'")</c>
					</item>
					<item>
						<c>dwEmp.SetProperty("emp_id.color", "0~tIf(emp_status=~'T~',255,0)")</c>
					</item>
					<item>
						<c>Dim gobEditColumn as Sybase.DataWindow.GraphicObjectEditableColumn</c>
        				<c>gobEditColumn = CObj(dwEmp.GetObjectByName("emp_id"))</c>
        				<c>gobEditColumn.TextColorExpression = "If(emp_status='T',255,0)"</c>
					</item>
				</list>
				<note>DataWindow expressions expect the tilde (~) as an escape character, as can be seen by the examples above.  ~t is a tab character and ~' indicates a nested single quote.</note>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetProperty(System.String,System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.Describe(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.OleActivate(System.Int32,System.Int16,System.Int16)">
            <summary>Activates Object Linking and Embedding (OLE) for the DataWindow column specified by row and 
         column number and sends a command verb to the OLE server application. 
      </summary><param name="RowNumber">The row containing the OLE-Blob column.</param><param name="ColumnNumber">The number of the OLE-Blob column.</param><param name="OleVerb">The action for the OLE Server to perform. This is usually 0, is dependent on the OLE server.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not valid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is not valid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain an OLE-Blob.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The user can activate the associated OLE server application by double-clicking an OLE blob column in a DataWindow. 
         Use <b>OLEActivate</b> when you want to perform this activation in response to some other event or action, 
         like when the user clicks a button.</para>
				<para>
					<i>OleVerb</i> specifies what action occurs when the OLE server application is invoked.
         The default verb (0) generally means you want to edit the document. Each OLE application has its 
         own particular set of supported verbs. You can find out what verbs the application supports by 
         using the advanced interface of the Windows RegEdit utility (run REGEDIT /V).</para>
				<para>Data for an OLE application is stored in the database as a Binary Large Object (blob).
         In Adaptive Server Anywhere, the datatype of the database column is long binary.</para>
				<para>To make the 
         blob accessible to users, use DataWindow Designer to set up the blob column. You add an OLE Database Blob object
           to 
         the DataWindow object and specify the OLE server application in the Database Binary/Text Large 
         Object dialog box.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.OleActivate(System.Int32,System.String,System.Int16)">
            <overloads>Activates Object Linking and Embedding (OLE) for a DataWindow column and sends
			 a command verb to the OLE server application. </overloads><summary>Activates Object Linking and Embedding (OLE) for the DataWindow column specified by row and 
         column name and sends a command verb to the OLE server application. 
      </summary><param name="RowNumber">The row containing the OLE-Blob column.</param><param name="ColumnName">The name of the OLE-Blob column.</param><param name="OleVerb">The action for the OLE Server to perform. This is usually 0, is dependent on the OLE server.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not valid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is not valid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain an OLE-Blob.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The user can activate the associated OLE server application by double-clicking an OLE blob column in a DataWindow. 
         Use <b>OLEActivate</b> when you want to perform this activation in response to some other event or action, 
         like when the user clicks a button.</para>
				<para>
					<i>OleVerb</i> specifies what action occurs when the OLE server application is invoked.
         The default verb (0) generally means you want to edit the document. Each OLE application has its 
         own particular set of supported verbs. You can find out what verbs the application supports by 
         using the advanced interface of the Windows RegEdit utility (run REGEDIT /V).</para>
				<para>Data for an OLE application is stored in the database as a Binary Large Object (blob).
         In Adaptive Server Anywhere, the datatype of the database column is long binary.</para>
				<para>To make the 
         blob accessible to users, use DataWindow Designer to set up the blob column. You add an OLE Database Blob object
           to 
         the DataWindow object and specify the OLE server application in the Database Binary/Text Large 
         Object dialog box.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.Print">
            <overloads>Prints the DataWindow to the current printer. </overloads><summary>Prints the DataWindow to the current printer.</summary><exception cref="T:System.NotSupportedException">
				<b>Print</b> is not supported for a DataWindowChild that is nested in a composite DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>For a DataStore and DataWindowControl, <b>Print</b> triggers the <see cref="E:Sybase.DataWindow.IDataStore.BeginPrint"/>
			 event just before data is sent to the printer (or 
         spooler), a <see cref="E:Sybase.DataWindow.IDataStore.PagePrinting"/> for each page break, 
         and an <see cref="E:Sybase.DataWindow.IDataStore.EndPrint"/> event when printing is 
         complete.</para>
				<para>Use the overloaded version of <b>Print</b> to display a dialog box allowing the user to cancel the print job.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.PrintCancel"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.Print(System.Boolean)">
            <summary>Prints the DataWindow to the current printer, with the option to display a Cancel dialog box. 
      </summary><param name="ShowCancelDialog">
				<c>true</c> if a dialog box allowing the print job to be canceled is to be displayed, otherwise <c>false</c>.
			</param><exception cref="T:System.NotSupportedException">
				<b>Print</b> is not supported for a DataWindowChild that is nested in a composite DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>For a DataStore and DataWindowControl, <b>Print</b> triggers the <see cref="E:Sybase.DataWindow.IDataStore.BeginPrint"/>
			 event just before data is sent to the printer (or 
         spooler), a <see cref="E:Sybase.DataWindow.IDataStore.PagePrinting"/> for each page break, 
         and an <see cref="E:Sybase.DataWindow.IDataStore.EndPrint"/> event when printing is 
         complete.</para>
				<para>Since a DataStore is non-visual, <i>ShowCancelDialog</i> is always treated as <c>false</c>
         when invoked on a DataStore, and is therefore semantically equivalent to the overload of <b>Print</b> that has no arguments.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.PrintCancel"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.Print(System.Boolean,System.Boolean)">
            <summary>Prints the DataWindow to the current printer, with the option to display a Cancel dialog box
			and an option to display the Print Dialog box.
	        </summary><param name="ShowCancelDialog">
				<c>true</c> if a dialog box allowing the print job to be canceled is to be displayed, otherwise <c>false</c>.
			</param><param name="ShowPrintDialog">
				<c>true</c> if the Print Dialog box is to be displayed, otherwise <c>false</c>.
			</param><exception cref="T:System.NotSupportedException">
				<b>Print</b> is not supported for a DataWindowChild that is nested in a composite DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>For a DataStore and DataWindowControl, <b>Print</b> triggers the <see cref="E:Sybase.DataWindow.IDataStore.BeginPrint"/>
			 event just before data is sent to the printer (or 
         spooler), a <see cref="E:Sybase.DataWindow.IDataStore.PagePrinting"/> for each page break, 
         and an <see cref="E:Sybase.DataWindow.IDataStore.EndPrint"/> event when printing is 
         complete.</para>
				<para>Since a DataStore is non-visual, <i>ShowCancelDialog</i> is always treated as <c>false</c>
         when invoked on a DataStore, and is therefore semantically equivalent to the overload of <b>Print</b> that has no arguments.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.PrintCancel"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.PrintCancel">
            <summary>Cancels printing and deletes the spool file, if any. 
      </summary><returns>
				<c>true</c> if the print job was canceled, <c>false</c> otherwise (including when there is no pending print job).</returns><exception cref="T:System.NotSupportedException">
				<b>PrintCancel</b> is not supported for a DataWindowChild that is nested in a composite DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>PrintCancel cancels the printing of the specified DataWindowChild, DataStore, or DataWindowControl by deleting the spool file, if any, and closing the job. 
      </remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.Print"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.PrintDialog">
            <summary>Invokes the DataWindowControl's print dialog.</summary>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.PrintDialog(System.Boolean)">
            <summary>Invokes the DataWindowControl's print dialog.</summary><param name="showCancelDialog">
				<c>true</c> if a dialog box allowing the print job to be canceled is to be displayed, otherwise <c>false</c>.
			</param>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.ReselectRow(System.Int32)">
            <summary>Refreshes data for a specific row by reretrieving from the database.</summary><param name="RowNumber">The row to be refreshed.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<see cref="M:Sybase.DataWindow.DataWindowControl.SetTransaction(Sybase.DataWindow.AdoTransaction)"/> was not called before <b>ReselectRow</b> for a DataWindowChild.</exception><exception cref="T:Sybase.DataWindow.DbErrorException">A database error has occurred.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<b>ReselectRow</b> is supported for SQL Select DataWindows and can be used to discard values 
         the user has changed and replace them with values from the database after an update fails (due to a 
         concurrent access error, for example).  
      </remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.Retrieve(System.Data.DataTable)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.Reset">
            <summary>Clears all the data from a DataWindow. 
      </summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>Reset</b> is not the same as deleting rows from the DataWindow since it does not move the rows to Delete buffer.  Use
			<b>Reset</b> only to completely discard any data and changes that have been made.</para>
				<para>Use <see cref="M:Sybase.DataWindow.DataWindowControl.RowsDiscard(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer)"/> to clear the data from a specific buffer.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.DeleteRow(System.Int32)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.RowsDiscard(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.ResetUpdateStatus">
            <summary>Clears the status flags in the Primary and Filter buffers and empties the Delete buffer of a
         DataWindow. 
      </summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>When a column is modified, its <see cref="T:Sybase.DataWindow.ItemStatus"/> flag is set, 
				marking it for update. Likewise, when a row is added or deleted, its <see cref="T:Sybase.DataWindow.RowStatus"/> flag is set.
				By default 
         the <see cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/> method clears these flags; however, if you want to coordinate updates of more than one DataWindow, 
         you can defer clearing the status by setting the <i>ResetUpdateFlags</i> argument to 
         <c>false</c>. Then after you verify that all the updates succeeded, you can call <b>ResetUpdateStatus</b>
          for each DataWindow to clear
         the status flags. If one of the updates fails, you can retain the update statuses, prompt the user to fix the problem, and try the
         updates again.</para>
				<para>You can find out which rows are marked for update with the <see cref="M:Sybase.DataWindow.DataWindowControl.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)"/> method.</para>
			</remarks><example>This C# code updates the data without resetting flags and commits it before resetting status flags:
         <code>
         try
         {
            dwEmployee.UpdateData(true, false);
            myTrans.Commit();
            
            // If no exception has been caught, update succeeded
            dwEmployee.ResetUpdateStatus();
         }
         catch (Sybase.DataWindow.DbErrorException dbError)
         {
         	// update failed prompt user to fix the problem
         }
         
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.Retrieve(System.Object[])">
            <summary>Retrieves rows from the database into the DataWindow</summary><returns>The number of rows retrieved.</returns><param name="ArgsList">A list of retrieval arguments to be passed to the SQL statement that is the source of the DataWindow.
			<note>You must use .NET datatypes, 
         such as System.DateTime, in the argument list.</note>
			</param><exception cref="T:Sybase.DataWindow.DbErrorException">A database error has occurred.</exception><exception cref="T:System.InvalidOperationException">
				<see cref="M:Sybase.DataWindow.DataWindowControl.SetTransaction(Sybase.DataWindow.AdoTransaction)"/> has not been called.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>After rows are retrieved, the DataWindow object's filter is applied. Any retrieved rows that do not 
         meet the filter criteria are immediately moved to the Filter buffer and are not included in the return count.</para>
				<para>Before you can retrieve rows, you must specify a transaction object with 
         <see cref="M:Sybase.DataWindow.DataWindowControl.SetTransaction(Sybase.DataWindow.AdoTransaction)"/> and connect to the database. Normally, when you call <b>Retrieve</b>, any rows that are already in the 
         DataWindow are discarded and replaced with the newly retrieved rows. You can set the <i>Action</i> property of the 
         <see cref="T:Sybase.DataWindow.BeginRetrieveEventArgs"/> to <c>AppendRows</c> 
         in the <see cref="E:Sybase.DataWindow.DataWindowControl.BeginRetrieve"/> event to add any 
         retrieved rows to the ones that already exist in the buffers.</para>
				<para>If arguments are expected but not specified, the user is prompted for the retrieval arguments.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.ReselectRow(System.Int32)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetTransaction(Sybase.DataWindow.AdoTransaction)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.RowsCopy(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Copies a range of rows from one DataWindow to another,
         or from one buffer to another within a single DataWindow. 
      </summary><param name="StartRow">The number of the first row you want to copy.</param><param name="EndRow">The number of the last row you want to copy.</param><param name="FromBuffer">The DataWindow buffer from which you want to copy rows.</param><param name="ToDW">The DataWindow to which you want to copy the rows.</param><param name="BeforeRow">The number of the row in <i>ToDW</i> before which you want to insert the copied rows. <note>To insert after the last row, use any value that is greater than the number of existing rows.</note>
			</param><param name="ToBuffer">The DataWindow buffer in <i>ToDW</i> to which the rows should be copied. </param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>StartRow</i> or <i>EndRow</i> is less than 1, or <i>BeforeRow</i> is less than 0.</exception><exception cref="T:System.ArgumentException">
				<list type="bullet">
					<item>
						<i>StartRow</i> &lt; <i>EndRow</i>, or</item>
					<item>Source DataWindow and <i>ToDW</i> are incompatible.</item>
				</list>
			</exception><exception cref="T:System.ArgumentNullException">
				<i>ToDW</i> is null.</exception><exception cref="T:System.NotSupportedException">Source DataWindow or <i>ToDW</i> is a crosstab.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>When you use the <b>RowsCopy</b> method, the status of the rows that are copied to the <i>ToBuffer</i> is set to
         NewAndModified. If you issue an update request, the DataWindow server sends SQL INSERT statements to the database for any 
         new rows in the Primary buffer.</para>
				<para>Data is not automatically retrieved for drop-down DataWindows in <i>ToDW</i>, as it 
         is when you call <see cref="M:Sybase.DataWindow.DataWindowControl.InsertRow"/>. You must explicitly call <see cref="M:Sybase.DataWindow.DataWindowControl.Retrieve(System.Data.DataTable)"/> for child DataWindows in <i>ToDW</i>.</para>
				<para>When you use <b>RowsCopy</b> to populate another DataWindow, the copied data is not automatically processed 
         by filters or sort criteria in effect on the target DataWindow. You may need to call the <see cref="M:Sybase.DataWindow.DataWindowControl.Filter"/>, 
         <see cref="M:Sybase.DataWindow.DataWindowControl.CalculateGroups"/>, or <see cref="M:Sybase.DataWindow.DataWindowControl.Sort"/> methods to properly process the data.</para>
				<para>A DataWindow cannot be in query mode when you call <b>RowsCopy</b>. </para>
			</remarks><example>This Visual Basic subroutine copies rows from the Delete buffer in a DataWindow into the Primary buffer 
			of a DataWindow called <c>dwDelete</c>:
         <code>
         Public Sub RefreshData()
            Dim primary As DataWindowControl
            Dim filterCount As Integer
         
            Try
               dwDelete.Reset()
               primary = buffersForm.GetPrimaryControl
               filterCount = primary.DeletedCount
               
               'Use the RowsCopy function to copy the rows from the
               'deleted buffer in the primary DataWindow into the DataWindow
               'on this window.
               If filterCount &gt; 0 Then
                  primary.RowsCopy(1, filterCount, DataBuffer.Delete, dwDelete, 1, DataBuffer.Primary)
               End If
            Catch ex As Exception
               ErrorHandler.HandleException(ex)
            End Try
         End Sub
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowControl.RowsDiscard(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.RowsMove(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.RowsDiscard(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Discards a range of rows in a DataWindow control.</summary><param name="StartRow">The number of the first row you want to discard.</param><param name="EndRow">The number of the last row you want to discard.</param><param name="Buffer">The DataWindow buffer from which you want to discard the rows.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>StartRow</i> or <i>EndRow</i> is less than 1.</exception><exception cref="T:System.ArgumentException">
				<i>StartRow</i> is less than <i>EndRow</i>.</exception><exception cref="T:System.NotSupportedException">
				<b>RowsDiscard</b> is not supported for crosstab DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Once a row has been discarded using <b>RowsDiscard</b>, you cannot restore the row. 
			You have to retrieve it again from the database.</para>
				<para>Use <b>RowsDiscard</b> when your application has finished with rows in a DataWindow, and you do not
         want an update to affect the database. For example, you can discard rows in the Delete buffer to 
         prevent the associated rows from being removed from the database when you call <see cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/>. </para>
				<para>Use <see cref="M:Sybase.DataWindow.DataWindowControl.Reset"/> to clear all the rows 
         from all three buffers of a DataWindow.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.RowsCopy(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.RowsMove(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.Reset"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.RowsMove(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Removes a range of rows from one DataWindow and inserts them into another, or moves them from one buffer to another within a single DataWindow. 
      </summary><param name="StartRow">The number of the first row you want to move.</param><param name="EndRow">The number of the last row you want to move.</param><param name="FromBuffer">The DataWindow buffer from which you want to move rows.</param><param name="ToDW">The DataWindow to which you want to move the rows.</param><param name="BeforeRow">The number of the row in <i>ToDW</i> before which you want to insert the relocated rows. <note>To insert after the last row, use any value that is greater than the number of existing rows.</note>
			</param><param name="ToBuffer">The DataWindow buffer in <i>ToDW</i> to which the rows should be moved.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>StartRow</i> or <i>EndRow</i> is less than 1, or <i>BeforeRow</i> is less than 0.</exception><exception cref="T:System.ArgumentException">
				<list type="bullet">
					<item>
						<i>StartRow</i> &lt; <i>EndRow</i>, or</item>
					<item>Source DataWindow and <i>ToDW</i> are incompatible.</item>
				</list>
			</exception><exception cref="T:System.ArgumentNullException">
				<i>ToDW</i> is null.</exception><exception cref="T:System.NotSupportedException">Source DataWindow or <i>ToDW</i> is a crosstab.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>When you use <b>RowsMove</b>, the rows have the status NewAndModified in <i>ToDW</i>. If you move rows 
         between buffers within a single DataWindow, knowledge of the rows' origin is taken into account to change their 
         status. For example, if you move unmodified rows from the Primary buffer to 
         the Delete buffer, they are marked for deletion. If you move the rows back to the Primary buffer, their status returns 
         to NotModified; however, if you move a row from one DataWindow control (or DataStore) to another and back 
         again, the <see cref="T:Sybase.DataWindow.RowStatus"/> changes to NewAndModified because it came from a different DataWindow.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.RowsCopy(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.RowsDiscard(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)">
            <overloads>Saves the contents of a DataWindow in the specified format. </overloads><summary>Saves the contents, including column headers, of a DataWindow in the format specified.</summary><param name="FileName">The name of the file in which to save the DataWindow contents.</param><param name="SaveAsType">The format in which to save the DataWindow contents.</param><exception cref="T:System.ArgumentNullException">
				<i>FileName</i> is null or an empty string ("").</exception><exception cref="T:System.IO.PathTooLongException">
				<i>FileName</i> contains more than 248 characters. </exception><exception cref="T:System.NotSupportedException"><b>SaveAs</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The file is saved with UTF-16LE encoding. To specify a different encoding, use the overloaded version of <b>SaveAs</b> that
			accepts a parameter of type <see cref="T:Sybase.DataWindow.FileSaveAsEncoding"/>
				</para>
				<para>Report format (PSReport value of <see cref="T:Sybase.DataWindow.FileSaveAsType"/>) is the best choice if the DataWindow is a composite report.</para>
				<para>For Xml, the XML logical structure used is based on the current XML export template for the DataWindow object. You can 
         change the export template by setting the <c>Export.XML.UseTemplate</c> DataWindow object property. If no export 
         template is specified, the default template is used.</para>
				<para>When you save the contents of a DataWindow to a text file, double quotes are handled in a way that enables the 
         <see cref="M:Sybase.DataWindow.DataWindowControl.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/> function to produce the same DataWindow when the text file is imported back into the application. 
         Any field 
         that is enclosed in a pair of double quotes is wrapped with three pairs of double quotes in the saved text file. 
         Double quotes at the beginning of a text field that have no matching double quotes at the end of the field are also 
         replaced by three double quotes in the saved text file. A double quote elsewhere in the field is saved as 
         one double quote. </para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SaveAsFormattedText(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType,System.Boolean)">
            <summary>Saves the contents, optionally including column headers, of a DataWindow in the format specified.
      </summary><param name="FileName">The name of the file in which to save the DataWindow contents.</param><param name="SaveAsType">The format in which to save the DataWindow contents.</param><param name="IncludeColumnHeaders">
				<c>true</c> if DataWindow column headings should be included, <c>false</c> otherwise.
			<note>This value is ignored (and treated as <c>true</c>) for formats other than Clipboard, CSV, Excel, and Text.</note>
			</param><exception cref="T:System.ArgumentNullException">
				<i>FileName</i> is null or an empty string ("").</exception><exception cref="T:System.IO.PathTooLongException">
				<i>FileName</i> contains more than 248 characters. </exception><exception cref="T:System.NotSupportedException"><b>SaveAs</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The file is saved with UTF-16LE encoding. To specify a different encoding, use the overloaded version of <b>SaveAs</b> that
			accepts a parameter of type <see cref="T:Sybase.DataWindow.FileSaveAsEncoding"/>
				</para>
				<para>Report format (PSReport value of <see cref="T:Sybase.DataWindow.FileSaveAsType"/>) is the best choice if the DataWindow is a composite report.</para>
				<para>For Xml, the XML logical structure used is based on the current XML export template for the DataWindow object. You can 
         change the export template by setting the <c>Export.XML.UseTemplate</c> DataWindow object property. If no export 
         template is specified, the default template is used.</para>
				<para>When you save the contents of a DataWindow to a text file, double quotes are handled in a way that enables the 
         <see cref="M:Sybase.DataWindow.DataWindowControl.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/> function to produce the same DataWindow when the text file is imported back into the application. 
         Any field 
         that is enclosed in a pair of double quotes is wrapped with three pairs of double quotes in the saved text file. 
         Double quotes at the beginning of a text field that have no matching double quotes at the end of the field are also 
         replaced by three double quotes in the saved text file. A double quote elsewhere in the field is saved as 
         one double quote. </para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SaveAsFormattedText(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType,System.Boolean,Sybase.DataWindow.FileSaveAsEncoding)">
            <summary>Saves the contents, optionally including column headers, of a DataWindow with the specified format and encoding.</summary><param name="FileName">The name of the file in which to save the DataWindow contents.</param><param name="SaveAsType">The format in which to save the DataWindow contents.</param><param name="IncludeColumnHeaders">
				<c>true</c> if DataWindow column headings should be included, <c>false</c> otherwise.
			<note>This value is ignored (and treated as <c>true</c>) for formats other than Clipboard, CSV, Excel, and Text.</note>
			</param><param name="Encoding">The character encoding used for the file.</param><exception cref="T:System.ArgumentNullException">
				<i>FileName</i> is null or an empty string ("").</exception><exception cref="T:System.IO.PathTooLongException">
				<i>FileName</i> contains more than 248 characters. </exception><exception cref="T:System.NotSupportedException"><b>SaveAs</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Report format (PSReport value of <see cref="T:Sybase.DataWindow.FileSaveAsType"/>) is the best choice if the DataWindow is a composite report.</para>
				<para>For Xml, the XML logical structure used is based on the current XML export template for the DataWindow object. You can 
         change the export template by setting the <c>Export.XML.UseTemplate</c> DataWindow object property. If no export 
         template is specified, the default template is used.</para>
				<para>When you save the contents of a DataWindow to a text file, double quotes are handled in a way that enables the 
         <see cref="M:Sybase.DataWindow.DataWindowControl.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/> function to produce the same DataWindow when the text file is imported back into the application. 
         Any field 
         that is enclosed in a pair of double quotes is wrapped with three pairs of double quotes in the saved text file. 
         Double quotes at the beginning of a text field that have no matching double quotes at the end of the field are also 
         replaced by three double quotes in the saved text file. A double quote elsewhere in the field is saved as 
         one double quote. </para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SaveAsFormattedText(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SaveAsFormattedText(System.String)">
            <overloads>Saves the contents of a DataWindow as a Unicode text file.</overloads><summary>Saves the contents of a DataWindow as a Unicode text file using default formatting. 
      </summary><param name="FileName">The name of the file in which to save the DataWindow contents.</param><exception cref="T:System.ArgumentNullException">
				<i>FileName</i> is null or an empty string ("").</exception><exception cref="T:System.IO.PathTooLongException">
				<i>FileName</i> contains more than 248 characters. </exception><exception cref="T:System.NotSupportedException"><b>SaveAsFormattedText</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>SaveAsFormattedText</b> is similar to <see cref="M:Sybase.DataWindow.DataWindowControl.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/> with the Text <see cref="T:Sybase.DataWindow.FileSaveAsType"/>;
				however, <b>SaveAsFormattedText</b>
         formats the text and saves column headers as they are displayed in the DataWindow instead of as the 
         column name. For example, if the heading for the <c>cust_id</c> column is "Customer ID", <b>SaveAsFormattedText</b> saves 
         "Customer ID" to the text file, whereas <see cref="M:Sybase.DataWindow.DataWindowControl.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/> saves "cust_id". 
         <b>SaveAsFormattedText</b> also saves computed fields, and the overloaded 
         version of the method 
         allows you to customize formats in the file and specify the file encoding.</para>
				<para>In the default formatting implemented by this method, values are wrapped in double quotes and separated by tabs. 
         A newline character is placed at the end of each line. 
         Line feed and carriage return characters within each row are converted to white space. 
         The file is saved with UFT-16LE encoding.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SaveAsFormattedText(System.String,System.String,System.String,System.String,System.Boolean,Sybase.DataWindow.FileSaveAsEncoding)">
            <summary>Saves the contents of a DataWindow as a Unicode text file with user-specified formatting. 
      </summary><param name="FileName">The name of the file in which to save the DataWindow contents.</param><param name="Separator">The character to be used to delimit values. </param><param name="Quote">The character to be used to wrap values. </param><param name="LineEnd">The character to be use as an end-of-line marker.</param><param name="RetainDataNewLineChar">
				<c>true</c> if line feed and carriage return characters should be retained, <c>false</c> if
			they should be converted to white space</param><param name="Encoding">The character encoding used for the file.</param><exception cref="T:System.ArgumentNullException">
				<i>FileName</i> is null or an empty string ("").</exception><exception cref="T:System.IO.PathTooLongException">
				<i>FileName</i> contains more than 248 characters. </exception><exception cref="T:System.NotSupportedException"><b>SaveAsFormattedText</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>SaveAsFormattedText</b> is similar to <see cref="M:Sybase.DataWindow.DataWindowControl.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/> with the Text <see cref="T:Sybase.DataWindow.FileSaveAsType"/>;
				however, <b>SaveAsFormattedText</b>
         formats the text and saves column headers as they are displayed in the DataWindow instead of as the 
         column name. For example, if the heading for the <c>cust_id</c> column is "Customer ID", <b>SaveAsFormattedText</b> saves 
         "Customer ID" to the text file, whereas <see cref="M:Sybase.DataWindow.DataWindowControl.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/> saves "cust_id". 
         <b>SaveAsFormattedText</b> also saves computed fields, and the overloaded 
         version of the method 
         allows you to customize formats in the file and specify the file encoding.</para>
			</remarks><example>This statement saves the contents of <c>dwQuarter</c> to the file <c>H:\Q2\results.txt</c>. The saved file has 
         ANSI encoding with the hash mark (#) as the separator character, single quote (') as the value delimiter, 
         and the default line ending. Computed columns are included with the saved information, and line 
         feed and carriage return characters within column data are converted to white space.
         <code>dwQuarter.SaveAsFormattedText("H:\Q2\results.txt","#","'","\n", false, Sybase.FileSaveAsEncoding.Ansi)</code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowControl.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.Scroll(Sybase.DataWindow.ScrollAction)">
            <summary>Scrolls the DataWindowControl to the beginning or end or one line or page in either direction.
      </summary><returns>The number of the first visible row in the DataWindowControl. </returns><param name="Type">The <see cref="T:Sybase.DataWindow.ScrollAction"/> to be performed.</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>To scroll to a specific row in the DataWindowControl, use <see cref="M:Sybase.DataWindow.DataWindowControl.ScrollToRow(System.Int32)"/>.</para>
			</remarks><example>This code for a Prior button scrolls to the previous row in the DataWindow dwEmp:
         <code>
         [Visual Basic]
         Private Sub btnPrior_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnPrior.Click
            Try
               '
               ' Scroll to prior row.
               '
               iRowNo = dwEmp.Scroll(Sybase.DataWindow.ScrollAction.ScrollPriorRow)
         
            Catch ex As Exception
               ErrorHandler.HandleException(ex)
            End Try
         End Sub
         
         </code>
				<code>
         [C#]
         private void btnPrior_Click(object sender, System.EventArgs e)
            try
            {
               // Scroll to prior row.
               iRowNo = dwBasic.Scroll(Sybase.DataWindow.ScrollAction.ScrollPriorRow);
            }
         
            catch (Exception ex)
            {
               ErrorHandler.HandleException(ex);
            }
         }
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowControl.ScrollToRow(System.Int32)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.ScrollToRow(System.Int32)">
            <summary>Scrolls to the specified row within a DataWindowControl. 
      </summary><returns>The number of the first visible row in the DataWindowControl. </returns><param name="RowNumber">The row number to which to scroll.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is less than 1.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>After you call <b>ScrollToRow</b>, the specified row becomes the new current row. If that row is already visible, 
         the displayed rows do not change. If it is not visible, the DataWindowControl is scrolled so that the target row 
         is displayed.</para>
				<para>
					<b>ScrollToRow</b> 
         does not highlight the row; that is accomplished using <see cref="M:Sybase.DataWindow.DataWindowControl.SelectRow(System.Int32,System.Boolean)"/>.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.Scroll(Sybase.DataWindow.ScrollAction)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SelectRow(System.Int32,System.Boolean)">
            <summary>Add or removes highlighting (reverse video) from a row within a DataWindowControl.      </summary><param name="RowNumber">The row to be affected; specify 0 to target all rows.</param><param name="Select">
				<c>true</c> if the row(s) should be highlighted, <c>false</c>
			if highlighting should be removed.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><example>The following code, selects the current row after clearing the highlighting from any previously selected row:
         <code>
         dwEmployee.SelectRow(0, false);
         dwEmployee.SelectRow(dwEmployee.CurrentRow, true);
         </code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SelectTreeNode(System.Int32,System.Int32,System.Boolean)">
            <summary>
				Selects or deselects a TreeView node in a TreeView DataWindow, which has the specified group level and includes the specified row.
			</summary><param name="RowNumber">
				The number of the row that belongs to the group of the TreeView node that will be selected or deselected.
			</param><param name="GroupLevel">
				The level of the group of the TreeView node that will be selected or deselected.
			</param><param name="Selected">
				<c>true</c> if the node should be selected, <c>false</c>
				if selection of the node should be deselected.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetChanges(Sybase.DataWindow.DataWindowChanges)">
            <summary>Applies changes captured with <see cref="M:Sybase.DataWindow.DataWindowControl.GetChanges"/> to a DataWindowControl or DataStore. 
      </summary><param name="Changes">A <see cref="T:Sybase.DataWindow.DataWindowChanges"/> object containing the modifications to be applied.</param><exception cref="T:System.ArgumentNullException">
				<i>Changes</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This method in conjunction with <see cref="M:Sybase.DataWindow.DataWindowControl.GetChanges"/> to synchronize two or more DataWindowControls or DataStores and is
				designed specifically for use in
				.NET remoting applications.  <see cref="T:Sybase.DataWindow.DataWindowChanges"/> is a serializable object allowing DataWindow
				changes made in a client application space to be transferred to a server application where the changes can be applied to
				the backend database.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetChanges"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetFullState(Sybase.DataWindow.DataWindowFullState)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl._SetChanges(Sybase.DataWindow.DataWindowChanges,System.Int32@)">
            <summary>
            This method is designed for DataWindow .NET internal usage only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetColumn(System.Int16)">
            <overloads>Sets the current column in a DataWindow. </overloads><summary>Sets the current column in a DataWindow given the column number. 
      </summary><param name="ColumnNumber">The column number to be made current.</param><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is not valid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> cannot be made current, because it is not editable.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Only editable columns, that is columns with a <see cref="P:Sybase.DataWindow.GraphicObjectEditableColumn.TabOrder"/> greater than 0, can be current.
				A <see cref="T:System.InvalidOperationException"/> will occur if you attempt to make a noneditable column the current column.</para>
				<para>
					<b>SetColumn</b> can trigger the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/>, <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/>, 
				and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemFocusChanged"/> events. Calling <b>SetColumn</b> in any of these events could result in an infinite loop.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetColumnNumber"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetColumn(System.String)">
            <summary>Sets the current column in a DataWindow given the column name. 
      </summary><param name="ColumnName">The name of column to be made current.</param><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is not valid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> cannot be made current, because it is not editable.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Only editable columns, that is columns with a <see cref="P:Sybase.DataWindow.GraphicObjectEditableColumn.TabOrder"/> greater than 0, can be current.
				A <see cref="T:System.InvalidOperationException"/> will occur if you attempt to make a noneditable column the current column.</para>
				<para>
					<b>SetColumn</b> can trigger the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/>, <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/>, 
				and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemFocusChanged"/> events. Calling <b>SetColumn</b> in any of these events could result in an infinite loop.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetColumnName"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetColumnValidation(System.Int16,System.String)">
            <overloads>Changes the validation rule for a column in a DataWindow. </overloads><summary>Changes the validation rule for a DataWindow column identified by number. 
      </summary><param name="ColumnNumber">The column number for which you want to set the validation rule.</param><param name="ValidationRule">The new validation rule for the column.</param><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is not valid.</exception><exception cref="T:Sybase.DataWindow.InvalidExpressionException">
				<i>ValidationRule</i> is not a valid boolean DataWindow expression.</exception><exception cref="T:System.ArgumentNullException">
				<i>ValidationRule</i> is null.</exception><exception cref="T:System.NotSupportedException">
				<b>SetColumnValidation</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Validation rules are boolean expressions that usually compare the value in the column's 
         edit control (obtained using <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>) to some other value. 
         When data the user enters fails to meet the criteria 
         established by the validation rule, an <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> event occurs. 
         You can specify validation rules at design time in DataWindow Designer, and you can change the rules in code using 
         <b>SetColumnValidation</b>. A validation rule can include any DataWindow expression function.</para>
				<para>For information about DataWindow expression functions and validation rules, see the 
         DataWindow Designer <i>User's Guide</i>.</para>
			</remarks><example>The following assigns a validation rule to the current column in <c>dwEmployee</c>. The rule ensures 
         that the data entered is greater than zero:
         <code>dwEmployee.SetColumnValidation(dwEmployee.GetColumnNumber(), "Number(GetText( )) &gt; 0")</code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetColumnValidation(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetColumnValidation(System.String,System.String)">
            <summary>Changes the validation rule for a DataWindow column identified by name. 
      </summary><param name="ColumnName">The column name for which you want to set the validation rule.</param><param name="ValidationRule">The new validation rule for the column.</param><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is not valid.</exception><exception cref="T:Sybase.DataWindow.InvalidExpressionException">
				<i>ValidationRule</i> is not a valid boolean DataWindow expression.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> or <i>ValidationRule</i> is null.</exception><exception cref="T:System.NotSupportedException">
				<b>SetColumnValidation</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Validation rules are boolean expressions that usually compare the value in the column's 
         edit control (obtained using <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>) to some other value. 
         When data the user enters fails to meet the criteria 
         established by the validation rule, an <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> event occurs. 
         You can specify validation rules at design time in DataWindow Designer, and you can change the rules in code using 
         <b>SetColumnValidation</b>. A validation rule can include any DataWindow expression function.</para>
				<para>For information about DataWindow expression functions and validation rules, see the 
         DataWindow Designer <i>User's Guide</i>.</para>
			</remarks><example>The following assigns a validation rule to the current column in <c>dwEmployee</c>. The rule ensures 
         that the data entered is greater than zero:
         <code>dwEmployee.SetColumnValidation(dwEmployee.GetColumnName(), "Number(GetText( )) &gt; 0")</code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetColumnValidation(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetDetailHeight(System.Int32,System.Int32,System.Int32)">
            <summary>Sets the height of each row in the specified range to the specified value. 
      </summary><param name="StartRow">The first row in the range of rows for which you want to set the height.</param><param name="EndRow">The last row in the range of rows for which you want to set the height.</param><param name="NewHeight">The height of the detail area for the specified rows in the <see cref="T:Sybase.DataWindow.Units"/> specified for the DataWindow object.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>StartRow</i> or <i>EndRow</i> is less than 1.</exception><exception cref="T:System.ArgumentException">
				<i>EndRow</i> &lt; <i>StartRow</i>.</exception><exception cref="T:System.ArgumentOutOfRangeException">
				<i>NewHeight</i> is less than 0.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Call <b>SetDetailHeight</b> in code to vary the amount of space assigned to rows in a DataWindow.
			 You cannot specifically set the height for different rows when you define a 
         DataWindow object in DataWindow Designer; however, you can turn on the Autosize Height property 
         for the detail band so that the height of each row is determined by the data.</para>
				<para>You can set the detail 
         height of one or more rows to zero, which hides them from view.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetFilter(System.String)">
            <summary>Sets the filter criteria for a DataWindow.</summary><param name="FilterExpression">A string whose value is a boolean expression.</param><exception cref="T:Sybase.DataWindow.InvalidExpressionException">
				<i>FilterExpression</i> is not a valid boolean DataWindow expression.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>
				<para>A DataWindow object can have a filter criteria specified as part of its definition. After data is 
         retrieved, rows that do not meet the criteria are immediately transferred from the Primary buffer to the 
         Filter buffer. The <b>SetFilter</b> method replaces any existing filter criteria.</para>
				<para>Rows for which <i>FilterExpression</i> evaluates to <c>false</c> will be moved to the Filter buffer when the <see cref="M:Sybase.DataWindow.DataWindowControl.Filter"/>
			method is subsequently invoked.</para>
				<para>
					<i>FilterExpression</i> can consist of columns (identified by name or number), relational operators, 
				and values against which column values 
         are compared. Boolean expressions can be connected with logical operators AND and OR. You can also use NOT, 
         the negation operator. Use parentheses to control the order of evaluation.</para>
				<para>Sample expressions include:</para>
				<list type="bullet">
					<item>
						<c>item_id &gt; 5</c>
					</item>
					<item>
						<c>NOT item_id = 5</c>
					</item>
					<item>
						<c>(NOT item_id = 5) AND customer &gt; "Mabson"</c>
					</item>
					<item>
						<c>item_id &gt; 5 AND customer = "Smith"</c>
					</item>
					<item>
						<c>#1 &gt; 5 AND #2 = "Smith"</c>
					</item>
				</list>
				<para>If you build a <i>FilterExpression</i> in code, enclose string constants in quotation marks, and
				 format numbers using U.S. format (period as decimal separator). </para>
				<para>To remove a filter, call <b>SetFilter</b> with the empty string ("") for format and then call <see cref="M:Sybase.DataWindow.DataWindowControl.Filter"/>.
				 The rows 
         in the filter buffer will be restored to the Primary buffer and positioned after the rows that already exist 
         there.</para>
				<para>To allow users to specify their own filter expression for a DataWindowControl, 
				call <see cref="M:Sybase.DataWindow.DataWindowControl.FilterDialog"/> to display a dialog box allowing for the constructon of a filter expression. 
         Then you can call <see cref="M:Sybase.DataWindow.DataWindowControl.Filter"/> to apply the dynamically constructed expression to the DataWindowControl.
				</para>
			</remarks><example>The following code defines a filter so that rows within <c>dwEmployee</c> display only if the <c>emp_state</c> field
			matches the current value of <c>var1</c>, in this case "ME" for Maine.
         <code>
         [C#]
         string strState;
         strState = "ME";
         dwEmployee.SetFilter("emp_state = '"+ strState +" '");
         dwEmployee.Filter();
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetFilter(System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.Filter"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetFullState(Sybase.DataWindow.DataWindowFullState)">
            <summary>Applies the DataWindow state obtained by <see cref="M:Sybase.DataWindow.DataWindowControl.GetFullState"/> to another DataWindowControl or DataStore. 
      </summary><param name="FullState">A <see cref="T:Sybase.DataWindow.DataWindowFullState"/> object containing the data and status information to be applied.</param><exception cref="T:System.ArgumentNullException">
				<i>FullState</i> is null.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<see cref="M:Sybase.DataWindow.DataWindowControl.GetFullState"/> retrieves the entire state of a DataWindowControl or DataStore including the DataWindow object 
				specification, the data buffers, and the status flags in a format that can be serialized over application boundaries in .NET remoting applications. 
				When you use <b>SetFullState</b> 
         to apply <i>FullState</i>, the target DataWindow has 
         enough information to recreate the source DataWindow. </para>
				<para>Because <i>FullState</i> contains the DataWindow object specification, 
         the call to <b>SetFullState</b> will overwrite the DataWindow object current stored in the targeted DataWindow. 
         If the target of <b>SetFullState</b> does not have a DataWindow object associated with it, the DataWindow object associated 
         with <i>FullState</i> is used. The value of the <see cref="P:Sybase.DataWindow.DataWindowControl.DataWindowObject"/> property remains an empty string (""), however.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetFullState"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetChanges(Sybase.DataWindow.DataWindowChanges)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl._SetFullState(Sybase.DataWindow.DataWindowFullState,System.Int32@)">
            <summary>
            This method is designed for DataWindow .NET internal usage only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetHtmlAction(System.String,System.String)">
            <summary>Accepts action and context information about user interaction with a DataWindow control on a Web Form in a Web browser
         so that newly generated HTML can reflect any requested changes. 
      </summary><param name="Action">A string describing an action associated with a button click or method call in a DataWindow control on a Web page. </param><param name="Context">A string describing the context of the action parameter in the DataWindow control. </param><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetItemDate(System.Int32,System.Int16,System.DateTime)">
            <overloads>Sets the value of a DataWindow Date column. </overloads><summary>Sets the Date value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="DateValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store Date values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDate</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDate</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDate</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDate(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetItemDate(System.Int32,System.String,System.DateTime)">
            <summary>Sets the Date value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="DateValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store Date values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDate</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDate</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDate</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDate(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetItemDateTime(System.Int32,System.Int16,System.DateTime)">
            <overloads>Sets the value of a DataWindow DateTime column. </overloads><summary>Sets the DateTime value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="DateTimeValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store DateTime values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDateTime</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDateTime</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDateTime</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDate(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDateTime(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetItemDateTime(System.Int32,System.String,System.DateTime)">
            <summary>Sets the DateTime value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="DateTimeValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store DateTime values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDateTime</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDateTime</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDateTime</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDate(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDateTime(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)">
            <overloads>Sets the value of a DataWindow DateTime column. </overloads><summary>Sets the DateTime value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="DateTimeValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store DateTime values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlDateTime</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlDateTime</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlDateTime</b> to override the user's erroneous entry with valid data.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDate(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDateTime(System.Int32,System.String,System.Data.SqlTypes.SqlDateTime)">
            <summary>Sets the Decimal value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="DateTimeValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store DateTime values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlDateTime</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlDateTime</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlDateTime</b> to override the user's erroneous entry with valid data.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDate(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetItemDecimal(System.Int32,System.Int16,System.Decimal)">
            <overloads>Sets the value of a DataWindow Decimal column. </overloads><summary>Sets the Decimal value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="DecimalValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store Decimal values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDecimal</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDecimal</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDecimal</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDecimal(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetItemDecimal(System.Int32,System.String,System.Decimal)">
            <summary>Sets the Decimal value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="DecimalValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store Decimal values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDecimal</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDecimal</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDecimal</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDecimal(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)">
            <overloads>Sets the value of a DataWindow Decimal column. </overloads><summary>Sets the Decimal value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="DecimalValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store Decimal values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlDecimal</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlDecimal</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlDecimal</b> to override the user's erroneous entry with valid data.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDecimal(System.Int32,System.Int16,System.Decimal)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDecimal(System.Int32,System.String,System.Data.SqlTypes.SqlDecimal)">
            <summary>Sets the Decimal value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="DecimalValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store Decimal values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlDecimal</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlDecimal</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlDecimal</b> to override the user's erroneous entry with valid data.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDecimal(System.Int32,System.Int16,System.Decimal)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetItemDouble(System.Int32,System.Int16,System.Double)">
            <overloads>Sets the value of a DataWindow integer or floating point column. </overloads><summary>Sets the value of an integer or floating point column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number for which you want to set the value.</param><param name="ColumnNumber">The column number for which you want to set the value.</param><param name="DoubleValue">The value to which you want to set the data at the row and column location.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store numeric values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDouble</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDouble</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDouble</b> to override the user's erroneous entry with valid data.</para>
				<para>If the underlying DataWindow column type is long or ulong, <i>DoubleValue</i> is truncated before being stored in the DataWindow.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDouble(System.Int32,System.String,System.Data.SqlTypes.SqlDouble)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDouble(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetItemDouble(System.Int32,System.String,System.Double)">
            <summary>Sets the value of an integer or floating point column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number for which you want to set the value.</param><param name="ColumnName">The column name for which you want to set the value.</param><param name="DoubleValue">The value to which you want to set the data at the row and column location.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store numeric values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDouble</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDouble</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDouble</b> to override the user's erroneous entry with valid data.</para>
				<para>If the underlying DataWindow column type is long or ulong, <i>DoubleValue</i> is truncated before being stored in the DataWindow.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDouble(System.Int32,System.String,System.Data.SqlTypes.SqlDouble)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemDouble(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetItemNull(System.Int32,System.Int16)">
            <overloads>Sets the value of a column to null. </overloads><summary>Sets to null  the value of the column, identified by number, in the specified row of the Primary buffer.
      </summary><param name="RowNumber">The row number containing the column.</param><param name="ColumnNumber">The number of the column to be set to null.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.NotSupportedException"><b>SetItemNull</b> is not supported for crosstab DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemNull</b> to set a column value to null before writing it to the database. Alternatively, 
         you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDouble(System.Int32,System.String,System.Data.SqlTypes.SqlDouble)"/>, <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)"/>, <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/>, or
         <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)"/> method, since they accept System.Data.SqlTypes datatypes, which support the direct assignment of a null
         value.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetItemNull(System.Int32,System.String)">
            <summary>Sets to null  the value of the column, identified by number, in the specified row of the Primary buffer.
      </summary><param name="RowNumber">The row number containing the column.</param><param name="ColumnName">The name of the column to be set to null.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.NotSupportedException"><b>SetItemNull</b> is not supported for crosstab DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemNull</b> to set a column value to null before writing it to the database. Alternatively, 
         you can use the <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDouble(System.Int32,System.String,System.Data.SqlTypes.SqlDouble)"/>, <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)"/>, <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/>, or
         <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)"/> method, since they accept System.Data.SqlTypes datatypes, which support the direct assignment of a null
         value.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.IsItemNull(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDouble(System.Int32,System.String,System.Data.SqlTypes.SqlDouble)">
            <summary>Sets the value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="DoubleValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store numeric values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlDouble</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlDouble</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlDouble</b> to override the user's erroneous entry with valid data.</para>
				<para>If the underlying DataWindow column type is long or ulong, <i>DoubleValue</i> is truncated before being stored in the DataWindow.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDouble(System.Int32,System.Int16,System.Double)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDouble(System.Int32,System.Int16,System.Data.SqlTypes.SqlDouble)">
            <overloads>Sets the value of a DataWindow integer or floating point column. </overloads><summary>Sets the value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="DoubleValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store numeric values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlDouble</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlDouble</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlDouble</b> to override the user's erroneous entry with valid data.</para>
				<para>If the underlying DataWindow column type is long or ulong, <i>DoubleValue</i> is truncated before being stored in the DataWindow.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDouble(System.Int32,System.Int16,System.Double)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.ItemStatus)">
            <overloads>Changes the modification status of a column within a row. </overloads><summary>Changes the modification status of the column, specified by number, within a row. 
      </summary><param name="RowNumber">The row number containing the column.</param><param name="ColumnNumber">The number of the column for which you want to set the status.</param><param name="Buffer">The DataWindow buffer that contains the row.</param><param name="Status">The new <see cref="T:Sybase.DataWindow.ItemStatus"/>.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not a valid row in <i>Buffer</i>.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> in not valid.</exception><exception cref="T:System.NotSupportedException"><b>SetItemStatus</b> is not supported for crosstab DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<see cref="M:Sybase.DataWindow.DataWindowControl.SetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.RowStatus)"/> changes the modification status of a row; <b>SetItemStatus</b> changes 
         the modification status of an item within a row.</para>
				<para>When data is retrieved into a DataWindow, all rows and columns initially have a status of NotModified. After 
         data has changed in a column in a particular row, either because the user changed the data or the data was changed 
         programmatically, the item status for that column changes to Modified. Once the status for any column in a row changes to Modified,
          the row status also changes to Modified.</para>
				<para>When a row is inserted into a DataWindow, it initially has a row status of New, and all columns in that 
         row initially have an item status of NotModified. After data has changed in a column in the row, either because 
         the user changed the data or the data was changed programmatically, the item status changes to Modified. Once 
         the status for any column in the inserted row changes to Modified, the row status changes to NewAndModified.
         When a DataWindow column has a default value, the column's item status does not change to Modified until the 
         user makes at least one actual change to a column in that row.</para>
				<para>Use <b>SetItemStatus</b> to change the column's status from Modified to NotModified or vice versa. A column marked as NotModified
				will not be included in any UPDATE statements issued by <see cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/>.</para>
				<para>For more information about setting the status of rows and columns, see the section on updating the 
         database in the <i>DataWindow .NET Programmer's Guide</i>.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.RowStatus)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetItemStatus(System.Int32,System.String,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.ItemStatus)">
            <summary>Changes the modification status of the column, specified by name, within a row. 
      </summary><param name="RowNumber">The row number containing the column.</param><param name="ColumnName">The name of the column for which you want to set the status.</param><param name="Buffer">The DataWindow buffer that contains the row.</param><param name="Status">The new <see cref="T:Sybase.DataWindow.ItemStatus"/>.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not a valid row in <i>Buffer</i>.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> in not valid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.NotSupportedException"><b>SetItemStatus</b> is not supported for crosstab DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<see cref="M:Sybase.DataWindow.DataWindowControl.SetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.RowStatus)"/> changes the modification status of a row; <b>SetItemStatus</b> changes 
         the modification status of an item within a row.</para>
				<para>When data is retrieved into a DataWindow, all rows and columns initially have a status of NotModified. After 
         data has changed in a column in a particular row, either because the user changed the data or the data was changed 
         programmatically, the item status for that column changes to Modified. Once the status for any column in a row changes to Modified,
          the row status also changes to Modified.</para>
				<para>When a row is inserted into a DataWindow, it initially has a row status of New, and all columns in that 
         row initially have an item status of NotModified. After data has changed in a column in the row, either because 
         the user changed the data or the data was changed programmatically, the item status changes to Modified. Once 
         the status for any column in the inserted row changes to Modified, the row status changes to NewAndModified.
         When a DataWindow column has a default value, the column's item status does not change to Modified until the 
         user makes at least one actual change to a column in that row.</para>
				<para>Use <b>SetItemStatus</b> to change the column's status from Modified to NotModified or vice versa. A column marked as NotModified
				will not be included in any UPDATE statements issued by <see cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/>.</para>
				<para>For more information about setting the status of rows and columns, see the section on updating the 
         database in the <i>DataWindow .NET Programmer's Guide</i>.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.RowStatus)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetItemString(System.Int32,System.Int16,System.String)">
            <overloads>Sets the value of a DataWindow String column. </overloads><summary>Sets the String value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="StringValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store String values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemString</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemString</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemString</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemString(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetItemString(System.Int32,System.String,System.String)">
            <summary>Sets the String value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="StringValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store String values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemString</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemString</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemString</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemString(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)">
            <summary>Sets the String value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="StringValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store String values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlString</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlString</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlString</b> to override the user's erroneous entry with valid data.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemString(System.Int32,System.Int16,System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetItemSqlString(System.Int32,System.Int16,System.Data.SqlTypes.SqlString)">
            <overloads>Sets the value of a DataWindow String column. </overloads><summary>Sets the String value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="StringValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store String values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlString</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlString</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlString</b> to override the user's erroneous entry with valid data.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemString(System.Int32,System.Int16,System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetItemTime(System.Int32,System.Int16,System.DateTime)">
            <overloads>Sets the value of a DataWindow Time column. </overloads><summary>Sets the Time value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="TimeValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store Time values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemTime</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemTime</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemTime</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemTime(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetItemTime(System.Int32,System.String,System.DateTime)">
            <summary>Sets the Time value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="TimeValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store Time values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemTime</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemTime</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemTime</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetItemTime(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetProperty(System.String,System.String)">
            <summary>Sets the value of a DataWindow object property.</summary><param name="Property">The property you want to modify.</param><param name="Value">The value to which you want to set the property, converted to a string.</param><exception cref="T:System.ArgumentNullException">
				<i>Property</i> or <i>Value</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">
				<i>Property</i> or <i>Value</i> is invalid, or an unexpected error has occurred.</exception><remarks>
				<para>You can only set one property at a time with the <b>SetProperty</b> method, while the <see cref="M:Sybase.DataWindow.DataWindowControl.Modify(System.String)"/> method 
         lets you supply multiple properties in a single invocation. Some commonly used properties are also exposed on various descendants
         of the <see cref="T:Sybase.DataWindow.GraphicObject"/> classes and can be set directly.  For example, the following code fragments are 
         semantically equivalent:</para>
				<list type="bullet">
					<item>
						<c>dwReport.SetProperty("t_1.background.color", "0~tRGB(0,255,0)")</c>
					</item>
					<item>
						<c>dwReport.Modify("t_1.background.color='0~tRGB(0,255,0)'")</c>
					</item>
					<item>
						<c>Dim gobText as Sybase.DataWindow.GraphicObjectText</c>
        				<c>gobText = CObj(dwEmp.GetObjectByName("t_1"))</c>
        				<c>gobText.BackgroundColor = System.Drawing.Color.Lime</c>
					</item>
				</list>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.Modify(System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetProperty(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetRedrawOn">
            <summary>Enables repainting of the DataWindowControl. 
      </summary><remarks>This method re-enables the redrawing of the DataWindowControl follow a previous invocation of <see cref="M:Sybase.DataWindow.DataWindowControl.SetRedrawOff"/>.  Be sure to call the <see cref="M:System.Windows.Forms.Control.Refresh"/> method after <b>SetRedrawOn</b> to display any pending visual changes.
      </remarks><example>The following C# code toggles the redrawing of the DataWindowControl:
         <code>
         dwCrosstab.SetRedrawOff();
         
         // perform dynamic crosstab manipulation
         
         dwCrosstab.SetRedrawOn();
         dwCrosstab.Refresh();
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetRedrawOn"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetRedrawOff">
            <summary>Disables repainting of the DataWindowControl. 
      </summary><remarks>This method turns off redrawing temporarily to avoid flicker and reduce redrawing time when you are making several changes to the properties of the DataWindowControl.
      </remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetRedrawOn"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetRow(System.Int32)">
            <summary>Sets the current row in a DataWindow. 
      </summary><param name="RowNumber">The row you want to make current.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not valid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>SetRow</b> sets the <see cref="P:Sybase.DataWindow.DataWindowControl.CurrentRow"/> property. For a DataWindowControl, the cursor moves to the
			current column at <i>RowNumber</i>, but the DataWindow is not scrolled automatically.  Use <see cref="M:Sybase.DataWindow.DataWindowControl.ScrollToRow(System.Int32)"/> 
			passing <i>RowNumber</i> to ensure the row is visible to the user.</para>
				<para>
					<b>SetRow</b> can trigger the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/>, 
         <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/>,
         <see cref="E:Sybase.DataWindow.DataWindowControl.ItemFocusChanged"/>,
         <see cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanging"/>, and
         <see cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanged"/> event. Do not call <b>SetRow</b> 
         in any of these events, because a recursive call can cause a stack fault.</para>
			</remarks><seealso cref="P:Sybase.DataWindow.DataWindowControl.CurrentRow"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetRowFocusIndicator(Sybase.DataWindow.RowFocusIndicator)">
            <overloads>Specifies a visual indicator to identify the current row in a DataWindowControl.</overloads><summary>Specifies a stock visual indicator to identify the current row in a DataWindowControl.</summary><param name="FocusIndicator">The <see cref="T:Sybase.DataWindow.RowFocusIndicator"/>.</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>You can specify a hand icon at the left margin of the
			DataWindowControl, a dotted rectangle surrounding the row, or that there be no focus indicator. 
      </remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.RowStatus)">
            <summary>Changes the modification status of a row. 
      </summary><param name="RowNumber">The row number for which you want to set the status.</param><param name="Buffer">The DataWindow buffer that contains the row.</param><param name="Status">The new <see cref="T:Sybase.DataWindow.RowStatus"/>.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not a valid row in <i>Buffer</i>.</exception><exception cref="T:System.NotSupportedException"><b>SetRowStatus</b> is not supported for crosstab DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>SetRowStatus</b> changes the modification status of a row; <see cref="M:Sybase.DataWindow.DataWindowControl.SetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.ItemStatus)"/> changes 
         the modification status of an item within a row.</para>
				<para>When data is retrieved into a DataWindow, all rows and columns initially have a status of NotModified. After 
         data has changed in a column in a particular row, either because the user changed the data or the data was changed 
         programmatically, the item status for that column changes to Modified. Once the status for any column in a row changes to Modified,
          the row status also changes to Modified.</para>
				<para>When a row is inserted into a DataWindow, it initially has a row status of New, and all columns in that 
         row initially have an item status of NotModified. After data has changed in a column in the row, either because 
         the user changed the data or the data was changed programmatically 
         (not including the assignment of a default value), the item status changes to Modified. 
          Once 
         the status for any column in an inserted row changes to Modified, the row status changes to NewAndModified.
</para>
				<para>Changing the row status to NotModified will change the item status of all columns in that row to NotModified.</para>
				<para>Use <b>SetRowStatus</b> when you want to change the way a row will be updated. Typically, you do this to 
         prevent the default behavior from taking place. For example, you might copy a row from one DataWindow 
         to another. After the user modifies the row, you would want to issue an UPDATE statement instead of an 
         INSERT statement, since the row already exists in the database. To do so, you would change the row status of the copied row from NewAndModified to just Modified, signalling <see cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/>
         to generate an UPDATE rather than an INSERT statement.</para>
				<para>For more information about setting the status of rows and columns, see the section on updating the 
         database in the <i>DataWindow .NET Programmer's Guide</i>.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.ItemStatus)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetRowFocusIndicator(Sybase.DataWindow.RowFocusIndicator,System.Drawing.Point)">
            <summary>Specifies a stock visual indicator and its position to identify the current row in a DataWindowControl.
      </summary><param name="FocusIndicator">The <see cref="T:Sybase.DataWindow.RowFocusIndicator"/>.</param><param name="Location">The location of <i>FocusIndicator</i> relative to the upper-left corner of the row.</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
If <i>FocusIndicator</i> is Hand, the icon is placed relative 
			to the upper-left corner of the row and shifted according to <i>Location</i>.  The X and Y components of 
			<i>Location</i> must be expressed as Normalized <see cref="T:Sybase.DataWindow.Units"/>, regardless of the setting 
			of the DataWindowControl's <see cref="P:Sybase.DataWindow.DataWindowControl.Units"/> property.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetRowFocusIndicator(System.Drawing.Bitmap)">
            <summary>Specifies a bitmap to identify the current row in a DataWindowControl. 
      </summary><param name="FocusIndicator">The bitmap to be used as the visual indicator.</param><exception cref="T:System.ArgumentNullException">
				<i>FocusIndicator</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<i>FocusIndicator</i> is positioned at the upper-left corner of the row.  
      </remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetRowFocusIndicator(System.Drawing.Bitmap,System.Drawing.Point)">
            <summary>Specifies a bitmap and it its position to identify the current row in a DataWindowControl. 
      </summary><param name="FocusIndicator">The bitmap to be used as the visual indicator.</param><param name="Location">The location of <i>FocusIndicator</i> relative to the upper-left corner of the row.</param><exception cref="T:System.ArgumentNullException">
				<i>FocusIndicator</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<i>FocusIndicator</i> is placed relative to the upper-left corner of the row and shited according to <i>Location</i>. The X and Y components of 
			<i>Location</i> must be expressed as Normalized <see cref="T:Sybase.DataWindow.Units"/>, regardless of the setting 
			of the DataWindowControl's <see cref="P:Sybase.DataWindow.DataWindowControl.Units"/> property.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetSort(System.String)">
            <summary>Specifies the sort criteria for a DataWindow control or DataStore. 
      </summary><param name="SortExpression">A string whose value is valid sort expression for the DataWindow.</param><exception cref="T:Sybase.DataWindow.InvalidExpressionException">
				<i>SortExpression</i> is not valid</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>A DataWindow object can have sort criteria specified as part of its definition. <b>SetSort</b> overrides 
         the definition, providing new sort criteria for the DataWindow; however, it does not actually sort the rows. 
         Call the <see cref="M:Sybase.DataWindow.DataWindowControl.Sort"/> method to perform the actual sorting.</para>
				<para>
					<i>SortExpression</i> can have one of the forms shown below, depending on whether 
         you specify the column by name or number. (Column numbers must be prefaced by #). <c>Order</c> is either <c>A</c> for ascending or <c>D</c> for descending order. You can 
         specify secondary sorting by specifying criteria for additional columns in the format string. Separate each 
         column specification with a comma.</para>
				<list type="bullet">
					<item>
						<c>columnname order</c>, for instance: <c>"emp_lname A"</c> or <c>"emp_lname A, dept_id D"</c>
					</item>
					<item>
						<c>#columnnumber order</c>, for instance: <c>"#3 A"</c>
					</item>
				</list>
				<para>To allow users to specify their own sort expression for a DataWindowControl, 
				call <see cref="M:Sybase.DataWindow.DataWindowControl.SortDialog"/> to display a dialog box allowing for the construction of the expression. 
         Then you can call <see cref="M:Sybase.DataWindow.DataWindowControl.Sort"/> to apply the dynamically constructed expression to the DataWindowControl.
				</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SortDialog"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.Sort"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SortDialog">
            <summary>Displays a dialog box in which the user can dynamically create a sort expression for a DataWindowControl.
      </summary><exception cref="T:System.NotSupportedException">
				<b>SortDialog</b> is not supported for a composite DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>
				<para>Call <see cref="M:Sybase.DataWindow.DataWindowControl.Sort"/> after this method to apply the new sort criteria to the DataWindowControl.</para>
				<para>Use <see cref="M:Sybase.DataWindow.DataWindowControl.SetSort(System.String)"/> to set a sort expression programmatically.</para>
			</remarks><example>This statement displays the Specify Sort dialog box for <c>dwEmp</c>:
         <code>dwEmp.SortDialog()</code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetSort(System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.Sort"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetSqlUpdate(System.String)">
            <summary>Specifies the SQL statement that is about to be sent to the database by a DataWindowControl or DataStore. 
      </summary><param name="SqlSyntax">The SQL syntax to be submitted to the database.</param><exception cref="T:System.ArgumentNullException">
				<i>SqlSyntax</i> is null.</exception><exception cref="T:System.NotSupportedException">
				<b>SetSqlUpdate</b> was invoked outside of the <see cref="E:Sybase.DataWindow.DataWindowControl.SqlPreview"/> event.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>Use <b>SetSqlUpdate</b> to modify SQL syntax before it is sent to the database. This method can only be
			called within the <see cref="E:Sybase.DataWindow.DataWindowControl.SqlPreview"/> event, where the SQL statement is made available via the 
			SqlSyntax property of <see cref="T:Sybase.DataWindow.SqlPreviewEventArgs"/>. 
      </remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetSqlSelect(System.String)">
            <summary>Specifies the SQL SELECT statement for a DataWindowControl or DataStore.</summary><param name="SqlSyntax">The SQL SELECT syntax</param><exception cref="T:System.InvalidOperationException">
				<see cref="M:Sybase.DataWindow.DataWindowControl.SetTransaction(Sybase.DataWindow.AdoTransaction)"/> has not been executed.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>You must <see cref="M:Sybase.DataWindow.DataWindowControl.SetTransaction(Sybase.DataWindow.AdoTransaction)"/> method to set the transaction object before invoking <b>SetSqlSelect</b>, or
				an exception will result.</para>
				<para>Use <b>SetSqlSelect</b> to dynamically change the SQL SELECT statement for a DataWindow.
         If the DataWindow is updatable, the SELECT statement is validated against the database 
         and the DataWindow column specifications. Each column in the SQL SELECT 
         statement must match the column type in the DataWindow object.</para>
				<para>Use <b>SetSqlSelect</b> only if the data source for the DataWindow object is a SQL SELECT statement without 
         retrieval arguments.  You can use <see cref="M:Sybase.DataWindow.DataWindowControl.Modify(System.String)"/> or <see cref="M:Sybase.DataWindow.DataWindowControl.SetProperty(System.String,System.String)"/> 
         with the <c>DataWindow.Table.Select</c> property
          when retrieval arguments are involved; however, no validation of the SQL statement will occur, making this technique more
          error prone.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetSqlSelect"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetSqlUpdate(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetText(System.String)">
            <summary>Replaces the text in the edit control over the current row and column in a DataWindowControl. 
      </summary><param name="TextValue">The string to be placed in the edit control.</param><exception cref="T:System.NotSupportedException">
				<i>SetText</i> was called at an illegal time.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>SetText</b> only sets the value in the edit control. When the user changes focus to another 
         row and column, <i>TextValue</i> is placed in the in the appropriate row and column of the Primary buffer.</para>
				<para>If <i>TextValue</i> is determined to be invalid in the 
         <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> or <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> 
         events, you can call one of the SetItem methods to specify a new value and then invoke <b>SetText</b> to put that 
         same value in the edit control 
         so that the user sees it too.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetTransaction(Sybase.DataWindow.AdoTransaction)">
            <summary>Associates a DataWindow with an ADO.NET database connection.
      </summary><param name="AdoTransaction">The <see cref="T:Sybase.DataWindow.AdoTransaction"/> instance referencing the database connection.</param><exception cref="T:System.InvalidOperationException">
				<i>AdoTransaction</i> has not been bound to an ADO.NET connection.</exception><exception cref="T:System.ArgumentNullException">
				<i>AdoTransaction</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In a DataWindow database connection, <i>AdoTransaction</i> is an object that functions 
         as the communications area between the DataWindow and the database. <i>AdoTransaction</i> specifies the 
         parameters for connecting to a database and is a prerequisite for accessing a 
         database via DataWindow .NET using ADO.NET.</para>
				<para>To connect to a database using an ADO.NET connection, you perform the following general steps:
         <list type="number">
						<item>Create a new ADO.NET IDbConnection reference and set its properties. In the initial release of DataWindow .NET, only 
         			<see cref="T:System.Data.OleDb.OleDbConnection"/> is supported.</item>
						<item>Open the connection.</item>
						<item>Create an <see cref="T:Sybase.DataWindow.AdoTransaction"/> object passing the IDBConnection
						reference to its constructor.</item>
						<item>
							<see cref="M:Sybase.DataWindow.AdoTransaction.BindConnection"/> the ADO.NET connection to the internal DataWindow .NET
         database interaction layer.</item>
						<item>Call <b>SetTransaction</b> to associate the transaction with a DataWindow.</item>
						<item>Perform various database operations, such as <see cref="M:Sybase.DataWindow.DataWindowControl.Retrieve(System.Data.DataTable)"/> and <see cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/>.</item>
						<item>Close the ADO.NET connection.</item>
					</list>
				</para>
			</remarks><example>This C# example retrieves and updates a simple DataStore using an ADO.NET connection to Adaptive Server Anywhere 
			(exception handling has been omitted for brevity) :
         <code>
         System.Data.OleDbConnection oleDbConn = new System.Data.OleDb.OleDbConnection();
         oleDbConn.ConnectionString="User ID=dba;Password=sql;Data Source=mydb;Provider=ASAProv.90";
         oleDbConn.Open();
         
         Sybase.DataWindow.AdoTransaction adoTrans = new Sybase.DataWindow.AdoTransaction(oleDbConn);
         adoTrans.BindConnection();
         
         Sybase.DataWindow.DataStore ds = new Sybase.DataWindow.DataStore("hr.pbl","employees");
         ds.SetTransaction(adoTrans);
         ds.Retrieve();
         
         adoTrans.Transaction = adoTrans.Connection.BeginTransaction();
         ds.SetItemString(1,2,"New Hire");
         ds.UpdateData();
         adoTrans.Transaction.Commit();
         
         adoTrans.Connection.Close();
         </code>
			</example><seealso cref="M:Sybase.DataWindow.AdoTransaction.BindConnection"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetTransaction(Sybase.DataWindow.Transaction)">
            <overloads>Associates a DataWindow with a physical database connection.</overloads><summary>Associates a DataWindow with a database connection made via a native DataWindow .NET database connection.
      </summary><param name="Transaction">The <see cref="T:Sybase.DataWindow.Transaction"/> instance referencing the database connection.</param><exception cref="T:System.ArgumentNullException">
				<i>Transaction</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In a DataWindow database connection, <i>Transaction</i> is an object that functions 
         as the communications area between the DataWindow and the database. <i>Transaction</i> specifies the 
         parameters for connecting to a database and is a prerequisite for accessing a 
         database via DataWindow .NET when using Sybase-provided database interfaces. <note>You cannot use a
         <see cref="T:Sybase.DataWindow.Transaction"/> to access the database outside of a DataWindow .NET method.  You can do this using
         the <see cref="T:Sybase.DataWindow.AdoTransaction"/> class, however.</note>
				</para>
				<para>The following general steps apply: 
         <list type="number">
						<item>Create a <see cref="T:Sybase.DataWindow.Transaction"/> object instance. </item>
						<item>Set its properties.</item>
						<item>
							<see cref="M:Sybase.DataWindow.Transaction.Connect"/> to the database.</item>
						<item>Call <b>SetTransaction</b> to associate object to a DataWindow.</item>
						<item>Perform various database operations, such as <see cref="M:Sybase.DataWindow.DataWindowControl.Retrieve(System.Data.DataTable)"/> and <see cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/>.</item>
						<item>
							<see cref="M:Sybase.DataWindow.Transaction.Disconnect"/> from the database. </item>
					</list>
				</para>
			</remarks><example>This example connects to the database using the Sybase-provided ODBC interface and uses that connection to 
			retrieve the <c>dwDepartment</c> DataWindowControl:
         <code>
         sqlca = new Sybase.DataWindow.Transaction;
         sqlca.Dbms = Sybase.DataWindow.DbmsType.Odbc;
         sqlca.DbParameter = "ConnectString='DSN=EAS Demo DB V10;UID=dba;PWD=sql'";
         try
         {
         	sqlca.Connect();
         	dwDepartment.SetTransaction(sqlca);
        		dwDepartment.Retrieve();
         } catch (System.Exception ex) {
         	HandleException(ex);
         }
         </code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.SetWSConnection(Sybase.DataWindow.WebServiceConnection)">
            <summary>Specifies overrides for a DataWindow or DataStore's web service connection</summary><param name="wsObject">The <see cref="T:Sybase.DataWindow.WebServiceConnection"/> containing the override values.</param>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.ShareData(Sybase.DataWindow.IDataWindowBase)">
            <summary>Shares data retrieved by one DataWindow which is referred with another DataWindow</summary><param name="TargetDW">The (secondary) DataWindow that will share the primary DataWindow's data.</param><exception cref="T:System.ArgumentException">Primary DataWindow cannot be shared with <i>TargetDW</i> due to 
			incompatible formats.</exception><exception cref="T:System.ArgumentNullException">
				<i>TargetDW</i> is null.</exception><exception cref="T:System.NotSupportedException">Crosstab and composite DataWindows cannot be shared, nor can the initiator of <b>ShareData</b>
			be a DataWindowChild nested in composite DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The primary and secondary DataWindows do not share formatting; only the data is shared, including data in the
         Primary, Delete buffer, and Filter buffer, as well as the sort criteria. The columns must be the same for the 
         DataWindow objects, but the SELECT statements can be different. For example, you could share data among DataWindow objects with 
         these SELECT statements:</para>
				<list type="bullet">
					<item>
						<c>SELECT dept_id from dept</c>
					</item>
					<item>
						<c>SELECT dept_id from dept where dept_id = 200</c>
					</item>
					<item>
						<c>SELECT dept_id from employee</c>
					</item>
				</list>
				<para>The WHERE clause in the DataWindow object of <i>TargetDW</i> has no effect on the 
         number of rows returned. The number of rows returned to both DataWindow controls is determined by the 
         WHERE clause in the DataWindow which invoked <b>ShareData</b>.</para>
				<para>When you call methods in either the primary or secondary DataWindow that change the data, 
         messages normally associated with the method are routed to the primary DataWindow 
          and all secondary DataWindows are affected. Such methods include:
         DeleteRow, Filter, FilterDialog, GetSqlSelect, ImportFile, ImportString, ImportClipboard, InsertRow, ReselectRow,
         Reset, Retrieve, SetFilter, SetSort, SetSqlSelect, Sort, SortrDialog, and UpdateData.</para>
				<para>
					<b>ShareData</b> does not automatically share data among DropDownDataWindows
				 in the primary or secondary DataWindows. You must do this explicitly by getting a handle to the DropDownDataWindow 
         using <see cref="M:Sybase.DataWindow.DataWindowControl.GetChild(System.String)"/> and either retrieving the DropDownDataWindow or using <b>ShareData</b>
         to share data from an appropriate data source with the DropDownDataWindow.</para>
				<para>To turn off sharing in a primary or secondary DataWindow, call the <see cref="M:Sybase.DataWindow.DataWindowControl.ShareDataOff"/> method. When 
         sharing is turned off for the primary DataWindow, the secondary DataWindows are disconnected and 
         the data disappears. However, turning off sharing for a secondary DataWindow does not affect the 
         data in the primary DataWindow or other secondary DataWindows.</para>
				<para>You cannot use <b>ShareData</b> to share data among application boundaries, <see cref="M:Sybase.DataWindow.IDataStore.GetFullState"/>
				for information on how to manage DataWindows in .NET remoting applications.</para>
				<para>Trying to set 
         the QueryMode or QuerySort DataWindow object properties on a secondary DataWindow is not supported and
         results in an exception.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.ShareDataOff"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.ShareDataOff">
            <summary>Turns off the sharing of data buffers for a DataWindow.</summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>When you call <b>ShareDataOff</b> for a secondary 
         DataWindow, that control no longer contains data, but the primary DataWindow and other secondary controls 
         are not affected. When you call <b>ShareDataOff</b> for the primary DataWindow, all secondary DataWindows are 
         disconnected and no longer contain data. 
      </remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.ShareData(Sybase.DataWindow.IDataWindowBase)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.Show">
            <summary>Makes the DataWindow control visible. 
      </summary><seealso cref="M:Sybase.DataWindow.DataWindowControl.Hide"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.Sort">
            <summary>Sorts the rows in a DataWindow using the current sort criteria. 
      </summary><exception cref="T:System.NotSupportedException">
				<b>Sort</b> is not supported for a composite DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>To change the sort criteria from the default specified in DataWindow Designer, use
         <see cref="M:Sybase.DataWindow.DataWindowControl.SetSort(System.String)"/> or <see cref="M:Sybase.DataWindow.DataWindowControl.SortDialog"/> (the latter
         for DataWindowControls only).</para>
				<para>When the <see cref="M:Sybase.DataWindow.DataWindowControl.Retrieve(System.Data.DataTable)"/> method retrieves data for the DataWindow, it automatically applies the current
				sort criteria. You only need to call <b>Sort</b> after you 
         change the criteria or if the data have changed because of processing or user input.</para>
				<para>After sorting a DataWindow object that includes groups, 
         call <see cref="M:Sybase.DataWindow.DataWindowControl.CalculateGroups"/> to ensure the groupings take into account changes in the sort order.</para>
				<para>When the Retrieve As Needed DataWindow object property is set, <b>Sort</b> method cancels its effect, because 
         all rows must be retrieved to be sorted correctly.</para>
				<para>When you sort a DataWindow on a specified column, rows with null data remain at the top, regardless of 
         whether you choose ascending or descending order for your sort criteria.</para>
				<para>The sort order is performed 
         on a result set returned from a database, but is not necessarily the same sort order used by the database 
          when an ORDER BY clause is used in a SQL query.</para>
				<para>
					<b>Sort</b> method uses a typical 
         lexical sort, with symbols, such as a hyphen or underline, ranked higher than alphanumeric characters.</para>
			</remarks><example>This example sort <c>dwEmployee</c> by column 1 in ascending order.  Rows with identical values in the first column
			are further sorted by column 2 in descending order:
         <code>
         dwEmployee.SetSort("#1 A, #2 D")
         dwEmployee.Sort()
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetSort(System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SortDialog"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.UpdateData">
            <overloads>Updates the database with the changes made in a DataWindow.</overloads><summary>Updates the database with the changes made in a DataWindow and automatically clears the status flags.</summary><exception cref="T:Sybase.DataWindow.DbErrorException">A database error has occurred.</exception><exception cref="T:System.InvalidOperationException">
				<list type="bullet">
					<item>The DataWindow is not updatable, or</item>
					<item>the associated <see cref="T:Sybase.DataWindow.Transaction"/> or <see cref="T:Sybase.DataWindow.AdoTransaction"/> is not 
				connected to the database.</item>
				</list>
			</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This overload of <b>UpdateData</b> resets the row and item status flags after successfully completing the update. 
				However, you 
         can prevent the flags from being reset until you perform other validations and commit the changes by
         calling one of the overloaded versions of <b>UpdateData</b> and setting the <i>ResetUpdateFlags</i> argument to <c>false</c>. You would then
         later call <see cref="M:Sybase.DataWindow.DataWindowControl.ResetUpdateStatus"/> to explicitly refresh the status flags. 
         </para>
				<para>
         For DataWindowControls, this version of <b>UpdateData</b> performs an implicit
          <see cref="M:Sybase.DataWindow.DataWindowControl.AcceptText"/> operation on the data within the edit control when the method is 
          invoked.  This ensures that pending data is moved from the edit control to the Primary buffer before the database 
          update occurs. Overloaded versions of this method allow you to change that behavior.</para>
				<para>Do not call this version of <b>UpdateData</b> in the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> event.
         The implicit <see cref="M:Sybase.DataWindow.DataWindowControl.AcceptText"/> will trigger another ItemChanged event leading to
         a recursive loop and likely a stack fault.</para>
				<!-- CHECK ON THIS - SEEMS LIKE A BUG?
				<para>If a DataWindowControl or DataStore is populated using SetChanges or SetFullState, and an UpdateData is done that 
         includes deleted rows, the deleted rows remain in the delete buffer until a subsequent GetChanges is applied 
         to the DataWindow or DataStore.</para>
         -->
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetTransaction(Sybase.DataWindow.AdoTransaction)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.UpdateData(System.Boolean)">
            <summary>Updates the database with the changes made in a DataWindow, optionally accepting a pending change in the edit control.</summary><param name="AcceptData">
				<c>true</c> if an <see cref="M:Sybase.DataWindow.DataWindowControl.AcceptText"/> should be 
			performed prior to the update, false otherwise.</param><exception cref="T:Sybase.DataWindow.DbErrorException">A database error has occurred.</exception><exception cref="T:System.InvalidOperationException">
				<list type="bullet">
					<item>The DataWindow is not updatable, or</item>
					<item>the associated <see cref="T:Sybase.DataWindow.Transaction"/> or <see cref="T:Sybase.DataWindow.AdoTransaction"/> is not 
				connected to the database.</item>
				</list>
			</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Since <see cref="M:Sybase.DataWindow.DataWindowControl.AcceptText"/> applies only to DataWindowControls, this overload is 
				identical to the parameterless version of <b>UpdateData</b> when invoked on a DataStore or DataWindowChild.</para>
				<para>Use this version of <b>UpdateData</b> to ignore any pending changes in the DataWindowControl's edit control
				before performing the update. Changes in the edit control are automatically validated when the user moves from 
				column to column within the control;
				however, if focus leaves the DataWindowControl completely (for instance, a command button is pressed) the last changes made
				in the edit control are not automatically applied to the Primary buffer.  If you want that data to be included in the update, 
				set <i>AcceptData</i> to <c>true</c> (or use the parameterless version of <b>UpdateData</b>).</para>
				<para>If you call <b>UpdateData</b> in the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/>
				event, be sure to set the <i>AcceptData</i> argument to <c>false</c> to 
         avoid an endless loop and a stack fault. If you call <b>UpdateData</b> in that event, the item's old value will be applied
         , not the newly entered value; the new value is not in place until the event completes.
           If you want to include the new value, use an appropriate SetItem method within the event script.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetTransaction(Sybase.DataWindow.AdoTransaction)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.UpdateData(System.Boolean,System.Boolean)">
            <summary>Updates the database with the changes made in a DataWindow, optionally accepting a pending change in the edit control and
			resetting status flags.</summary><param name="AcceptData">
				<c>true</c> if an <see cref="M:Sybase.DataWindow.DataWindowControl.AcceptText"/> should be 
			performed prior to the update, false otherwise.</param><param name="ResetUpdateFlags">
				<c>true</c> if an row and item status flags should be automatically reset, <c>false</c> if they should
			be retained.</param><exception cref="T:Sybase.DataWindow.DbErrorException">A database error has occurred.</exception><exception cref="T:System.InvalidOperationException">
				<list type="bullet">
					<item>The DataWindow is not updatable, or</item>
					<item>the associated <see cref="T:Sybase.DataWindow.Transaction"/> or <see cref="T:Sybase.DataWindow.AdoTransaction"/> is not 
				connected to the database.</item>
				</list>
			</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>You can use this version of <b>UpdateData</b> to ignore any pending changes in the DataWindowControl's edit control
				before performing the update. Changes in the edit control are automatically validated when the user moves from 
				column to column within the control;
				however, if focus leaves the DataWindowControl completely (for instance, a command button is pressed) the last changes made
				in the edit control are not automatically applied to the Primary buffer.  If you want that data to be included in the update, 
				set <i>AcceptData</i> to <c>true</c> (or use the parameterless version of <b>UpdateData</b>).</para>
				<para>If you call <b>UpdateData</b> in the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/>
				event, be sure to set the <i>AcceptData</i> argument to <c>false</c> to 
         avoid an endless loop and a stack fault. If you call <b>UpdateData</b> in that event, the item's old value will be applied
         , not the newly entered value; the new value is not in place until the event completes.
           If you want to include the new value, use an appropriate SetItem method within the event script.</para>
				<para>If you want to update several tables in one DataWindow, you can use <see cref="M:Sybase.DataWindow.DataWindowControl.Modify(System.String)"/> or <see cref="M:Sybase.DataWindow.DataWindowControl.SetProperty(System.String,System.String)"/>
				to change the Update property of columns in each table. To preserve the status flags of the rows and columns, set 
         <i>ResetUpdateFlags</i> argument to <c>false</c>. Because the updates all occur in the same DataWindow control or DataStore, 
         you cannot allow the flags to be cleared until all the tables have used them. When all the updates are 
         successfully completed and committed, call <see cref="M:Sybase.DataWindow.DataWindowControl.ResetUpdateStatus"/> to clear the status flags and return the DataWindow to 
         an unmodified state.</para>
				<para>Likewise, if you are updating multiple DataWindows as part of one transaction, set the <i>ResetUpdateFlags</i>
         argument to <c>false</c>. This will prevent each DataWindow from "forgetting" which rows to update in case one of 
         the updates fails. You can roll back, try to correct the situation, and attempt to update again. Once all of the 
         DataWindows have been updated successfully, commit the changes to finalize the 
         transaction and call <see cref="M:Sybase.DataWindow.DataWindowControl.ResetUpdateStatus"/> to reset the status flags.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetTransaction(Sybase.DataWindow.AdoTransaction)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.OnDataWindowKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataWindow.DataWindowKeyDown"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.KeyEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnDataWindowKeyDown</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnDataWindowKeyDown</b> in a derived class, be sure to call the base class's <b>OnDataWindowKeyDown</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.OnBeginPrint(Sybase.DataWindow.BeginPrintEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataStore.BeginPrint"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.BeginPrintEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnBeginPrint</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnBeginPrint</b> in a derived class, be sure to call the base class's <b>OnBeginPrint</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.OnEndPrint(Sybase.DataWindow.EndPrintEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataStore.EndPrint"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.EndPrintEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnEndPrint</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnEndPrint</b> in a derived class, be sure to call the base class's <b>OnEndPrint</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.OnPagePrinting(Sybase.DataWindow.PagePrintingEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataStore.PagePrinting"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.PagePrintingEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnPagePrinting</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnPagePrinting</b> in a derived class, be sure to call the base class's <b>OnPagePrinting</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.OnDataWindowCreated(Sybase.DataWindow.DataWindowCreatedEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataStore.DataWindowCreated"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.DataWindowCreatedEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnDataWindowCreated</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnDataWindowCreated</b> in a derived class, be sure to call the base class's <b>OnDataWindowCreated</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.OnDbError(Sybase.DataWindow.DbErrorEventArgs)">
            <summary>
            This method is designed for DataWindow .NET internal usage only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.OnWSError(Sybase.DataWindow.WSErrorEventArgs)">
            <summary>
            This method is designed for DataWindow .NET internal usage only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.OnEditChanged(Sybase.DataWindow.EditChangedEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataWindow.EditChanged"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.EditChangedEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnEditChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnEditChanged</b> in a derived class, be sure to call the base class's <b>OnEditChanged</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.OnItemChanged(Sybase.DataWindow.ItemChangedEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataWindow.ItemChanged"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.ItemChangedEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnItemChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnItemChanged</b> in a derived class, be sure to call the base class's <b>OnItemChanged</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.OnItemError(Sybase.DataWindow.ItemErrorEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataStore.ItemError"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.ItemErrorEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnItemError</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnItemError</b> in a derived class, be sure to call the base class's <b>OnItemError</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.OnItemFocusChanged(Sybase.DataWindow.ItemFocusChangedEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataWindow.ItemFocusChanged"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.ItemFocusChangedEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnItemFocusChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnItemFocusChanged</b> in a derived class, be sure to call the base class's <b>OnItemFocusChanged</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.OnEndRetrieve(Sybase.DataWindow.EndRetrieveEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataStore.EndRetrieve"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.EndRetrieveEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnEndRetrieve</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnEndRetrieve</b> in a derived class, be sure to call the base class's <b>OnEndRetrieve</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.OnRowRetrieved(Sybase.DataWindow.RowRetrievedEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataStore.RowRetrieved"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.RowRetrievedEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnRowRetrieved</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnRowRetrieved</b> in a derived class, be sure to call the base class's <b>OnRowRetrieved</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.OnBeginRetrieve(Sybase.DataWindow.BeginRetrieveEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataStore.BeginRetrieve"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.BeginRetrieveEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnBeginRetrieve</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnBeginRetrieve</b> in a derived class, be sure to call the base class's <b>OnBeginRetrieve</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.OnRowFocusChanged(Sybase.DataWindow.RowFocusChangedEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataWindow.RowFocusChanged"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.RowFocusChangedEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnRowFocusChanged</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnRowFocusChanged</b> in a derived class, be sure to call the base class's <b>OnRowFocusChanged</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.OnRowFocusChanging(Sybase.DataWindow.RowFocusChangingEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataWindow.RowFocusChanging"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.RowFocusChangingEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnRowFocusChanging</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnRowFocusChanging</b> in a derived class, be sure to call the base class's <b>OnRowFocusChanging</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.OnScrollHorizontal(Sybase.DataWindow.ScrollHorizontalEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataWindow.ScrollHorizontal"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.ScrollHorizontalEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnScrollHorizontal</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnScrollHorizontal</b> in a derived class, be sure to call the base class's <b>OnScrollHorizontal</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.OnScrollVertical(Sybase.DataWindow.ScrollVerticalEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataWindow.ScrollVertical"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.ScrollVerticalEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnScrollVertical</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnScrollVertical</b> in a derived class, be sure to call the base class's <b>OnScrollVertical</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.OnSqlPreview(Sybase.DataWindow.SqlPreviewEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataStore.SqlPreview"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.SqlPreviewEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnSqlPreview</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnSqlPreview</b> in a derived class, be sure to call the base class's <b>OnSqlPreview</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.OnEndUpdate(Sybase.DataWindow.EndUpdateEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataStore.EndUpdate"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.EndUpdateEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnEndUpdate</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnEndUpdate</b> in a derived class, be sure to call the base class's <b>OnEndUpdate</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.OnBeginUpdate(System.ComponentModel.CancelEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataStore.BeginUpdate"/> event.
			</summary><param name="e">
				A <see cref="T:System.ComponentModel.CancelEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnBeginUpdate</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnBeginUpdate</b> in a derived class, be sure to call the base class's <b>OnBeginUpdate</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.OnDropDown(System.EventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataWindow.DropDown"/> event.
			</summary><param name="e">
				A <see cref="T:System.EventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnDropDown</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnDropDown</b> in a derived class, be sure to call the base class's <b>OnDropDown</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.OnButtonClicking(System.ComponentModel.CancelEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataWindow.ButtonClicking"/> event.
			</summary><param name="e">
				A <see cref="T:System.ComponentModel.CancelEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnButtonClicking</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnButtonClicking</b> in a derived class, be sure to call the base class's <b>OnButtonClicking</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.OnButtonClicked(Sybase.DataWindow.ButtonClickedEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataWindow.ButtonClicked"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.ButtonClickedEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnButtonClicked</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnButtonClicked</b> in a derived class, be sure to call the base class's <b>OnButtonClicked</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.NotifyGraphCreated(Sybase.DataWindow.GraphCreatedEventArgs)">
            <!-- No matching elements were found for the following include tag --><include file="DataWindowComments.xml" path="doc/members/member[@name=&quot;M:NotifyGraphCreated&quot;]/*"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowControl.GetObjectHandle">
            <summary>
            This method is designed for DataWindow .NET internal usage only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.DataWindowObject">
            <summary>Gets or sets the name of the DataWindow object to load for this DataWindowControl or DataStore. 
      </summary><value>The DataWindow object name.</value><exception cref="T:Sybase.DataWindow.DataWindowLoadFailedException">The specified DataWindow object could not be found in <see cref="P:Sybase.DataWindow.DataWindowControl.LibraryList"/>.</exception>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.LibraryList">
            <summary>Gets or sets the list of libraries in which the DataWindowControl or DataStore searches for DataWindow objects. 
      </summary><value>The list of libraries.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.BorderStyle">
            <summary>Gets or sets the border style of the DataWindowControl.</summary><value>The <see cref="T:Sybase.DataWindow.DataWindowBorderStyle"/> of the DataWindowControl.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.TitleBar">
            <summary>Gets or sets whether the DataWindowControl has a title bar.</summary><value>
				<c>true</c> if the DataWindowControl has a title bar, <c>false</c> otherwise.</value><remarks>
				<para>A DataWindowControl with a title bar can be moved by the user</para>
				<note>Bcause of underlying restrictions
			in the Windows GDI layer, edit controls within a DataWindowControl with a titlebar do not receive mouse clicks. This makes
			DataWindowControls with title bars unsuitable for data entry purposes.</note>
			</remarks>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.ControlBox">
            <summary>Gets or sets whether the DataWindowControl displays a Control box in its title bar.
      </summary><value>
				<c>true</c> if the DataWindowControl has a control box <c>false</c> otherwise.</value><remarks>By design, the Close option in the Control menu box and the Close button are always disabled. 
      </remarks>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.MaximizeBox">
            <summary>Gets or sets whether a Maximize box is displayed on the control's title bar.</summary><value>
				<c>true</c> if the DataWindowControl has a Maximize box, <c>false</c> otherwise.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.MinimizeBox">
            <summary>Gets or sets whether a Minimize box is displayed on the control's title bar. </summary><value>
				<c>true</c> if the DataWindowControl has a Minimize box, <c>false</c> otherwise.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.ScrollBars">
            <summary>Gets or sets the type of scroll bars that display, when necessary, with the DataWindowControl.
      </summary><value>The type of <see cref="T:Sybase.DataWindow.DataWindowScrollBars"/> to be displayed.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.LiveScroll">
            <summary>Gets or sets whether rows in the DataWindow control should scroll while the user is moving the thumb control in a scroll bar. </summary><value>
				<c>true</c> if the DataWindowControl should scroll, <c>false</c> otherwise.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.Icon">
            <summary>Gets or set the icon in the <see cref="P:Sybase.DataWindow.DataWindowControl.TitleBar"/> of the DataWindowControl 
      </summary><value>The <see cref="T:System.Drawing.Icon"/> displayed in the DataWindowControl's title bar.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.Visible">
            <!-- No matching elements were found for the following include tag --><include file="DataWindowComments.xml" path="doc/members/member[@name=&quot;P:Visible&quot;]/*"/>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.DeletedCount">
            <summary>Gets the number of rows that have been marked for deletion in the database. 
      </summary><value>The number of rows currently in the Delete buffer.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.FilteredCount">
            <summary>Gets the number of rows not included in the Primary buffer
         because of the application of a filter criteria. 
      </summary><value>The number of rows currently in the Filter buffer.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.ModifiedCount">
            <summary>Get number of rows that have been modified. 
      </summary><value>The number of modified rows in the DataWindow.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.RowCount">
            <summary>Gets the number of rows in the Primary buffer.</summary><value>The number of rows currently in the Primary buffer.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.ColumnCount">
            <summary>Returns the number of columns in the DataWindow or DataStore. Computed columns are not included in this value.</summary><value>A short read-only value indicating the number of columns.</value><remarks>This property can also be evaluated using a DataWindow object property.  See the <i>DataWindow Object Reference</i> for more information.	</remarks><example>
		<code>
		short ColCount;
		ColCount = dwEmp.ColumnCount;
		</code>
		</example>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.CurrentRow">
            <summary>Gets the number of the current row in a DataWindow.
      </summary><value>The number of the current row in the DataWindow.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.Style">
            <summary>Gets the style of the DataWindow.</summary><value>The style of the DataWindow (e.g., Tabular, Grid, Crosstab).</value><remarks>The Tabular, FreeForm, and Group styles are internally identical; the <b>Style</b> will always be reported as Tabular.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.ObjectUnderMouse">
            <summary>Gets the <see cref="T:Sybase.DataWindow.GraphicObject"/> under the mouse pointer.</summary><value>A <see cref="T:Sybase.DataWindow.GraphicObject"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.CurrentEdit">
            <summary>Gets the active edit control for the associated DataWindowControl.  
      </summary><value>The current edit control for the DataWindowControl.</value><remarks>If there is no edit control currently active the <see cref="P:Sybase.DataWindow.EditControl.Empty"/> property will be set to <c>true</c> and accessing additional properties of the edit control will result in an exception.
      </remarks>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.Units">
            <summary>Gets the unit of measurement under which the DataWindow object was designed.</summary><value>The unit of measurement.</value><remarks>You can use the <see cref="M:Sybase.DataWindow.Utility.PixelsToUnits(System.Int32,Sybase.DataWindow.Axis)"/> or 
		<see cref="M:Sybase.DataWindow.Utility.UnitsToPixels(System.Int32,Sybase.DataWindow.Axis)"/> methods to convert a Pixel measurement to a Normalized value or vice versa.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.DataSourceType">
            <!-- No matching elements were found for the following include tag --><include file="DataWindowComments.xml" path="doc/members/member[@name=&quot;P:DataSourceType&quot;]/*"/>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.ContainsNestedReport">
            <summary>
		Whether the DataWindow contains a nested report.
		</summary><value>A boolean value that is true if the DataWindow contains a nested reported and false otherwise.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.BackgroundColor">
            <summary>Gets or sets the background color of the DataWindow.</summary><value>A value of the System.Drawing.Color structure.</value><example>
		<code>
		dwEmp.BackgroundColor = System.Drawing.Color.Aqua;
		</code>
		</example>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.PrintProperties">
            <summary>
        Gets print properties. For a complete list of properties, see the <see cref="T:Sybase.DataWindow.PrintProperties"/> class.
       </summary>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.QueryMode">
            <summary>
        Whether or not the DataWindow is in query mode. In query mode, the user can specify the desired data by entering WHERE criteria in one or more columns. After the user specifies retrieval criteria in query mode, subsequent calls to Retrieve use the new criteria.
       </summary><value>A boolean value that is true when the DataWindow is in query mode and false otherwise.</value><remarks>This property can also be set using a DataWindow object property. See the <i>DataWindow Object Reference</i> for more information.	</remarks><example>
		<code>
		dwEmp.QueryMode = true;
		</code>
		</example>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.FirstRowOnPage">
            <summary>
        Returns the number of the first row visible on the DataWindow.
       </summary><value>An integer value.</value><remarks>This property can also be evaluated using a DataWindow object property. See the <i>DataWindow Object Reference</i> for more information.	</remarks><example>
		<code>
Dim First As Integer
First = dw_1.FirstRowOnPage
		</code>
		</example>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.LastRowOnPage">
            <summary>
        Returns the number of the last row visible on the DataWindow.
       </summary><value>An integer value.</value><remarks>This property can also be evaluated using a DataWindow object property. See the <i>DataWindow Object Reference</i> for more information.	</remarks><example>
		<code>
int first, last;
first = dw_1.FirstRowOnPage;
last = dw_1.LastRowOnPage;
		</code>
		</example>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.Syntax">
            <summary>
        Returns the syntax that describes the DataWindow object.
       </summary><value>A string that contains the complete syntax for the DataWindow object.</value><remarks>This property can also be evaluated using a DataWindow object property. See the <i>DataWindow Object Reference</i> for more information.	</remarks><example>
		<code>
String dwSyntax;
dwSyntax = dw_1.Syntax;
		</code>
		</example>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowControl.TreeViewProperties">
            <summary>
        Gets properties for a TreeView style DataWindow. For a complete list of properties, see the <see cref="T:Sybase.DataWindow.TreeViewProperties"/> class.
       </summary>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.DataWindowKeyDown">
            <summary>Occurs when a key is pressed in a DataWindowControl's edit control.</summary>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.BeginPrint">
            <summary>Occurs when the printing of the DataWindow starts.</summary><remarks><b>BeginPrint</b> is triggered when the <see cref="M:Sybase.DataWindow.DataWindowControl.Print"/> method is invoked.</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.EndPrint"/><seealso cref="E:Sybase.DataWindow.DataWindowControl.PagePrinting"/>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.EndPrint">
            <summary>Occurs when the printing of the DataWindow ends.</summary><seealso cref="E:Sybase.DataWindow.DataWindowControl.BeginPrint"/><seealso cref="E:Sybase.DataWindow.DataWindowControl.PagePrinting"/>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.PagePrinting">
            <summary>Occurs before each page is formatted for printing.</summary><remarks>You can set the <see cref="P:Sybase.DataWindow.PagePrintingEventArgs.Cancel"/> property of the associated
			<see cref="T:Sybase.DataWindow.PagePrintingEventArgs"/> object to skip printing the current page.  To cancel, the remainder of the print job, each page must be cancelled
			individually.</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.BeginPrint"/><seealso cref="E:Sybase.DataWindow.DataWindowControl.EndPrint"/>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.DataWindowCreated">
            <summary>Occurs when a DataWindow object is attached to a DataWindowControl or DataStore.</summary><remarks>This event is triggered whenever the <see cref="P:Sybase.DataWindow.DataWindowControl.DataWindowObject"/> property is modified.</remarks>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.EditChanged">
            <summary>Occurs when a user types in a DataWindowControl's edit control.</summary>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.ItemFocusChanged">
            <summary>Occurs when the DataWindowControl's edit control moves to a new column.</summary><remarks>A field can lose focus when the user presses Enter, the Tab key, an arrow key, or clicks the mouse on another field within the <see cref="T:Sybase.DataWindow.DataWindowControl"/>. </remarks>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.ItemError">
            <summary>Occurs when a modified column does not pass the validation criteria specified for it.</summary><remarks>This event can be triggered as a result of user input into a <see cref="T:Sybase.DataWindow.DataWindowControl"/>
			and as a result of the <see cref="M:Sybase.DataWindow.DataStore.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/>, <see cref="M:Sybase.DataWindow.DataStore.ImportString(System.String,Sybase.DataWindow.FileSaveAsType)"/>, and <see cref="M:Sybase.DataWindow.DataStore.ImportClipboard(Sybase.DataWindow.FileSaveAsType)"/>
			methods.</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.ItemChanged">
            <summary>Occurs when a column has been modified and loses focus.</summary><seealso cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/><seealso cref="E:Sybase.DataWindow.DataWindowControl.ItemFocusChanged"/>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.EndRetrieve">
            <summary>Occurs when the retrieval from the database has completed.</summary><seealso cref="E:Sybase.DataWindow.DataWindowControl.BeginRetrieve"/><seealso cref="E:Sybase.DataWindow.DataWindowControl.RowRetrieved"/>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.BeginRetrieve">
            <summary>Occurs when the retrieval from the database is about to begin.</summary><remarks><b>BeginRetrieve</b> is triggered when the <see cref="M:Sybase.DataWindow.DataWindowControl.Retrieve(System.Data.DataTable)"/> method is invoked.</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.EndRetrieve"/><seealso cref="E:Sybase.DataWindow.DataWindowControl.RowRetrieved"/>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.RowRetrieved">
            <summary>Occurs after each row has been retrieved.</summary><remarks>To cancel the retrieval of the remaining rows of a result set, set the <see cref="P:Sybase.DataWindow.RowRetrievedEventArgs.Cancel"/> property of the
			associated <see cref="T:Sybase.DataWindow.RowRetrievedEventArgs"/> object to <c>true</c>.</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.BeginRetrieve"/><seealso cref="E:Sybase.DataWindow.DataWindowControl.EndRetrieve"/>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.RowFocusChanged">
            <summary>Occurs when the current row changes.</summary><remarks>
				<para>The <see cref="M:Sybase.DataWindow.DataWindowControl.SetRow(System.Int32)"/> method, as well as user actions,
				can trigger the <b>RowFocusChanged</b> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemFocusChanged"/> events.</para>
				<para>When you use the <see cref="M:Sybase.DataWindow.DataWindowControl.ScrollToRow(System.Int32)"/> method to change focus, the <see cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanging"/> event is
         triggered before the scroll occurs, and the <b>RowFocusChanged</b> event is triggered after
         the scroll occurs.</para>
				<para>In a read-only DataWindow, when you click on any column that is not
         in the current row, the <see cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanging"/> and <b>RowFocusChanged</b> events fire, but the current
         column is not changed. The current column remains at 0, since no column can have focus.
         DataWindows are read-only if updates are not allowed, all tab orders are set to 0, or all
         tab columns are protected.</para><para>If focus is on an editable column in a DataWindow, the <see cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanging"/> and <b>RowFocusChanged</b> events
         do not fire when you click on a protected column or on a column whose tab order is 0.
         The focus remains on the current, editable column in the current row.</para>
				<para>If focus moves off an editable column in an updatable DataWindow, the DataWindow switches
         to read-only mode. This can happen when the last row in the DataWindow does not have an
         editable column. In this case, tabbing off the last editable column causes the row focus
         to move to the row following the row with the last editable column. The DataWindow then
         remains in read-only mode until focus is given to an editable column.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanging"/>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.RowFocusChanging">
            <summary>Occurs when the current row is about the change.</summary><remarks>
			<para>You can cancel this event, and the subsequent <see cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanged"/> event by setting the <see cref="P:Sybase.DataWindow.RowFocusChangingEventArgs.Cancel"/>
			property of the associated <see cref="T:Sybase.DataWindow.RowFocusChangingEventArgs"/> object to <c>true</c>.</para>
				<para>Typically the <b>RowFocusChanging</b> event is coded to respond to a mouse click or keyboard
         action that would change the current row in the DataWindow object. The following methods can also
         trigger the <b>RowFocusChanging event</b>, as well as the <see cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemFocusChanged"/> events,
         when the action changes the current row:
         <list type="bullet">
         <item><see cref="M:Sybase.DataWindow.DataWindowControl.SetRow(System.Int32)"/></item>
         <item><see cref="M:Sybase.DataWindow.DataWindowControl.Retrieve(System.Data.DataTable)"/></item>
         <item><see cref="M:Sybase.DataWindow.DataWindowControl.DeleteRow(System.Int32)"/></item>
         <item><see cref="M:Sybase.DataWindow.DataWindowControl.RowsCopy(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)"/></item>
         <item><see cref="M:Sybase.DataWindow.DataWindowControl.RowsMove(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)"/></item>
         <item><see cref="M:Sybase.DataWindow.DataWindowControl.RowsDiscard(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer)"/></item>
      	  </list>
 	 In these cases, the <b>RowFocusChanging</b> event code can prevent the changing of the
         DataWindow object's current row only. The code cannot prevent the data from being changed
         (for example, the rows still get moved). </para>
				<para>When you use the <see cref="M:Sybase.DataWindow.DataWindowControl.ScrollToRow(System.Int32)"/> method to change focus, the <b>RowFocusChanging</b> event is
         triggered before the scroll occurs, and the <see cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanged"/> event is triggered after
         the scroll occurs.</para>
				<para>In a read-only DataWindow, when you click on any column that is not
         in the current row, the <b>RowFocusChanging</b> and <see cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanged"/> events fire, but the current
         column is not changed. The current column remains at 0, since no column can have focus.
         DataWindows are read-only if updates are not allowed, all tab orders are set to 0, or all
         tab columns are protected.</para><para>If focus is on an editable column in a DataWindow, the <b>RowFocusChanging</b> and <see cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanged"/>
         events do not fire when you click on a protected column or on a column whose tab order is 0.
         The focus remains on the current, editable column in the current row.</para>
				<para>If focus moves off an editable column in an updatable DataWindow, the DataWindow switches
         to read-only mode. This can happen when the last row in the DataWindow does not have an
         editable column. In this case, tabbing off the last editable column causes the row focus
         to move to the row following the row with the last editable column. The DataWindow then
         remains in read-only mode until focus is given to an editable column.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanged"/>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.ScrollHorizontal">
            <summary>Occurs when the user scrolls right or left with the tab or arrow keys or the scroll bar.</summary><seealso cref="E:Sybase.DataWindow.DataWindowControl.ScrollVertical"/>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.ScrollVertical">
            <summary>Occurs when the user scrolls up or down with the tab or arrow keys or the scroll bar.</summary><seealso cref="E:Sybase.DataWindow.DataWindowControl.ScrollHorizontal"/>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.SqlPreview">
            <summary>Occurs immediately before a SQL statement is submitted to the database.</summary><remarks>The <b>SqlPreview</b> event allows you to intercept all SQL statement issued by a DataStore or DataWindowControl to the database.  Properties of
			the associated <see cref="T:Sybase.DataWindow.SqlPreviewEventArgs"/> object contain the context under which the statement is issued and the text of the SQL itself, allowing
			developers to inspect, change or even cancel the request that is forwarded to the database.</remarks>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.EndUpdate">
            <summary>Occurs when all the updates to the database have completed.</summary><seealso cref="E:Sybase.DataWindow.DataWindowControl.BeginUpdate"/>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.BeginUpdate">
            <summary>Occurs just before changes are sent to the database.</summary><remarks>
				<b>BeginUpdate</b> is triggered when the <see cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/> method is invoked.</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.EndUpdate"/>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.DropDown">
            <summary>Occurs just before the list provided by a DropDownDataWindow is displayed.</summary>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.ButtonClicking">
            <summary>Occurs when a user clicks a button inside a DataWindowControl.</summary><remarks><para><b>ButtonClicking</b> fires immediately before the <see cref="E:Sybase.DataWindow.DataWindowControl.ButtonClicked"/> event.</para>
			<para>You can cancel the action by setting the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property of the associate <see cref="T:System.ComponentModel.CancelEventArgs"/> object to <c>true</c>.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.ButtonClicked"/>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.ButtonClicked">
            <summary>Occurs when a user clicks a button inside a DataWindowControl.</summary><remarks><para><b>ButtonClicked</b> fires immediately after the <see cref="E:Sybase.DataWindow.DataWindowControl.ButtonClicking"/> event as long as that even has not been cancelled.</para></remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.ButtonClicking"/>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.GraphCreated">
            <summary>Occurs after a graph is populated with data, but before it is displayed.</summary><remarks>Add code to this event to modify the graph layout before it is displayed to the user.</remarks>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.TreeViewExpanding">
            <summary> Occurs when a TreeView node is about to expand.</summary><remarks><b>TreeViewExpanding</b> is triggered when one of the Expand methods is called or when the user clicks on the expand icon.</remarks>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.TreeViewCollapsing">
            <summary> Occurs when a TreeView node is about to collapse.</summary><remarks><b>TreeViewCollapsing</b> is triggered when one of the Collapse methods is called or when the user clicks on the collapse icon.</remarks>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.TreeViewNodeSelecting">
            <summary> Occurs when a TreeView node is about to be selected.</summary><remarks>
				<b>TreeViewNodeSelecting</b> is triggered when one of the SelectTreeNode methods is called or when the user selects a TreeView node using mouse.
			</remarks>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.TreeViewExpanded">
            <summary> Occurs when a TreeView node has expanded.</summary><remarks><b>TreeViewExpanded</b> is triggered after one of the Expand methods is called or when the user clicks on the expand icon if the action was not canceled in the <see cref="E:Sybase.DataWindow.DataWindowControl.TreeViewExpanding"></see> event.</remarks>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.TreeViewCollapsed">
            <summary> Occurs when a TreeView node has collapsed.</summary><remarks><b>TreeViewCollapse</b> is triggered after one of the Collapse methods is called or when the user clicks on the collapse icon if the action was not canceled in the <see cref="E:Sybase.DataWindow.DataWindowControl.TreeViewCollapsing"></see> event.</remarks>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.TreeViewNodeSelected">
            <summary> Occurs when a TreeView node is selected.</summary><remarks>
				<b>TreeViewNodeSelected</b> is triggered when one of the SelectTreeNode methods is called or when the user selects a TreeView node using mouse.
			</remarks>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.DbError">
            <summary>
            This event is designed for DataWindow .NET internal usage only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="E:Sybase.DataWindow.DataWindowControl.WSError">
            <summary>
            This event is designed for DataWindow .NET internal usage only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.DataWindowObjectBrowserForm">
            <summary>
            Summary description for DataWindowObjectBrowserForm.
            </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowObjectBrowserForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowObjectBrowserForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowObjectBrowserForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.ResHelper">
            <summary>
            Summary description for ResHelper.
            This is a helper class for get the resources from DataWindow.resx or DataWindow.dll
            assembly manifest resources. It contains a lot of static methods which can be used 
            directly to get the resource string, int, bitmap,....
            This class can not be instantiated outside. ResHelper class itself maintains
            a single static instance of ResHelper
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.DataStore">
            <summary>A nonvisual container for a DataWindow object. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataStore.PrimaryData">
            <summary>
            Data rows that are displayed in the DataWindow.
            </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataStore.FilteredData">
            <summary>
            Data rows that have been filtered out of the PrimaryData.
            </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataStore.DeletedData">
            <summary>
            Data rows that have been deleted.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.#ctor(System.ComponentModel.IContainer)">
            <summary>Initializes a <b>DataStore</b> when added to a form using drag-and-drop within the development environment. 
      </summary><exception cref="T:Sybase.DataWindow.DataWindowServerLoadFailedException">DataWindow .NET could not be loaded.  This may indicate a configuration or installation issue involving PBDWN110.dll.</exception><remarks>Visual Studio .NET adds an invocation to this constructor automatically when you drag a DataStore from the Toolbox onto a form.</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.#ctor">
            <overloads>Initializes a new instance of the <b>DataStore</b> class.</overloads><summary>Initializes an empty <b>DataStore</b>.</summary><exception cref="T:Sybase.DataWindow.DataWindowServerLoadFailedException">DataWindow .NET could not be loaded.  This may indicate a configuration or installation issue involving PBDWN110.dll.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.#ctor(System.String,System.String)">
            <summary>Initializes a <b>DataStore</b> with a DataWindow object located in a library list.</summary><param name="InitLibraryList">A list of libraries (PBD or PBL), one of which contains the DataWindow object to be used.</param><param name="InitDataWindowObject">The name of the DataWindow object.</param><exception cref="T:Sybase.DataWindow.DataWindowLoadFailedException">
				<i>InitDataWindowObject</i> could not be found in <i>InitLibraryList</i>
			</exception><exception cref="T:Sybase.DataWindow.DataWindowServerLoadFailedException">DataWindow .NET could not be loaded.  This may indicate a configuration or installation issue involving PBDWN110.dll.</exception><example>
				<code>dsEmp = New Sybase.DataWindow.DataStore("employees.pbd;company.pbd","d_emp")</code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.BindAdoDataTable(System.Data.DataTable)">
            <summary>Binds the DataTable data to the DataWindow and copies DataTable data to the DataWindow.
			</summary><remarks>The BindAdoDataTable method does not support the Crosstab presentation style.
			</remarks><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.BindDataView(System.Data.DataView)">
            <summary>
			Binds the DataView data to the DataWindow object and copies the data from the DataView to the DataWindow.
			</summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.Collapse(System.Int32,System.Int32)">
            <summary>
			Collapse a group which has the specified group level and includes the specified row.
			</summary><param name="rowNumber">
			The number of the row that belongs to the group that will be collapsed.
			</param><param name="groupLevel">
			The level of the group that will be collapsed.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.CollapseAll">
            <summary>
			Collapses all groups.
			</summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.CollapseAllChildren(System.Int32,System.Int32)">
            <summary>
			Collapse a group and all child groups beneath it.
			</summary><param name="rowNumber">
			The number of the row that belongs to the group that will be collapsed.
			</param><param name="groupLevel">
			The level of the group that will be collapsed.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.CollapseLevel(System.Int32)">
            <summary>
			Collapse all groups within the specified group level.
			</summary><param name="level">
			The level of the groups that will be collapsed.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.Create(System.String)">
            <summary>Dynamically creates and assigns a DataWindow object to a DataWindowControl or DataStore. 
      </summary><param name="Syntax">A string containing the DataWindow source code for the DataWindow object.</param><exception cref="T:System.ArgumentNullException">
				<i>Syntax</i> is null. </exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>Use the <see cref="M:Sybase.DataWindow.DataWindowSyntaxGenerator.DataWindowSyntaxFromSql(Sybase.DataWindow.Transaction,System.String)"/> to create the
         DataWindow syntax based on a SQL statement. You can also use the 
         syntax of an existing DataWindow object as a template. To obtain the syntax, use the Export item on the BindAdoDataTable is not supported for crosstab DataWindows.</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.DbCancel">
            <summary>Cancels the retrieval in process. 
      </summary><exception cref="T:System.InvalidOperationException">The object is not connected to a database. </exception><exception cref="T:System.NotSupportedException">The object is a DataWindowChild that is a DropDownDataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<!-- You can let users cancel a retrieval in progress by setting the Async database parameter to 1 before beginning a retrieve.-->
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.Retrieve(System.Data.DataTable)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.DeleteRow(System.Int32)">
            <summary>Deletes a row from the DataWindow. 
      </summary><param name="RowNumber">The number of the row to be deleted. If 0, the current row will be deleted.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not valid.</exception><exception cref="T:System.NotSupportedException">The assigned DataWindow object is a Crosstab.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The designated row is removed from the DataWindow's Primary buffer. If the DataWindow is not updatable, 
         all storage associated with the row is cleared. If the DataWindow is updatable, <b>DeleteRow</b> moves the row to 
         the DataWindow's Delete buffer. The row is not deleted from the database table until the application calls the <see cref="M:Sybase.DataWindow.DataStore.UpdateData"/> method. After 
         the <see cref="M:Sybase.DataWindow.DataStore.UpdateData"/> method has updated the database and the status flags are reset, the storage associated 
         with the row is cleared.</para>
			</remarks><example>This example shows the code for a button that deletes the last row from <c>dwItems</c>:
         <code>      
         [Visual Basic]
         Private Sub cb_delitem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cb_delitem.Click
            dwItems.DeleteRow(dwItems.RowCount)
         End Sub
         
         [C#]
         private void cb_delitem_Click(object sender, System.EventArgs e)
         {
            dwItems.DeleteRow(dwItems.RowCount);
         }
         </code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.Describe(System.String)">
            <summary>Reports the values of properties of a DataWindow object and the controls within it. 
      </summary><returns>A string that includes a value for each property.</returns><param name="Syntax">A string whose value is a blank-separated list of properties.</param><exception cref="T:System.ArgumentNullException">
				<i>Syntax</i> is null.</exception><exception cref="T:System.ArgumentException">
				<i>Syntax</i> contains an invalid property.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>
				<para>Use <b>Describe</b> to understand the structure of a DataWindow object. For example, you can find which 
         bands the DataWindow uses and the datatypes of its columns.</para>
				<para>
					<b>Describe</b> differs from <see cref="M:Sybase.DataWindow.DataStore.GetProperty(System.String)"/> in that it allows you go retrieve multiple properties in one invocation.</para>
			</remarks><example>This Visual Basic example changes a crosstab DataWindow to have a more formatted appearance: 
         <code>
         Private Sub ChangeCrossTab()
         
            'This function will dynamically change a crosstab to have a
            'more formatted appearance.
         
            Dim ColumnCount As Integer
            Dim Counter As Integer
            Dim CurrentIndex, NextIndex As Integer
         
            Dim Split, DWBand, ObjectType As String
            Dim DWObjects, DWObject, ModString As String
            Dim Temp As String
            Dim ColName As String
         
            Try
               ' returns a list of all of the DWObjects on the datawindow
               DWObjects = dwCust.Describe("datawindow.objects")
         
               CurrentIndex = 0
               NextIndex = DWObjects.IndexOf("\t")
         
               Do Until NextIndex = -1
                  DWObject = Mid(DWObjects, CurrentIndex, NextIndex - CurrentIndex)
         
                  'center text in the heading
                  DWBand = dwCust.Describe(DWObject + ".Band")
                  If DWBand.ToLower().Substring(0, 5).Equals("header") Then
                     ModString = ModString + DWObject + ".Alignment=2 " + DWObject + ".Font.Weight=700 "
                  End If
         
                  'format detail and total columns differently
                  ObjectType = dwCust.Describe(DWObject + ".Type")
                  If ObjectType.ToLower().Equals("compute") Then
                     Temp = dwCust.Describe(DWObject + ".Expression")
                     If Temp.IndexOf("sum") &gt; 0 Then
                        ModString = ModString + DWObject + ".Format='$#,##0' "
                     ElseIf Temp.IndexOf("count") &gt; 0 Then
                        ModString = ModString + DWObject + ".Format='#,##0' "
                     End If
                  ElseIf ObjectType.ToLower().Equals("column") Then
                     Temp = dwCust.Describe(DWObject + ".Coltype")
                     If Temp.IndexOf("dec") &gt; 0 Then
                        ModString = ModString + DWObject + ".Format='$#,##0.00' "
                     ElseIf Temp.IndexOf("num") &gt; 0 Then
                        ModString = ModString + DWObject + ".Format='#,##0.00' "
                     End If
                  End If
         
                  'loop through all the DWObjects on the datawindow
                  CurrentIndex = NextIndex + 1
                  NextIndex = DWObjects.IndexOf("\t", CurrentIndex)
               Loop
         
               dwCust.Modify(ModString)
         
            Catch ex As Exception
               ErrorHandler.HandleException(ex)
            End Try
         End Sub
         </code>
			</example><example>This line of code returns a string that lists all the controls in the DataWindow object contained in DW1:
         <code>str = DW1.Describe("datawindow.objects")</code>
			</example><seealso cref="M:Sybase.DataWindow.DataStore.GetProperty(System.String)"/><seealso cref="M:Sybase.DataWindow.DataStore.Modify(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.Expand(System.Int32,System.Int32)">
            <summary>
			Expand a group which has the specified group level and includes the specified row.
			</summary><param name="rowNumber">
			The number of the row that belongs to the group that will be expanded.
			</param><param name="groupLevel">
			The level of the group that will be expanded.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.ExpandAll">
            <summary>
			Expands all groups.
			</summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.ExpandAllChildren(System.Int32,System.Int32)">
            <summary>
			Expand a group and all child groups beneath it.
			</summary><param name="rowNumber">
			The number of the row that belongs to the group that will be expanded.
			</param><param name="groupLevel">
			The level of the group that will be expanded.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.ExpandLevel(System.Int32)">
            <summary>
			Expand all groups within the specified group level.
			</summary><param name="level">
			The level of the groups that will be expanded.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.Filter">
            <summary>Moves rows that do not match the current filter expression from the Primary buffer to the Filter buffer. 
      </summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>When the <see cref="M:Sybase.DataWindow.DataStore.Retrieve(System.Data.DataTable)"/> method retrieves rows
         into the DataWindow, it automatically uses the current filter (which may be part of the definition of the DataWindow object). You only need to call this method after changing 
         the filter expression with <see cref="M:Sybase.DataWindow.DataStore.SetFilter(System.String)"/> or <see cref="M:Sybase.DataWindow.DataWindowControl.FilterDialog"/> or if the data has changed because of processing or user input.</para>
				<para>When you filter a DataWindow with groups, you should call <see cref="M:Sybase.DataWindow.DataStore.CalculateGroups"/> after calling <b>Filter</b>.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetFilter(System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.FilterDialog"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.FindRow(System.String,System.Int32,System.Int32)">
            <summary>Finds the next row in a DataWindow which meets the specified condition. 
      </summary><returns>The number of the first row between <i>BeginRow</i> and <i>EndRow</i> that meets the search criteria, or 0 if there are no such rows.
         </returns><param name="Expression">A string whose value is a boolean expression to be used as the 
         search criteria.</param><param name="BeginRow">The row number at which to begin the search.</param><param name="EndRow">The row number at which to end the search.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>BeginRow</i> or <i>EndRow</i> is less than zero.</exception><exception cref="T:Sybase.DataWindow.InvalidExpressionException">
				<i>Expression</i> is not valid DataWindow expression syntax.</exception><exception cref="T:System.ArgumentNullException">
				<i>Expression</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The search is case sensitive.</para>
				<para>To search backwards, make <i>EndRow</i> less than <i>BeginRow</i>. Beware of creating an endless loop, which can occur if you are searching for all occurrences within a DataWindow and the last 
         row satisfies the search criteria. To solve this problem, you can make <i>EndRow</i> 1 greater than the number of rows, or exit the search loop when the current 
         row (<i>BeginRow</i> for that iteration of the loop) is greater than the row count.</para>
				<para>If the 
         text you want to find includes quotes, you must treat the nested quote as doubly nested; therefore, you cannot simply alternate double and 
         single quotes, as you can in most strings. For example, to find the name O'Neil, <i>Expression</i> can be:
         <c>"O~~~'Neil"</c> (3 tildes and single quote) or <c>"O~~~~~"Neil"</c> (5 tildes and double quote) but not <c>"O'Neil"</c> or 
         <c>"O~"Neil"</c>.</para>
			</remarks><example>This example finds the first row where the employee salary is greater than 50,000:
         <code>RowNumber = dwStatus.FindRow("emp_salary &gt; 50000", 1, dwStatus.RowCount)</code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.FindGroupChange(System.Int32,System.Int16)">
            <summary>Searches for the next break (change in value) within the specified group. 
      </summary><returns>The row number beginning the next grouping within the level specified by <i>GroupLevel</i>, or 0 if no such row.
         </returns><param name="RowNumber">The row number at which you want to begin searching for the next group break.</param><param name="GroupLevel">The level of the group in which you are searching for the next break. </param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:System.ArgumentOutOfRangeException">
				<i>GroupLevel</i> is less than 0.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>If <i>RowNumber</i> begins a new grouping at <i>GroupLevel</i>, then that row is the one returned. 
         To continue searching for subsequent breaks, increment the starting row so that the search resumes with 
         the next row in the group. 
      </remarks><example>This statement searches for the first break in group 2 within <c>dwRegions</c> that occurs at or after row 5:
         <code>RowNumOfNextBreak = dwRegions.FindGroupChange(5, 2)</code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Reports the next row and column that is both required and currently contains a null value. 
      </summary><param name="RowNumber">The first row to be searched. Upon return <i>RowNumber</i> also 
         stores the number of the found row.</param><param name="ColumnNumber">The number of the first column to be searched. Upon return <i>ColumnNumber</i>
         also stores the number of the found column.</param><param name="Buffer">The DataWindow buffer you want to search 
         for required columns. Valid buffers are Primary and Filter.</param><param name="UpdateOnly">A boolean value specifying whether all rows and columns should be searched or only
         rows that have been modified.</param><exception cref="T:System.ArgumentOutOfRangeException">
				<i>Buffer</i> specified the Delete buffer.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>For <b>FindNextRequiredColumn</b> to report an empty required column, the column's value must actually be null, 
         not an empty string. To make a column required, set the <c>Edit.Required</c> property for the DataWindow object to <c>true</c> in 
         code or check the Required check box for the column in the Edit page in the Properties view in DataWindow Designer.</para>
				<para>Additionally, when the user modifies a row and leaves a column empty, the new value is an empty string, unless the 
         column's edit style has the Empty String Is Null check box checked; therefore, <b>FindNextRequiredColumn</b> does not report empty required 
         columns in modified rows unless this property is set.</para>
				<para>New rows have null values in their columns, unless the columns have default values. If <i>UpdateOnly</i> is <c>false</c>, 
         <b>FindNextRequiredColumn</b> reports null required columns in new rows. If <i>UpdateOnly</i> is <c>true</c>, null columns in new rows are 
         reported only if one or more of the columns within that row contains data.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetChanges">
            <summary>Retrieves changes made to a DataWindowControl or DataStore in a format suitable for serialization in .NET remoting applications. 
      </summary><returns>A serializable object containing the changes.</returns><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>GetChanges</b> is used in conjunction with <see cref="M:Sybase.DataWindow.DataStore.SetChanges(Sybase.DataWindow.DataWindowChanges)"/> to synchronize multiple DataWindowControls or 
         DataStores. <b>GetChanges</b> retrieves the data buffers and status flags for modified rows, and <see cref="M:Sybase.DataWindow.DataStore.SetChanges(Sybase.DataWindow.DataWindowChanges)"/>
         applies the changes to another DataWindowControl or DataStore.</para>
				<!-- Need good remoting example here -->
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetChanges(Sybase.DataWindow.DataWindowChanges)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetFullState"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore._GetChanges(Sybase.DataWindow.DataWindowChanges@,System.Int32@)">
            <summary>
            This method is designed for DataWindow .NET internal usage only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetChild(System.String)">
            <summary>Provides a reference to a DropDownDataWindow or to a report in a composite DataWindow. 
      </summary><returns>A DataWindowChild object.</returns><param name="ChildName">The name of a column with a DropDownDataWindow edit style or of a report in a composite DataWindow.</param><exception cref="T:Sybase.DataWindow.ChildNotFoundException">
				<i>ChildName</i> is not a DropDownDataWindow column or a report.</exception><exception cref="T:System.ArgumentNullException">
				<i>ChildName</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>A report is a read-only DataWindow 
         that is part of a composite DataWindow object. When you define a composite 
         DataWindow in DataWindow Designer, each report is given a name. You can see the name in the Name 
         option of the Properties view. You must use the report name (not the name of the DataWindow object 
         in which the report has been placed) when calling <b>GetChild</b>.</para>
				<para>Use <b>GetChild</b> when you need to explicitly retrieve data for a DropDownDataWindow or a report. Although 
         the DataWindow server automatically retrieves data for the DropDownDataWindow or report when the main DataWindow 
         is displayed, you need to explicitly retrieve data when there are retrieval arguments or when 
         conditions change and you want to retrieve new rows.</para>
				<para>You cannot use <b>GetChild</b> to get a reference to a report in a composite DataWindow when the report 
         itself is a composite or nested DataWindow.</para>
				<para>Changing certain property values using the <see cref="M:Sybase.DataWindow.DataStore.Modify(System.String)"/> or <see cref="M:Sybase.DataWindow.DataStore.SetProperty(System.String,System.String)"/> methods can cause the 
				reference returned by <b>GetChild</b> to 
         become invalid. Best practices dictate calling <b>GetChild</b> again after such changes.</para>
			</remarks><example>In a composite DataWindow there are two reports: orders and current inventory. The orders report 
         has a retrieval argument for selecting the order status. This report will display open orders. The composite 
         DataWindow is displayed in a DataWindow control called <c>dwNews</c>, and the reports are named <c>orders</c> and 
         <c>current_inv</c>. The following code in the Load event of the form that contains <c>dwNews</c> provides a retrieval 
         argument for <c>orders</c>.<code>
         Dim dwcOrders as Sybase.DataWindow.DataWindowChild
         Try
            dwcOrders = dwNews.GetChild("orders")
            dwcOrders.SetTransaction(myTrans)
            dwcOrders.Retrieve("open")
         Catch NoSuchChild As Sybase.DataWindow.ChildNotFoundException
            ' handle condition where order is not a valid child DataWindow
         Catch DbException As Sybase.DataWindow.DbErrorException
            ' handle database retrieval error
         End Try
         </code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetColumnNumber">
            <summary>Obtains the number of the current column.</summary><returns>Returns the number of the current column, or 0 if no column is current.</returns><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>A column becomes the current column after the user tabs to it or clicks it or if 
         the <see cref="M:Sybase.DataWindow.DataStore.SetColumn(System.Int16)"/> method is called on the column. A column cannot be current if it cannot be edited (if it 
         has a <see cref="P:Sybase.DataWindow.GraphicObjectEditableColumn.TabOrder"/> value of 0). A DataWindowControl always has a current column, 
         even when the control is not active, as long as there is at least one editable column. 
      </remarks><example>This statement returns the number of the current column in <c>dwEmp</c>:
         <code>currentColNum = dwEmp.GetColumn()</code>
			</example><seealso cref="M:Sybase.DataWindow.DataStore.GetColumnName"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetColumnName">
            <summary>Obtains the name of the current column.</summary><returns>Returns the name of the current column, or the empty string ("") if no 
         column is current.</returns><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>A column becomes the current column after the user tabs to it or clicks it or if 
         the <see cref="M:Sybase.DataWindow.DataStore.SetColumn(System.Int16)"/> method is called on the column. A column cannot be current if it cannot be edited (if it 
         has a <see cref="P:Sybase.DataWindow.GraphicObjectEditableColumn.TabOrder"/> value of 0). A DataWindowControl always has a current column, 
         even when the control is not active, as long as there is at least one editable column. 
      </remarks><example>This statement returns the name of the current column in <c>dwEmp</c>:
         <code>currentColName = dwEmp.GetColumnName()</code>
			</example><seealso cref="M:Sybase.DataWindow.DataStore.GetColumnNumber"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetColumnObjectByNumber(System.Int16)">
            <summary>Returns a column within the DataWindow.</summary><returns>An instance of the <see cref="T:Sybase.DataWindow.GraphicObjectColumn"/> class representing the column.</returns><param name="ColumnNumber">The number of the column to be returned.</param><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is not valid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<see cref="T:Sybase.DataWindow.GraphicObjectColumn"/> is an abstract class, and the actual value returned will be:</para>
				<list type="bullet">
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectBlobColumn"/> for an OLE-Blob column,</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectComputedColumn"/> for a computed column, or</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectEditableColumn"/> for a database column.</item>
				</list>
				<para>After narrowing the returned object to one of these classes, you can access some of the more common properties of the object such as format, border style, X and Y coordinates, and colors.
				Additionally, you can use the <see cref="M:Sybase.DataWindow.DataStore.Modify(System.String)"/> or <see cref="M:Sybase.DataWindow.DataStore.SetProperty(System.String,System.String)"/> methods to modify properties that are not exposed by the <see cref="T:Sybase.DataWindow.GraphicObject"/> classes.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataStore.GetObjectByName(System.String)"/> method to get any control on a DataWindow, including a column,
				 when you know the name of that control.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetObjectByName(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetColumnValidation(System.String)">
            <summary>Obtains the validation rule for a DataWindow column given the column name.
      </summary><returns>The validation rule for the column, or an empty string ("")
         if no validation rule is defined for the column.</returns><param name="ColumnName">The name of the column for which you want the validation rule.</param><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>You can use <b>GetColumnValidation</b> to save the current validation rule before calling <see cref="M:Sybase.DataWindow.DataStore.SetColumnValidation(System.Int16,System.String)"/> to change 
         the rule temporarily.
      </remarks><example>These statements save the validation rule for the <c>salary</c> column in the DataWindowControl <c>dwEmp</c> in 
         the string <c>Rule1</c> and set the new validation rule to the string <c>Rule2</c>:
         <code>
         Dim Rule1 as String
         Dim Rule2 as String
         ' ...
         Rule1 = dwEmp.GetColumnValidation("salary")
         dwEmp.SetColumnValidation("salary", Rule2)
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataStore.SetColumnValidation(System.Int16,System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetColumnValidation(System.Int16)">
            <overloads>Obtains the validation rule for a DataWindow column.</overloads><summary>Obtains the validation rule for a DataWindow column given the column number.
      </summary><returns>The validation rule for the column, or an empty string ("")
         if no validation rule is defined for the column.</returns><param name="ColumnNumber">The column number for which you want the validation rule.</param><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>You can use <b>GetColumnValidation</b> to save the current validation rule before calling <see cref="M:Sybase.DataWindow.DataStore.SetColumnValidation(System.Int16,System.String)"/> to change 
         the rule temporarily.
      </remarks><example>These statements save the validation rule for column 7 in the DataWindowControl <c>dwEmp</c> in 
         the string <c>Rule1</c> and set the new validation rule to the string <c>Rule2</c>:
         <code>
         Dim Rule1 as String
         Dim Rule2 as String
         ' ...
         Rule1 = dwEmp.GetColumnValidation(7)
         dwEmp.SetColumnValidation(7, Rule2)
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataStore.SetColumnValidation(System.Int16,System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetFullState">
            <summary>Retrieves the contents of a DataWindowControl or DataStore in a format suitable for serialization in .NET remoting applications. 
       
      </summary><returns>A serializable object representing the contents and format of the DataWindow.</returns><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>GetFullState</b> retrieves the entire state of a DataWindowControl or DataStore, including the DataWindow 
         object specification, the data buffers, and the status flags. When you call <see cref="M:Sybase.DataWindow.DataStore.SetFullState(Sybase.DataWindow.DataWindowFullState)"/> to apply the 
         DataWindowFullState object created by <b>GetFullState</b> to another DataWindowControl (or DataStore), the target DataWindowControl
         (or DataStore) has enough information to 
         recreate the source DataWindow.  If the target already has a DataWindow object assigned, it will be overwritten.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetFullState(Sybase.DataWindow.DataWindowFullState)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetChanges"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore._GetFullState(Sybase.DataWindow.DataWindowFullState@,System.Int32@)">
            <summary>
            This method is designed for DataWindow .NET internal usage only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemDate(System.Int32,System.Int16)">
            <overloads>Gets a Date value from a DataWindow column.</overloads><summary>Gets the current Date value from a DataWindow column within a row of the Primary buffer given the column number.</summary><returns>The Date value located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.DateTime.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Date value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Date value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDate(RowNumber, ColumnNumber, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDate</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Date value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDate(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemDate(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a Date value from a DataWindow column given the column number.</summary><returns>The original or current Date value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.DateTime.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Date value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Date value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDate</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Date value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDate(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemDate(System.Int32,System.String)">
            <summary>Gets the current Date value from a DataWindow column within a row of the Primary buffer given the column name.</summary><returns>The Date value located at <i>RowNumber</i> and <i>ColumnName</i> as a System.DateTime.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Date value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Date value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDate(RowNumber, ColumnName, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>Use the <see cref="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDate</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Date value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDate(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemDate(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a Date value from a DataWindow column given the column name.</summary><returns>The original or current Date value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.DateTime.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Date value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Date value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use the <see cref="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDate</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Date value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDate(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemDateTime(System.Int32,System.Int16)">
            <overloads>Gets a DateTime value from a DataWindow column.</overloads><summary>Gets the current DateTime value from a DataWindow column within a row of the Primary buffer given the column number. 
      </summary><returns>The DateTime located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.DateTime.
				<note>The DataWindow DateTime datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemDateTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The DateTime value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a DateTime value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDateTime(RowNumber, ColumnNumber, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDateTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the DateTime value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDate(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a DateTime value from a DataWindow column given the column number.
      </summary><returns>The DateTime located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.DateTime.
				<note>The DataWindow DateTime datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemDateTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The DateTime value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a DateTime value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDateTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the DateTime value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDate(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemDateTime(System.Int32,System.String)">
            <summary>Gets the current DateTime value from a DataWindow column within a row of the Primary buffer given the column name.
      </summary><returns>The DateTime located at <i>RowNumber</i> and <i>ColumnName</i> as a System.DateTime.
				<note>The DataWindow DateTime datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemDateTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The DateTime value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a DateTime value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDateTime(RowNumber, ColumnName, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>Use the <see cref="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDateTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the DateTeime value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDate(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a DateTime value from a DataWindow column given the column name.</summary><returns>The DateTime located at <i>RowNumber</i> and <i>ColumnName</i> as a System.DateTime.
				<note>The DataWindow DateTime datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemDateTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The DateTime value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a DateTime value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use the <see cref="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDateTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the DateTime value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDate(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <overloads>Gets a Date, Time, or DateTime value from a DataWindow column.</overloads><summary>Gets a Date, Time, or DateTime value from a DataWindow column given the column number.</summary><returns>The Date, Time, or DateTime value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlDateTime. 				<note>The DataWindow DateTime datatype stores fractional seconds to microsecond precision; the .NET System.Data.SqlTypes.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemSqlDateTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Date, Time, or DateTime value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>When the DataWindow column has a Date type, the resulting SqlDateTime variable will contain 00:00:00 as its time element.  When the DataWindow column has a Time type, the resulting SqlDateTime variable will contain the current date as its date element.</para>
				<para>In contrast to <see cref="M:Sybase.DataWindow.DataStore.GetItemDateTime(System.Int32,System.Int16)"/>, <b>GetItemSqlDateTime</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlDateTime.IsNull"/> property of the returned SqlDateTime structure.</para>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDate(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <overloads/><summary>Gets a Date, Time, or DateTime value from a DataWindow column given the column name.</summary><returns>The Date, Time, or DateTime value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlDateTime. 				<note>The DataWindow DateTime datatype stores fractional seconds to microsecond precision; the .NET System.Data.SqlTypes.SqlDateTime datatype stores only to millisecond precision. As a result, <b>GetItemSqlDateTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Date, Time, or DateTime value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>When the DataWindow column has a Date type, the resulting SqlDateTime variable will contain 00:00:00 as its time element.  When the DataWindow column has a Time type, the resulting SqlDateTime variable will contain the current date as its date element.</para>
				<para>In contrast to <see cref="M:Sybase.DataWindow.DataStore.GetItemDateTime(System.Int32,System.Int16)"/>, <b>GetItemSqlDateTime</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlDateTime.IsNull"/> property of the returned SqlDateTime structure.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDate(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemDecimal(System.Int32,System.Int16)">
            <overloads>Gets a Decimal value from a DataWindow column.</overloads><summary>Gets the current Decimal value from a DataWindow column within a row of the Primary buffer given the column number.       </summary><returns>The Decimal value located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.Decimal.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Decimal value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Decimal value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDecimal(RowNumber, ColumnNumber, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDecimal</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataStore.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Decimal value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDecimal(System.Int32,System.Int16,System.Decimal)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemDecimal(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a Decimal value from a DataWindow column given the column number.      </summary><returns>The original or current Decimal value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.Decimal.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Decimal value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Decimal value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDecimal</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataStore.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Decimal value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDecimal(System.Int32,System.Int16,System.Decimal)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemDecimal(System.Int32,System.String)">
            <summary>Gets the current Decimal value from a DataWindow column within a row of the Primary buffer given the column name.      </summary><returns>The Decimal value located at <i>RowNumber</i> and <i>ColumnName</i> as a System.Decimal.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Decimal value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Decimal value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDecimal(RowNumber, ColumnName, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>Use the <see cref="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDecimal</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataStore.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Decimal value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDecimal(System.Int32,System.Int16,System.Decimal)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a Decimal value from a DataWindow column given the column name.      </summary><returns>The original or current Decimal value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.Decimal.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Decimal value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Decimal value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use the <see cref="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDecimal</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataStore.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Decimal value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDecimal(System.Int32,System.Int16,System.Decimal)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <overloads/><summary>Gets a Decimal value from a DataWindow column given the column name.</summary><returns>The Decimal value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlDecimal.		</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Decimal value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In contrast to <see cref="M:Sybase.DataWindow.DataStore.GetItemDecimal(System.Int32,System.Int16)"/>, <b>GetItemSqlDecimal</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlDecimal.IsNull"/> property of the returned SqlDecimal structure.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDecimal(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemSqlDecimal(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <overloads>Gets a Decimal value from a DataWindow column.</overloads><summary>Gets a Decimal value from a DataWindow column given the column number.</summary><returns>The Decimal value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlDecimal.			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Decimal value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In contrast to <see cref="M:Sybase.DataWindow.DataStore.GetItemDecimal(System.Int32,System.Int16)"/>, <b>GetItemSqlDecimal</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlDecimal.IsNull"/> property of the returned SqlDecimal structure.</para>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDecimal(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemDouble(System.Int32,System.Int16)">
            <overloads>Gets an integer or floating point value from a DataWindow column.</overloads><summary>Gets the current integer or floating point value from a DataWindow column within a row of the Primary buffer given the column number. </summary><returns>The value located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.Double.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain an integer or floating point value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDouble(RowNumber, ColumnNumber, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDouble</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataStore.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDouble(System.Int32,System.Int16,System.Double)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemDouble(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets an integer or floating point value from a DataWindow column given the column number.      </summary><returns>The original or current value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.Double.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain an integer or floating point value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDouble</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataStore.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDouble(System.Int32,System.Int16,System.Double)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemDouble(System.Int32,System.String)">
            <summary>Gets the current integer or floating point value from a DataWindow column within a row of the Primary buffer given the column name.      </summary><returns>The value located at <i>RowNumber</i> and <i>ColumnName</i> as a System.Double.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain an integer or floating point value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDouble(RowNumber, ColumnName, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>Use the <see cref="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDouble</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataStore.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDouble(System.Int32,System.Int16,System.Double)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets an integer or floating point value from a DataWindow column given the column name.      </summary><returns>The original or current value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.Double.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain an integer or floating point value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use the <see cref="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDouble</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataStore.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDouble(System.Int32,System.Int16,System.Double)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets an integer or floating point value from a DataWindow column given the column name.</summary><returns>The value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlDouble.		</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain an integer or floating point value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In contrast to <see cref="M:Sybase.DataWindow.DataStore.GetItemDouble(System.Int32,System.Int16)"/>, <b>GetItemSqlDouble</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlDouble.IsNull"/> property of the returned SqlDouble structure.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDouble(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemSqlDouble(System.Int32,System.String,System.Data.SqlTypes.SqlDouble)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemSqlDouble(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <overloads>Gets an integer or floating point value from a DataWindow column.</overloads><summary>Gets an integer or floating point value from a DataWindow column given the column number.
      </summary><returns>The value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlDouble.			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain an integer or floating point value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In contrast to <see cref="M:Sybase.DataWindow.DataStore.GetItemDouble(System.Int32,System.Int16)"/>, <b>GetItemSqlDouble</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlDouble.IsNull"/> property of the returned SqlDouble structure.</para>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDouble(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemSqlDouble(System.Int32,System.String,System.Data.SqlTypes.SqlDouble)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer)">
            <overloads>Reports the modification status of a DataWindow column in a specific row.</overloads><summary>Reports the modification status of a DataWindow column in a specific row, given the column number.</summary><returns>The <see cref="T:Sybase.DataWindow.ItemStatus"/>.</returns><param name="RowNumber">The row number containing the column of interest.</param><param name="ColumnNumber">The column number for which you want the modification status.</param><param name="Buffer">The DataWindow buffer containing the row and column for which you want to get the status.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>Use <b>GetItemStatus</b> to understand what SQL statements will be generated for new and changed information when you update 
         the database. <see cref="M:Sybase.DataWindow.DataStore.UpdateData"/> generates a SQL UPDATE statement for rows that have columns with an ItemStatus of Modified. The columns themselves
         are included in the SET clause of the UPDATE statement.
 </remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.ItemStatus)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemStatus(System.Int32,System.String,Sybase.DataWindow.DataBuffer)">
            <summary>Reports the modification status of a DataWindow column in a specific row, given the column name.</summary><returns>The <see cref="T:Sybase.DataWindow.ItemStatus"/>.</returns><param name="RowNumber">The row number containing the column of interest.</param><param name="ColumnName">The name of the column for which you want the modification status.</param><param name="Buffer">The DataWindow buffer containing the row and column for which you want to get the status.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>Use <b>GetItemStatus</b> to understand what SQL statements will be generated for new and changed information when you update 
         the database. <see cref="M:Sybase.DataWindow.DataStore.UpdateData"/> generates a SQL UPDATE statement for rows that have columns with an ItemStatus of Modified. The columns themselves
         are included in the SET clause of the UPDATE statement.
         </remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.ItemStatus)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemString(System.Int32,System.Int16)">
            <overloads>Gets a String value from a DataWindow column.</overloads><summary>Gets the current String value from a DataWindow column within a row of the Primary buffer given the column number. </summary><returns>The value located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.String.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The String value is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemString(RowNumber, ColumnNumber, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>You can use <b>GetItemString</b> for columns of any datatype. If the column type is not a string, the return value is a string representation of the data with the column format applied.  If <i>ColumnNumber</i>'s datatype is string, any assigned format string is not applied and the raw data is returned.</para>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemString</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataStore.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemString(System.Int32,System.Int16,System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemString(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a String value from a DataWindow column given the column number.      </summary><returns>The original or current value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.String.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The String value is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>You can use <b>GetItemString</b> for columns of any datatype. If the column type is not a string, the return value is a string representation of the data with the column format applied.  If <i>ColumnNumber</i>'s datatype is string, any assigned format string is not applied and the raw data is returned.</para>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemString</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataStore.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Double value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemString(System.Int32,System.Int16,System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemString(System.Int32,System.String)">
            <summary>Gets the current String value from a DataWindow column within a row of the Primary buffer given the column name.     
      </summary><returns>The value located at <i>RowNumber</i> and <i>ColumnName</i> as a System.String.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The String value is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemString(RowNumber, ColumnName, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>You can use <b>GetItemString</b> for columns of any datatype. If the column type is not a string, the return value is a string representation of the data with the column format applied.  If <i>ColumnName</i>'s type is a string, any assigned format string is not applied and the raw data is returned, unless <i>ColumnName</i> is a computed column, in which case the format is applied.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemString</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataStore.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemString(System.Int32,System.Int16,System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a String value from a DataWindow column given the column name.      </summary><returns>The original or current value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.String.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The String value is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>You can use <b>GetItemString</b> for columns of any datatype. If the column type is not a string, the return value is a string representation of the data with the column format applied.  If <i>ColumnName</i>'s type is a string, any assigned format string is not applied and the raw data is returned, unless <i>ColumnName</i> is a computed column, in which case the format is applied.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemString</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataStore.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemString(System.Int32,System.Int16,System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a String value from a DataWindow column given the column name.</summary><returns>The String value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlString.		</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In contrast to <see cref="M:Sybase.DataWindow.DataStore.GetItemString(System.Int32,System.Int16)"/>, <b>GetItemSqlString</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlString.IsNull"/> property of the returned SqlString structure.</para>
				<para>You can use <b>GetItemSqlString</b> for columns of any datatype. If the column type is not a string, the return value is a string representation of the data with the column format applied.  If <i>ColumnName</i>'s datatype is a string, any assigned format string is not applied and the raw data is returned, unless <i>ColumnName</i> is a computed column, in which case the format is applied.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemString(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemSqlString(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <overloads>Gets a String value from a DataWindow column.</overloads><summary>Gets a String value from a DataWindow column given the column number.
      </summary><returns>The String value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlString.			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In contrast to <see cref="M:Sybase.DataWindow.DataStore.GetItemString(System.Int32,System.Int16)"/>, <b>GetItemSqlString</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlString.IsNull"/> property of the returned SqlString structure.</para>
				<para>You can use <b>GetItemSqlString</b> for columns of any datatype. If the column type is not a string, the return value is a string representation of the data with the column format applied.  If <i>ColumnNumber</i>'s datatype is a string, any assigned format string is not applied and the raw data is returned.</para>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemString(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemTime(System.Int32,System.Int16)">
            <overloads>Gets a Time value from a DataWindow column. </overloads><summary>Gets the current Time value from a DataWindow column within a row of the Primary buffer given the column number.
      </summary><returns>The Time value located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.DateTime.<note>The DataWindow Time datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Time value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Time value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemTime(RowNumber, ColumnNumber, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Time value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a Time value from a DataWindow column given the column number.      </summary><returns>The original or current Time value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.DateTime.<note>The DataWindow Time datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Time value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Time value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Time value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemTime(System.Int32,System.String)">
            <summary>Gets the current Time value from a DataWindow column within a row of the Primary buffer given the column name.   
      </summary><returns>The Time value located at <i>RowNumber</i> and <i>ColumnName</i> as a System.DateTime.<note>The DataWindow Time datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Time value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Time value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemTime(RowNumber, ColumnName, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>Use the <see cref="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Time value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetItemTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a Time value from a DataWindow column given the column name.  
      </summary><returns>The original or current Time value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.DateTime.<note>The DataWindow Time datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Time value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Time value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use the <see cref="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Time value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetObjectByName(System.String)">
            <summary>Returns a named control within the DataWindow object.</summary><returns>An instance of <see cref="T:Sybase.DataWindow.GraphicObject"/> representing the named control.</returns><param name="Name">The name of the control (e.g., column, button, text) within the DataWindow object.</param><exception cref="T:System.ArgumentNullException">
				<i>Name</i> is null.</exception><exception cref="T:System.ArgumentException">
				<i>Name</i> is not a valid control within the DataWindow object.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In most cases, you will need to cast the return value to the specific <see cref="T:Sybase.DataWindow.GraphicObject"/> descendant, namely: </para>
				<list type="bullet">
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectButton"/>
					</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectText"/>
					</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectPicture"/>
					</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectReport"/>
					</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectBlobColumn"/>
					</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectComputedColumn"/>
					</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectEditableColumn"/>
					</item>
				</list>
				<para>After narrowing the reference, you can directly modify some of the more common properties of the object
         such as format, border style, X and Y coordinates, and colors.  You can modify other properties not exposed in a <see cref="T:Sybase.DataWindow.GraphicObject"/> class using the <see cref="M:Sybase.DataWindow.DataStore.Modify(System.String)"/> or <see cref="M:Sybase.DataWindow.DataStore.SetProperty(System.String,System.String)"/> methods.</para>
				<para>To obtain a column object by the number of
         the column, use <see cref="M:Sybase.DataWindow.DataStore.GetColumnObjectByNumber(System.Int16)"/>.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetColumnObjectByNumber(System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.FindNextModifiedRow(System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Reports the next row that has been modified in the specified buffer. 
      </summary><returns>The number of the first modified row in <i>Buffer</i> after <i>RowNumber</i>, or 0 if there is no such row.</returns><param name="RowNumber">The number of the row after which to begin the search. Use a value of 0 to search from the beginning.</param><param name="Buffer">The DataWindow buffer in which to search.</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>FindNextModifiedRow</b> reports rows with a <see cref="T:Sybase.DataWindow.RowStatus"/> of 
         NewAndModified and Modified.</para>
				<para>The search begins in the row after the value you specify in <i>RowNumber</i>. 
         This is different from the behavior of <see cref="M:Sybase.DataWindow.DataStore.FindRow(System.String,System.Int32,System.Int32)"/>, <see cref="M:Sybase.DataWindow.DataStore.FindGroupChange(System.Int32,System.Int16)"/>, and <see cref="M:Sybase.DataWindow.DataWindowControl.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)"/>, which begin searching in the row you specify.</para>
			</remarks><example>These C# statements count the number or rows that were modified in the Primary buffer of <c>dwStatus</c>
         and then display a message reporting the number modified (thus reporting the same value as the <see cref="P:Sybase.DataWindow.DataStore.ModifiedCount"/> property):
         <code>
         int NbrRows, rowNum, count;
         
         dwStatus.AcceptText();
         NbrRows = dwStatus.RowCount;
         count = 0;
         rowNum = 0;
         do 
         {
            rowNum = dwStatus.FindNextModifiedRow(rowNum, Sybase.DataWindow.DataBuffer.Primary);
         
            if (rowNum &gt; 0) 
              count = count + 1;
            else
              rowNum = NbrRows;
         }
         while (rowNum &lt; NbrRows);
         
         MessageBox.Show(count.ToString() + " rows were modified.", "Modified Count");	
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataStore.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataStore.FindRow(System.String,System.Int32,System.Int32)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetProperty(System.String)">
            <summary>Returns a property value for a control within a DataWindow object.</summary><returns>The property value as a string.</returns><param name="Syntax">The DataWindow object property.</param><exception cref="T:System.ArgumentNullException">
				<i>Syntax</i> is null.</exception><exception cref="T:System.ArgumentException">
				<i>Syntax</i> is not a valid property.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>
				<para>This method can be used in lieu of <see cref="M:Sybase.DataWindow.DataStore.Describe(System.String)"/> whenever a single property value is desired. It can also be used to obtain property values not exposed by the <see cref="T:Sybase.DataWindow.GraphicObject"/> classes.</para>
				<para>See the <i>DataWindow .NET Programmer's Guide</i> for a complete list of DataWindow object properties that can be used with <b>GetProperty</b>
				</para>
			</remarks><example>This C# code gets the value of a property in a DataWindow object when the user selects 
         an object type (such as a label or a column) and an attribute (such as <c>color</c> or <c>font.face</c>) from 
         two list boxes:
         <code>
         string strObject, strAttr, strValue;
         
         strObject = (string)lbObjects.SelectedItem;
         strAttr = (string)lbAttributes.SelectedItem;
         
         strValue = DW1.GetProperty(strObject + "." + strAttr);
         
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataStore.SetProperty(System.String,System.String)"/><seealso cref="M:Sybase.DataWindow.DataStore.Describe(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetRowFromRowId(System.Int32)">
            <overloads>Gets a row number given the unique row identifier associated with that row. </overloads><summary>Gets the number of a row in the Primary buffer given the unique row identifier associated with that row. 
      </summary><returns>The row number.</returns><param name="RowId">The row identifier for which you want the associated row number.</param><exception cref="T:System.ArgumentException">
				<i>RowId</i> is not a valid row identifier, or the row is no longer in the Primary buffer.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>This method allows you to use a unique row identifier to obtain the current row number position within the Primary buffer. 
			The row identifier is not affected by operations such as 
         Insert, Delete, Filter, or Sort that may change the original order - and consequently the row numbers.
      </remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetRowIdFromRow(System.Int32)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetRowFromRowId(System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Gets the number of a row in the specified buffer given the unique row identifier associated with that row. 
      </summary><returns>The row number.</returns><param name="RowId">The row identifier for which you want the associated row number.</param><param name="Buffer">The DataWindow buffer containing the row.</param><exception cref="T:System.ArgumentException">
				<i>RowId</i> is not a valid row identifier, or the row is no longer in the <i>Buffer</i>.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>This method allows you to use a unique row identifier to obtain the current row number position within the Primary buffer. 
			The row identifier is not affected by operations such as 
         Insert, Delete, Filter, or Sort that may change the original order - and consequently the row numbers.
      </remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetRowIdFromRow(System.Int32)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetRowIdFromRow(System.Int32)">
            <overloads>Gets a unique row identifier for a given row. </overloads><summary>Gets a unique row identifier for the given row in the Primary buffer.</summary><returns>The unique row identifier.</returns><param name="RowNumber">The number of the row for which you want a unique row identifier.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not a valid row in the Primary buffer.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>The row identifier value is not the same as the row number value used by many DataWindow .NET
         methods. First 
         convert the unique row identifier into a row number by calling <see cref="M:Sybase.DataWindow.DataStore.GetRowFromRowId(System.Int32)"/>.
      </remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetRowFromRowId(System.Int32)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetRowIdFromRow(System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Gets a unique row identifier for the given row in the specified buffer.</summary><returns>The unique row identifier.</returns><param name="RowNumber">The number of the row for which you want a unique row identifier.</param><param name="Buffer">The DataWindow buffer containing the row for which you want the unique identifier.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not a valid row in <i>Buffer</i>.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>The row identifier value is not the same as the row number value used by many DataWindow .NET
         methods. First 
         convert the unique row identifier into a row number by calling <see cref="M:Sybase.DataWindow.DataStore.GetRowFromRowId(System.Int32)"/>.
      </remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetRowFromRowId(System.Int32)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Reports the modification status of a row in a DataWindow.
      </summary><returns>The <see cref="T:Sybase.DataWindow.RowStatus"/>.</returns><param name="RowNumber">The row number for which you want the status.</param><param name="Buffer">The DataWindow buffer containing the row.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>Use <b>GetRowStatus</b> to understand what SQL statements will be generated when you update the database. 
			For rows in the Primary and Filter buffers, <see cref="M:Sybase.DataWindow.DataStore.UpdateData"/>
         generates:
         <list type="bullet">
					<item>an INSERT statement for rows in the Primary and Filter buffers with the NewAndModified status;</item>
					<item>an UPDATE statement for rows in the Primary and Filter buffers with Modified status.  The generated
					SQL statement includes the columns that have an
					<see cref="T:Sybase.DataWindow.ItemStatus"/> of Modified within the SET clause; and</item>
					<item> a DELETE statement for rows in the Delete buffer that have a status of Modified or NotModified. 
					New and NewAndModified rows do not exist yet in the database;
         therefore, there is nothing to actually delete.</item>
				</list>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.RowStatus)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetSqlSelect">
            <summary>Returns the SQL SELECT statement that is the data source of a DataWindow.</summary><returns>A string containing the SQL SELECT statement that is the source of the DataWindow, 
			or an empty string ("") if the data source is not a SELECT statement.</returns><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>
				<para>When you want to change the SQL SELECT statement for a DataWindow or DataStore at runtime
         you can use <b>GetSqlSelect</b> to save the current SELECT statement before making the change.</para>
				<para>When you 
         define a DataWindow object graphically in DataWindow Designer, a special SELECT statement (called a 
         PBSELECT statement) is stored with the DataWindow object.  This database-vendor independent syntax is
         translated to native SQL when a connected <see cref="T:Sybase.DataWindow.Transaction"/> or 
         <see cref="T:Sybase.DataWindow.AdoTransaction"/>
         has been associated with the DataWindowControl or DataStore via the <see cref="M:Sybase.DataWindow.DataStore.SetTransaction(Sybase.DataWindow.AdoTransaction)"/> method.  If there is no
         associated connection when <b>GetSqlSelect</b> is invoked, the PBSELECT syntax is returned.
         </para>
				<para>
					<b>GetSqlSelect</b> is equivalent to the following:
				<list type="bullet">
						<item>GetProperty("datawindow.table.select")</item>
						<item>Describe("datawindow.table.select")</item>
					</list>
				</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetSqlSelect(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.CalculateGroups">
            <summary>Recalculates the breaks in the grouping levels in a DataWindow. 
      </summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>Use <b>CalculateGroups</b> to force the DataWindow object to recalculate the breaks in the 
         grouping levels after you have added or modified rows in a DataWindow. <b>CalculateGroups</b> does not 
         sort the data before it recalculates the breaks; therefore, unless you populated the DataWindow 
         in a sorted order, call the <see cref="M:Sybase.DataWindow.DataStore.Sort"/> method to sort the data before you call <b>CalculateGroups</b>. 
      </remarks><example>This code imports new rows from a file into the DataWindow <c>dwEmp</c> and recalculates 
         the group breaks after applying the default sort ordering stored as part of the DataWindow object:
         <code>
         dwEmp.ImportFile("d:\employee.txt", Sybase.DataWindow.FileSaveAsType.Text)
         dwEmp.Sort()
         dwEmp.CalculateGroups()
         dwEmp.Refresh()
         </code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.ImportClipboard(Sybase.DataWindow.FileSaveAsType)">
            <overloads>Inserts text data from the clipboard into a DataWindow.</overloads><summary>Inserts comma-separated, tab-separated, or XML data from the clipboard into a DataWindow.</summary><returns>The number of rows that were imported.</returns><param name="ImportType">The text format, either Csv, Text, and Xml.</param><exception cref="T:System.ArgumentException">
				<i>ImportType</i> is not Csv, Text or Xml.</exception><exception cref="T:System.InvalidOperationException">Data in one of the columns has an incompatible datatype.</exception><exception cref="T:System.NotSupportedException"><b>ImportClipboard</b> is not supported for crosstab and composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The clipboard data must be formatted in tab-separated (Text) or comma-separated (Csv) columns or as 
         XML. The datatypes and order of the DataWindow object's columns must match the data on the 
         clipboard.</para>
				<para>If an XML or comma-separated column contains a leading double quote, it is assumed to be part of 
         the column value. A leading double quote has to be closed to mark the end of an item.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataStore.ImportString(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataStore.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.ImportClipboard(Sybase.DataWindow.FileSaveAsType,System.Int32,System.Int32,System.Int16,System.Int16,System.Int16)">
            <summary>Inserts comma-separated, tab-separated, or XML data from the clipboard into a DataWindow.
      </summary><returns>The number of rows that were imported.</returns><param name="ImportType">The text format, either Csv, Text, or Xml.</param><param name="StartRow">The number of the first row in the clipboard that you want to copy.</param><param name="EndRow">The number of the last row in the clipboard that you want to copy. </param><param name="StartCol">The number of the first column in the clipboard that you want to copy. </param><param name="EndCol">The number of the last column in the clipboard that you want to copy. </param><param name="dwStartCol">The number of the first column in the DataWindow that you want to receive data. </param><exception cref="T:System.ArgumentException">
				<i>ImportType</i> is not Csv, Text or Xml.</exception><exception cref="T:System.InvalidOperationException">Data in one of the columns has an incompatible datatype.</exception><exception cref="T:System.NotSupportedException"><b>ImportClipboard</b> is not supported for crosstab and composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The clipboard data must be formatted in tab-separated (Text) or comma-separated (Csv) columns or as 
         XML. The datatypes and order of the DataWindow object's columns must match the data on the 
         clipboard.</para>
				<para>
					<b>StartCol</b> and <b>EndCol</b> control the number of imported columns and the number of 
         columns in the DataWindow that are affected. <b>dwStartCol</b> specifies the first 
         DataWindow column to be affected. The last column to be affected can be calculated as:
         <c>dwStartCol + (EndCol - StartCol)</c>
				</para>
				<para>If an XML or comma-separated column contains a leading double quote, it is assumed to be part of 
         the column value. A leading double quote has to be closed to mark the end of an item.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataStore.ImportString(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataStore.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)">
            <overloads>Inserts data from a text file into a DataWIndow.</overloads><summary>Inserts comma-separated, tab-separated, or XML data from a file into a DataWindow.</summary><returns>The number of rows that were imported.</returns><param name="FileName">The name of the file from which to import the rows.</param><param name="ImportType">The file format, either Csv, Text, or Xml.</param><exception cref="T:System.ArgumentException">
				<i>ImportType</i> is not Csv, Text or Xml.</exception><exception cref="T:System.InvalidOperationException">Data in one of the columns has an incompatible datatype.</exception><exception cref="T:System.NotSupportedException"><b>ImportFile</b> is not supported for crosstab and composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The file should consist of rows of data. If the file includes column headings or row 
         labels, use the overloaded version of this method which allows you to skip the first row(s).</para>
				<para>The datatypes and order of the DataWindow object's columns must match the columns of data in the file.</para>
				<para>The location and number of double quote marks in a field in a tab-separated file affect how 
         they are handled when the file is imported:</para>
				<list type="bullet">
					<item>If the string is enclosed in one pair of double quotes, the quotes are discarded.</item>
					<item>If the string is enclosed in two pairs of double quotes, the first 
         pair is considered to enclose a null string, and the rest of the string is discarded. </item>
					<item>If the string is enclosed in three pairs of double quotes, one pair is retained 
         when the string is imported. </item>
					<item>If there 
         is a double quote at the beginning of a string, any characters after the second double quote are 
         discarded. If there is no second double quote, the tab or comma character delimiting the fields 
         is not recognized as a field separator and all characters up to the next occurrence of a double 
         quote, including a carriage return, are considered to be part of the string.</item>
					<item>Double quotes after the first character in the string are rendered literally.</item>
				</list>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.ImportClipboard(Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataStore.ImportString(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataStore.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType,System.Int32,System.Int32,System.Int16,System.Int16,System.Int16)">
            <summary>Inserts comma-separated, tab-separated, or XML data from a file into a DataWindow.</summary><returns>The number of rows that were imported.</returns><param name="FileName">The name of the file from which to import the rows.</param><param name="ImportType">The file format, either Csv, Text, or Xml.</param><param name="StartRow">The number of the first row in the file that you want to copy.</param><param name="EndRow">The number of the last row in the file that you want to copy. </param><param name="StartCol">The number of the first column in the file that you want to copy. </param><param name="EndCol">The number of the last column in the file that you want to copy.</param><param name="dwStartCol">The number of the first column in the DataWindow that you want to receive data. </param><exception cref="T:System.ArgumentException">
				<i>ImportType</i> is not Csv, Text or Xml.</exception><exception cref="T:System.InvalidOperationException">Data in one of the columns has an incompatible datatype.</exception><exception cref="T:System.NotSupportedException"><b>ImportFile</b> is not supported for crosstab and composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The file should consist of rows of data. If the file includes column headings or row 
         labels, use the overloaded version of this method which allows you to skip the first row(s).</para>
				<para>The datatypes and order of the DataWindow object's columns must match the columns of data in the file.</para>
				<para>
					<b>StartCol</b> and <b>EndCol</b> control the number of imported columns and the number of 
         columns in the DataWindow that are affected. <b>dwStartCol</b> specifies the first 
         DataWindow column to be affected. The last column to be affected can be calculated as:
         <c>dwStartCol + (EndCol - StartCol)</c>
				</para>
				<para>The location and number of double quote marks in a field in a tab-separated file affect how 
         they are handled when the file is imported:</para>
				<list type="bullet">
					<item>If the string is enclosed in one pair of double quotes, the quotes are discarded.</item>
					<item>If the string is enclosed in two pairs of double quotes, the first 
         pair is considered to enclose a null string, and the rest of the string is discarded. </item>
					<item>If the string is enclosed in three pairs of double quotes, one pair is retained 
         when the string is imported. </item>
					<item>
         If there 
         is a double quote at the beginning of a string, any characters after the second double quote are 
         discarded. If there is no second double quote, the tab or comma character delimiting the fields 
         is not recognized as a field separator and all characters up to the next occurrence of a double 
         quote, including a carriage return, are considered to be part of the string.</item>
					<item>Double quotes after the first character in the string are rendered literally.</item>
				</list>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.ImportClipboard(Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataStore.ImportString(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataStore.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.ImportString(System.String,Sybase.DataWindow.FileSaveAsType)">
            <overloads>Insert data from a string into a DataWIndow.</overloads><summary>Inserts data from comma-separated, tab-separated, or XML  string into a DataWindow.</summary><returns>The number of rows that were imported.</returns><param name="ImportString">The string containing the data.</param><param name="ImportType">The text format, either Csv, Text, or Xml.</param><exception cref="T:System.ArgumentException">
				<i>ImportType</i> is not Csv, Text or Xml.</exception><exception cref="T:System.InvalidOperationException">Data in one of the columns has an incompatible datatype.</exception><exception cref="T:System.NotSupportedException"><b>ImportString</b> is not supported for crosstab and composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The string should consist of rows of data. If the string includes column headings or row 
         labels, use the overloaded version of this method which allows you to skip the first row(s).</para>
				<para>The datatypes and order of the DataWindow object's columns must match the columns of data in the string.</para>
				<para>If an XML or comma-separated column contains a leading double quote it is assumed to be 
         part of the column value. A leading double quote has to be closed to mark the end of an item.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.ImportClipboard(Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataStore.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataStore.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.ImportString(System.String,Sybase.DataWindow.FileSaveAsType,System.Int32,System.Int32,System.Int16,System.Int16,System.Int16)">
            <summary>Inserts data from comma-separated, tab-separated, or XML  string into a DataWindow.</summary><returns>The number of rows that were imported.</returns><param name="ImportString">The string containing the data.</param><param name="ImportType">The text format, either Csv, Text, or Xml.</param><param name="StartRow">The number of the first row in the string that you want to copy.</param><param name="EndRow">The number of the last row in the string that you want to copy. </param><param name="StartCol">The number of the first column in the string that you want to copy. </param><param name="EndCol">The number of the last column in the string that you want to copy.</param><param name="dwStartCol">The number of the first column in the DataWindow that you want to receive data. </param><exception cref="T:System.ArgumentException">
				<i>ImportType</i> is not Csv, Text or Xml.</exception><exception cref="T:System.InvalidOperationException">Data in one of the columns has an incompatible datatype.</exception><exception cref="T:System.NotSupportedException"><b>ImportString</b> is not supported for crosstab and composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The string should consist of rows of data. If the string includes column headings or row 
         labels, use the overloaded version of this method which allows you to skip the first row(s).</para>
				<para>The datatypes and order of the DataWindow object's columns must match the columns of data in the string.</para>
				<para>
					<b>StartCol</b> and <b>EndCol</b> control the number of imported columns and the number of 
         columns in the DataWindow that are affected. <b>dwStartCol</b> specifies the first 
         DataWindow column to be affected. The last column to be affected can be calculated as:
         <c>dwStartCol + (EndCol - StartCol)</c>
				</para>
				<para>If an XML or comma-separated column contains a leading double quote it is assumed to be 
         part of the column value. A leading double quote has to be closed to mark the end of an item.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.ImportClipboard(Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataStore.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataStore.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)">
            <overloads>Tests whether the value of a DataWindow column is null.</overloads><summary>Tests whether the current value of a DataWindow column, specified by number, is null. 
      </summary><returns>
				<c>true</c> if the value at <i>RowNumber</i> and <i>ColumnNumber</i> is null, and <c>false</c> otherwise.</returns><param name="RowNumber">The row number for which you want to test the value.</param><param name="ColumnNumber">The column number for which you want to test the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
			<para>To avoid generating a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>, use <b>IsItemNull</b> to test whether a user-entered value or a value retrieved from the 
         database is null before calling any of the following methods:</para>
				<list type="bullet">
					<item>
						<see cref="M:Sybase.DataWindow.DataStore.GetItemDate(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataStore.GetItemDateTime(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataStore.GetItemDecimal(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataStore.GetItemDouble(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataStore.GetItemString(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataStore.GetItemTime(System.Int32,System.Int16)"/>
					</item>
				</list>
				<para>If one or more columns in a DataWindow are marked as required, that is, they must
         contain data, updating the database will fail if those columns have null values. Before calling <see cref="M:Sybase.DataWindow.DataStore.UpdateData"/>, use         <see cref="M:Sybase.DataWindow.DataWindowControl.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)"/> to find any remaining columns with null values, and either prompt the user for input or provide values programmatically.  This is more efficient than using <b>IsItemNull</b> to evaluate each row and column.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetItemNull(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Tests whether the value of a DataWindow column, specified by number, is null. 
      </summary><returns>
				<c>true</c> if the value at <i>RowNumber</i> and <i>ColumnNumber</i> is null, and <c>false</c> otherwise.</returns><param name="RowNumber">The row number for which you want to test the value.</param><param name="ColumnNumber">The column number for which you want to test the value.</param><param name="Buffer">The DataWindow buffer for which you want to test the value.</param><param name="OriginalData">
				<c>false</c> to test the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to test the value prior to any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>To avoid generating a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>, use <b>IsItemNull</b> to test whether a user-entered value or a value retrieved from the 
         database is null before calling any of the following methods:</para>
				<list type="bullet">
					<item>
						<see cref="M:Sybase.DataWindow.DataStore.GetItemDate(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataStore.GetItemDateTime(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataStore.GetItemDecimal(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataStore.GetItemDouble(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataStore.GetItemString(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataStore.GetItemTime(System.Int32,System.Int16)"/>
					</item>
				</list>
				<para>If one or more columns in a DataWindow are marked as required, that is, they must
         contain data, updating the database will fail if those columns have null values. Before calling <see cref="M:Sybase.DataWindow.DataStore.UpdateData"/>, use         <see cref="M:Sybase.DataWindow.DataWindowControl.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)"/> to find any remaining columns with null values, and either prompt the user for input or provide values programmatically.  This is more efficient than using <b>IsItemNull</b> to evaluate each row and column.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetItemNull(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.String)">
            <summary>Tests whether the current value of a DataWindow column, specified by name, is null. 
      </summary><returns>
				<c>true</c> if the value at <i>RowNumber</i> and <i>ColumnName</i> is null, and <c>false</c> otherwise.</returns><param name="RowNumber">The row number for which you want to test the value.</param><param name="ColumnName">The name of the column for which you want to test the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>To avoid generating a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>, use <b>IsItemNull</b> to test whether a user-entered value or a value retrieved from the 
         database is null before calling any of the following methods:</para>
				<list type="bullet">
					<item>
						<see cref="M:Sybase.DataWindow.DataStore.GetItemDate(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataStore.GetItemDateTime(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataStore.GetItemDecimal(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataStore.GetItemDouble(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataStore.GetItemString(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataStore.GetItemTime(System.Int32,System.Int16)"/>
					</item>
				</list>
				<para>If one or more columns in a DataWindow are marked as required, that is, they must
         contain data, updating the database will fail if those columns have null values. Before calling <see cref="M:Sybase.DataWindow.DataStore.UpdateData"/>, use         <see cref="M:Sybase.DataWindow.DataWindowControl.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)"/> to find any remaining columns with null values, and either prompt the user for input or provide values programmatically.  This is more efficient than using <b>IsItemNull</b> to evaluate each row and column.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetItemNull(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Tests whether the value of a DataWindow column, specified by name, is null. 
      </summary><returns>
				<c>true</c> if the value at <i>RowNumber</i> and <i>ColumnName</i> is null, and <c>false</c> otherwise.</returns><param name="RowNumber">The row number for which you want to test the value.</param><param name="ColumnName">The name of the column for which you want to test the value.</param><param name="Buffer">The DataWindow buffer for which you want to test the value.</param><param name="OriginalData">
				<c>false</c> to test the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to test the value prior to any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>To avoid generating a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>, use <b>IsItemNull</b> to test whether a user-entered value or a value retrieved from the 
         database is null before calling any of the following methods:</para>
				<list type="bullet">
					<item>
						<see cref="M:Sybase.DataWindow.DataStore.GetItemDate(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataStore.GetItemDateTime(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataStore.GetItemDecimal(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataStore.GetItemDouble(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataStore.GetItemString(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataStore.GetItemTime(System.Int32,System.Int16)"/>
					</item>
				</list>
				<para>If one or more columns in a DataWindow are marked as required, that is, they must
         contain data, updating the database will fail if those columns have null values. Before calling <see cref="M:Sybase.DataWindow.DataStore.UpdateData"/>, use         <see cref="M:Sybase.DataWindow.DataWindowControl.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)"/> to find any remaining columns with null values, and either prompt the user for input or provide values programmatically.  This is more efficient than using <b>IsItemNull</b> to evaluate each row and column.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetItemNull(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.InsertRow(System.Int32)">
            <summary>Inserts a row into a DataWindow. 
      </summary><returns>The number of the row that was added. </returns><param name="RowNumber">The row number before which to insert the new row. Specify 0 to insert a row at the end.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:System.NotSupportedException">Crosstab and composite DataWindow styles do not support <i>InsertRow</i>.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>InsertRow</b> simply inserts a row without changing the display or the current row. If any of the DataWindow columns have 
			default values, these values are added to the Primary buffer before the row is displayed.</para>
				<para>To make the new row the current row, call the <see cref="M:Sybase.DataWindow.DataStore.SetRow(System.Int32)"/> method. For a DataWindowControl, you can
			invoke <see cref="M:Sybase.DataWindow.DataWindowControl.ScrollToRow(System.Int32)"/> instead if you also want the new row to be visible in the 
			DataWindowControl.</para>
				<para>A newly inserted row (with a <see cref="T:Sybase.DataWindow.RowStatus"/> value of New) is not 
         included in <see cref="P:Sybase.DataWindow.DataStore.ModifiedCount"/> until data is entered in the row (and its <see cref="T:Sybase.DataWindow.RowStatus"/> changes
         to NewAndModified). </para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.DeleteRow(System.Int32)"/><seealso cref="M:Sybase.DataWindow.DataStore.UpdateData"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.Modify(System.String)">
            <summary>Modifies a DataWindow object by applying specifications that
         change the object's definition. 
      </summary><param name="Syntax">A string whose value is the specification for the modification.  See the Remarks section for appropriate formats.</param><exception cref="T:System.ArgumentNullException">
				<i>Syntax</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">
				<i>Syntax</i> is invalid, or an unexpected error has occurred.</exception><remarks>
				<para>
					<b>Modify</b> lets you make many of the same settings in code that you can make when designing the 
         DataWindow. DataWindow Designer automatically gives names to all controls so that you can refer to them in <i>Syntax</i>. 
         See the <i>DataWindow .NET Programmer's Guide</i> for the exhaustive list of control properties that can be used.</para>
				<para>You can use three types of statements in <i>Syntax</i> to create, remove, and modify controls within a DataWindow object.
         <list type="bullet">
						<item>
							<b>CREATE </b>
							<i>control (settings)	</i>
							<para>
         Adds a control to the DataWindow object (such as text, computed fields, and bitmaps). 
         <i>Settings</i> is a list of properties and values using the format you see in exported DataWindow 
         syntax. To create a control, you must supply enough information to define it.</para>
						</item>
						<item>
							<b>DESTROY [COLUMN] </b>
							<i> control</i>
							<para>
         Removes <i>control</i> from the DataWindow object. When <i>control</i> is a column, specify the keyword COLUMN 
         to remove both the column and the column's data from the buffer.</para>
						</item>
						<item>
							<i>controlname.property=value</i>
							<para>Changes the value of <i>property</i> to <i>value</i>. Properties control the location, color, 
         size, font, and other settings for <i>controlname</i>. When <i>controlname</i> is <c>DataWindow</c>, you
         can also set properties for database access. Depending on the specific property, <i>value</i> can
         be a constant, a quoted constant, an expression that consists of a default value followed by a 
         valid DataWindow expression that returns the appropriate datatype for the property. </para>
							<para>If you are changing a single property, you can also use the <see cref="M:Sybase.DataWindow.DataStore.SetProperty(System.String,System.String)"/> method, or use a property of one of the 
         <see cref="T:Sybase.DataWindow.GraphicObject"/> classes, if the desired property is exposed.</para>
						</item>
					</list>
				</para>
				<para>When you specify an expression for a DataWindow property, the expression has the format:<c> 
         defaultvalue~tDataWindowexpression</c> where:
				</para>
				<list type="bullet">
					<item>
						<c>Defaultvalue</c> is a value that can be converted to the appropriate datatype for the property. It must be followed by a tab character.</item>
					<item>
						<c>DataWindowexpression</c> is an expression that can use any 
         DataWindow expression function. The expression must also evaluate to the appropriate datatype 
         for the property. When you are setting a column's property, the expression is evaluated for each 
         row in the DataWindow, allowing the display to vary based on the data.
         </item>
				</list>
				<para>A typical expression uses the <c>If</c> function: <c>0~tIf(emp_status='T', 255, 0)</c>.  The following Visual Basic .NET statements would equivalently
         change the text color of the <c>emp_id</c> column to red for those employees with a status of 'T' (terminated) in <c>dwEmp</c>:
				</para>
				<list type="bullet">
					<item>
						<c>dwEmp.Modify("emp_id.color='0~tIf(emp_status=~'T~',255,0)'")</c>
					</item>
					<item>
						<c>dwEmp.SetProperty("emp_id.color", "0~tIf(emp_status=~'T~',255,0)")</c>
					</item>
					<item>
						<c>Dim gobEditColumn as Sybase.DataWindow.GraphicObjectEditableColumn</c>
        				<c>gobEditColumn = CObj(dwEmp.GetObjectByName("emp_id"))</c>
        				<c>gobEditColumn.TextColorExpression = "If(emp_status='T',255,0)"</c>
					</item>
				</list>
				<note>DataWindow expressions expect the tilde (~) as an escape character, as can be seen by the examples above.  ~t is a tab character and ~' indicates a nested single quote.</note>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetProperty(System.String,System.String)"/><seealso cref="M:Sybase.DataWindow.DataStore.Describe(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.Print">
            <overloads>Prints the DataWindow to the current printer. </overloads><summary>Prints the DataWindow to the current printer.</summary><exception cref="T:System.NotSupportedException">
				<b>Print</b> is not supported for a DataWindowChild that is nested in a composite DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>For a DataStore and DataWindowControl, <b>Print</b> triggers the <see cref="E:Sybase.DataWindow.IDataStore.BeginPrint"/>
			 event just before data is sent to the printer (or 
         spooler), a <see cref="E:Sybase.DataWindow.IDataStore.PagePrinting"/> for each page break, 
         and an <see cref="E:Sybase.DataWindow.IDataStore.EndPrint"/> event when printing is 
         complete.</para>
				<para>Use the overloaded version of <b>Print</b> to display a dialog box allowing the user to cancel the print job.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.PrintCancel"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.Print(System.Boolean)">
            <summary>Prints the DataWindow to the current printer, with the option to display a Cancel dialog box. 
      </summary><param name="ShowCancelDialog">
				<c>true</c> if a dialog box allowing the print job to be canceled is to be displayed, otherwise <c>false</c>.
			</param><exception cref="T:System.NotSupportedException">
				<b>Print</b> is not supported for a DataWindowChild that is nested in a composite DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>For a DataStore and DataWindowControl, <b>Print</b> triggers the <see cref="E:Sybase.DataWindow.IDataStore.BeginPrint"/>
			 event just before data is sent to the printer (or 
         spooler), a <see cref="E:Sybase.DataWindow.IDataStore.PagePrinting"/> for each page break, 
         and an <see cref="E:Sybase.DataWindow.IDataStore.EndPrint"/> event when printing is 
         complete.</para>
				<para>Since a DataStore is non-visual, <i>ShowCancelDialog</i> is always treated as <c>false</c>
         when invoked on a DataStore, and is therefore semantically equivalent to the overload of <b>Print</b> that has no arguments.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.PrintCancel"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.Print(System.Boolean,System.Boolean)">
            <summary>Prints the DataWindow to the current printer, with the option to display a Cancel dialog box
			and an option to display the Print Dialog box.
	        </summary><param name="ShowCancelDialog">
				<c>true</c> if a dialog box allowing the print job to be canceled is to be displayed, otherwise <c>false</c>.
			</param><param name="ShowPrintDialog">
				<c>true</c> if the Print Dialog box is to be displayed, otherwise <c>false</c>.
			</param><exception cref="T:System.NotSupportedException">
				<b>Print</b> is not supported for a DataWindowChild that is nested in a composite DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>For a DataStore and DataWindowControl, <b>Print</b> triggers the <see cref="E:Sybase.DataWindow.IDataStore.BeginPrint"/>
			 event just before data is sent to the printer (or 
         spooler), a <see cref="E:Sybase.DataWindow.IDataStore.PagePrinting"/> for each page break, 
         and an <see cref="E:Sybase.DataWindow.IDataStore.EndPrint"/> event when printing is 
         complete.</para>
				<para>Since a DataStore is non-visual, <i>ShowCancelDialog</i> is always treated as <c>false</c>
         when invoked on a DataStore, and is therefore semantically equivalent to the overload of <b>Print</b> that has no arguments.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.PrintCancel"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.PrintCancel">
            <summary>Cancels printing and deletes the spool file, if any. 
      </summary><returns>
				<c>true</c> if the print job was canceled, <c>false</c> otherwise (including when there is no pending print job).</returns><exception cref="T:System.NotSupportedException">
				<b>PrintCancel</b> is not supported for a DataWindowChild that is nested in a composite DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>PrintCancel cancels the printing of the specified DataWindowChild, DataStore, or DataWindowControl by deleting the spool file, if any, and closing the job. 
      </remarks><seealso cref="M:Sybase.DataWindow.DataStore.Print"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.ReselectRow(System.Int32)">
            <summary>Refreshes data for a specific row by reretrieving from the database.</summary><param name="RowNumber">The row to be refreshed.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<see cref="M:Sybase.DataWindow.DataStore.SetTransaction(Sybase.DataWindow.AdoTransaction)"/> was not called before <b>ReselectRow</b> for a DataWindowChild.</exception><exception cref="T:Sybase.DataWindow.DbErrorException">A database error has occurred.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<b>ReselectRow</b> is supported for SQL Select DataWindows and can be used to discard values 
         the user has changed and replace them with values from the database after an update fails (due to a 
         concurrent access error, for example).  
      </remarks><seealso cref="M:Sybase.DataWindow.DataStore.Retrieve(System.Data.DataTable)"/><seealso cref="M:Sybase.DataWindow.DataStore.UpdateData"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.Reset">
            <summary>Clears all the data from a DataWindow. 
      </summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>Reset</b> is not the same as deleting rows from the DataWindow since it does not move the rows to Delete buffer.  Use
			<b>Reset</b> only to completely discard any data and changes that have been made.</para>
				<para>Use <see cref="M:Sybase.DataWindow.DataStore.RowsDiscard(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer)"/> to clear the data from a specific buffer.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.DeleteRow(System.Int32)"/><seealso cref="M:Sybase.DataWindow.DataStore.RowsDiscard(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.ResetUpdateStatus">
            <summary>Clears the status flags in the Primary and Filter buffers and empties the Delete buffer of a
         DataWindow. 
      </summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>When a column is modified, its <see cref="T:Sybase.DataWindow.ItemStatus"/> flag is set, 
				marking it for update. Likewise, when a row is added or deleted, its <see cref="T:Sybase.DataWindow.RowStatus"/> flag is set.
				By default 
         the <see cref="M:Sybase.DataWindow.DataStore.UpdateData"/> method clears these flags; however, if you want to coordinate updates of more than one DataWindow, 
         you can defer clearing the status by setting the <i>ResetUpdateFlags</i> argument to 
         <c>false</c>. Then after you verify that all the updates succeeded, you can call <b>ResetUpdateStatus</b>
          for each DataWindow to clear
         the status flags. If one of the updates fails, you can retain the update statuses, prompt the user to fix the problem, and try the
         updates again.</para>
				<para>You can find out which rows are marked for update with the <see cref="M:Sybase.DataWindow.DataStore.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)"/> method.</para>
			</remarks><example>This C# code updates the data without resetting flags and commits it before resetting status flags:
         <code>
         try
         {
            dwEmployee.UpdateData(true, false);
            myTrans.Commit();
            
            // If no exception has been caught, update succeeded
            dwEmployee.ResetUpdateStatus();
         }
         catch (Sybase.DataWindow.DbErrorException dbError)
         {
         	// update failed prompt user to fix the problem
         }
         
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataStore.UpdateData"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.Retrieve(System.Object[])">
            <summary>Retrieves rows from the database into the DataWindow</summary><returns>The number of rows retrieved.</returns><param name="ArgsList">A list of retrieval arguments to be passed to the SQL statement that is the source of the DataWindow.
			<note>You must use .NET datatypes, 
         such as System.DateTime, in the argument list.</note>
			</param><exception cref="T:Sybase.DataWindow.DbErrorException">A database error has occurred.</exception><exception cref="T:System.InvalidOperationException">
				<see cref="M:Sybase.DataWindow.DataStore.SetTransaction(Sybase.DataWindow.AdoTransaction)"/> has not been called.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>After rows are retrieved, the DataWindow object's filter is applied. Any retrieved rows that do not 
         meet the filter criteria are immediately moved to the Filter buffer and are not included in the return count.</para>
				<para>Before you can retrieve rows, you must specify a transaction object with 
         <see cref="M:Sybase.DataWindow.DataStore.SetTransaction(Sybase.DataWindow.AdoTransaction)"/> and connect to the database. Normally, when you call <b>Retrieve</b>, any rows that are already in the 
         DataWindow are discarded and replaced with the newly retrieved rows. You can set the <i>Action</i> property of the 
         <see cref="T:Sybase.DataWindow.BeginRetrieveEventArgs"/> to <c>AppendRows</c> 
         in the <see cref="E:Sybase.DataWindow.DataWindowControl.BeginRetrieve"/> event to add any 
         retrieved rows to the ones that already exist in the buffers.</para>
				<para>If arguments are expected but not specified, the user is prompted for the retrieval arguments.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.ReselectRow(System.Int32)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetTransaction(Sybase.DataWindow.AdoTransaction)"/><seealso cref="M:Sybase.DataWindow.DataStore.UpdateData"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.RowsCopy(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Copies a range of rows from one DataWindow to another,
         or from one buffer to another within a single DataWindow. 
      </summary><param name="StartRow">The number of the first row you want to copy.</param><param name="EndRow">The number of the last row you want to copy.</param><param name="FromBuffer">The DataWindow buffer from which you want to copy rows.</param><param name="ToDW">The DataWindow to which you want to copy the rows.</param><param name="BeforeRow">The number of the row in <i>ToDW</i> before which you want to insert the copied rows. <note>To insert after the last row, use any value that is greater than the number of existing rows.</note>
			</param><param name="ToBuffer">The DataWindow buffer in <i>ToDW</i> to which the rows should be copied. </param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>StartRow</i> or <i>EndRow</i> is less than 1, or <i>BeforeRow</i> is less than 0.</exception><exception cref="T:System.ArgumentException">
				<list type="bullet">
					<item>
						<i>StartRow</i> &lt; <i>EndRow</i>, or</item>
					<item>Source DataWindow and <i>ToDW</i> are incompatible.</item>
				</list>
			</exception><exception cref="T:System.ArgumentNullException">
				<i>ToDW</i> is null.</exception><exception cref="T:System.NotSupportedException">Source DataWindow or <i>ToDW</i> is a crosstab.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>When you use the <b>RowsCopy</b> method, the status of the rows that are copied to the <i>ToBuffer</i> is set to
         NewAndModified. If you issue an update request, the DataWindow server sends SQL INSERT statements to the database for any 
         new rows in the Primary buffer.</para>
				<para>Data is not automatically retrieved for drop-down DataWindows in <i>ToDW</i>, as it 
         is when you call <see cref="M:Sybase.DataWindow.DataStore.InsertRow(System.Int32)"/>. You must explicitly call <see cref="M:Sybase.DataWindow.DataStore.Retrieve(System.Data.DataTable)"/> for child DataWindows in <i>ToDW</i>.</para>
				<para>When you use <b>RowsCopy</b> to populate another DataWindow, the copied data is not automatically processed 
         by filters or sort criteria in effect on the target DataWindow. You may need to call the <see cref="M:Sybase.DataWindow.DataStore.Filter"/>, 
         <see cref="M:Sybase.DataWindow.DataStore.CalculateGroups"/>, or <see cref="M:Sybase.DataWindow.DataStore.Sort"/> methods to properly process the data.</para>
				<para>A DataWindow cannot be in query mode when you call <b>RowsCopy</b>. </para>
			</remarks><example>This Visual Basic subroutine copies rows from the Delete buffer in a DataWindow into the Primary buffer 
			of a DataWindow called <c>dwDelete</c>:
         <code>
         Public Sub RefreshData()
            Dim primary As DataWindowControl
            Dim filterCount As Integer
         
            Try
               dwDelete.Reset()
               primary = buffersForm.GetPrimaryControl
               filterCount = primary.DeletedCount
               
               'Use the RowsCopy function to copy the rows from the
               'deleted buffer in the primary DataWindow into the DataWindow
               'on this window.
               If filterCount &gt; 0 Then
                  primary.RowsCopy(1, filterCount, DataBuffer.Delete, dwDelete, 1, DataBuffer.Primary)
               End If
            Catch ex As Exception
               ErrorHandler.HandleException(ex)
            End Try
         End Sub
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataStore.RowsDiscard(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataStore.RowsMove(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.RowsDiscard(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Discards a range of rows in a DataWindow control.</summary><param name="StartRow">The number of the first row you want to discard.</param><param name="EndRow">The number of the last row you want to discard.</param><param name="Buffer">The DataWindow buffer from which you want to discard the rows.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>StartRow</i> or <i>EndRow</i> is less than 1.</exception><exception cref="T:System.ArgumentException">
				<i>StartRow</i> is less than <i>EndRow</i>.</exception><exception cref="T:System.NotSupportedException">
				<b>RowsDiscard</b> is not supported for crosstab DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Once a row has been discarded using <b>RowsDiscard</b>, you cannot restore the row. 
			You have to retrieve it again from the database.</para>
				<para>Use <b>RowsDiscard</b> when your application has finished with rows in a DataWindow, and you do not
         want an update to affect the database. For example, you can discard rows in the Delete buffer to 
         prevent the associated rows from being removed from the database when you call <see cref="M:Sybase.DataWindow.DataStore.UpdateData"/>. </para>
				<para>Use <see cref="M:Sybase.DataWindow.DataStore.Reset"/> to clear all the rows 
         from all three buffers of a DataWindow.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.RowsCopy(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataStore.RowsMove(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataStore.Reset"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.RowsMove(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Removes a range of rows from one DataWindow and inserts them into another, or moves them from one buffer to another within a single DataWindow. 
      </summary><param name="StartRow">The number of the first row you want to move.</param><param name="EndRow">The number of the last row you want to move.</param><param name="FromBuffer">The DataWindow buffer from which you want to move rows.</param><param name="ToDW">The DataWindow to which you want to move the rows.</param><param name="BeforeRow">The number of the row in <i>ToDW</i> before which you want to insert the relocated rows. <note>To insert after the last row, use any value that is greater than the number of existing rows.</note>
			</param><param name="ToBuffer">The DataWindow buffer in <i>ToDW</i> to which the rows should be moved.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>StartRow</i> or <i>EndRow</i> is less than 1, or <i>BeforeRow</i> is less than 0.</exception><exception cref="T:System.ArgumentException">
				<list type="bullet">
					<item>
						<i>StartRow</i> &lt; <i>EndRow</i>, or</item>
					<item>Source DataWindow and <i>ToDW</i> are incompatible.</item>
				</list>
			</exception><exception cref="T:System.ArgumentNullException">
				<i>ToDW</i> is null.</exception><exception cref="T:System.NotSupportedException">Source DataWindow or <i>ToDW</i> is a crosstab.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>When you use <b>RowsMove</b>, the rows have the status NewAndModified in <i>ToDW</i>. If you move rows 
         between buffers within a single DataWindow, knowledge of the rows' origin is taken into account to change their 
         status. For example, if you move unmodified rows from the Primary buffer to 
         the Delete buffer, they are marked for deletion. If you move the rows back to the Primary buffer, their status returns 
         to NotModified; however, if you move a row from one DataWindow control (or DataStore) to another and back 
         again, the <see cref="T:Sybase.DataWindow.RowStatus"/> changes to NewAndModified because it came from a different DataWindow.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.RowsCopy(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataStore.RowsDiscard(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)">
            <overloads>Saves the contents of a DataWindow in the specified format. </overloads><summary>Saves the contents, including column headers, of a DataWindow in the format specified.</summary><param name="FileName">The name of the file in which to save the DataWindow contents.</param><param name="SaveAsType">The format in which to save the DataWindow contents.</param><exception cref="T:System.ArgumentNullException">
				<i>FileName</i> is null or an empty string ("").</exception><exception cref="T:System.IO.PathTooLongException">
				<i>FileName</i> contains more than 248 characters. </exception><exception cref="T:System.NotSupportedException"><b>SaveAs</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The file is saved with UTF-16LE encoding. To specify a different encoding, use the overloaded version of <b>SaveAs</b> that
			accepts a parameter of type <see cref="T:Sybase.DataWindow.FileSaveAsEncoding"/>
				</para>
				<para>Report format (PSReport value of <see cref="T:Sybase.DataWindow.FileSaveAsType"/>) is the best choice if the DataWindow is a composite report.</para>
				<para>For Xml, the XML logical structure used is based on the current XML export template for the DataWindow object. You can 
         change the export template by setting the <c>Export.XML.UseTemplate</c> DataWindow object property. If no export 
         template is specified, the default template is used.</para>
				<para>When you save the contents of a DataWindow to a text file, double quotes are handled in a way that enables the 
         <see cref="M:Sybase.DataWindow.DataStore.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/> function to produce the same DataWindow when the text file is imported back into the application. 
         Any field 
         that is enclosed in a pair of double quotes is wrapped with three pairs of double quotes in the saved text file. 
         Double quotes at the beginning of a text field that have no matching double quotes at the end of the field are also 
         replaced by three double quotes in the saved text file. A double quote elsewhere in the field is saved as 
         one double quote. </para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataStore.SaveAsFormattedText(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType,System.Boolean)">
            <summary>Saves the contents, optionally including column headers, of a DataWindow in the format specified.
      </summary><param name="FileName">The name of the file in which to save the DataWindow contents.</param><param name="SaveAsType">The format in which to save the DataWindow contents.</param><param name="IncludeColumnHeaders">
				<c>true</c> if DataWindow column headings should be included, <c>false</c> otherwise.
			<note>This value is ignored (and treated as <c>true</c>) for formats other than Clipboard, CSV, Excel, and Text.</note>
			</param><exception cref="T:System.ArgumentNullException">
				<i>FileName</i> is null or an empty string ("").</exception><exception cref="T:System.IO.PathTooLongException">
				<i>FileName</i> contains more than 248 characters. </exception><exception cref="T:System.NotSupportedException"><b>SaveAs</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The file is saved with UTF-16LE encoding. To specify a different encoding, use the overloaded version of <b>SaveAs</b> that
			accepts a parameter of type <see cref="T:Sybase.DataWindow.FileSaveAsEncoding"/>
				</para>
				<para>Report format (PSReport value of <see cref="T:Sybase.DataWindow.FileSaveAsType"/>) is the best choice if the DataWindow is a composite report.</para>
				<para>For Xml, the XML logical structure used is based on the current XML export template for the DataWindow object. You can 
         change the export template by setting the <c>Export.XML.UseTemplate</c> DataWindow object property. If no export 
         template is specified, the default template is used.</para>
				<para>When you save the contents of a DataWindow to a text file, double quotes are handled in a way that enables the 
         <see cref="M:Sybase.DataWindow.DataStore.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/> function to produce the same DataWindow when the text file is imported back into the application. 
         Any field 
         that is enclosed in a pair of double quotes is wrapped with three pairs of double quotes in the saved text file. 
         Double quotes at the beginning of a text field that have no matching double quotes at the end of the field are also 
         replaced by three double quotes in the saved text file. A double quote elsewhere in the field is saved as 
         one double quote. </para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataStore.SaveAsFormattedText(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType,System.Boolean,Sybase.DataWindow.FileSaveAsEncoding)">
            <summary>Saves the contents, optionally including column headers, of a DataWindow with the specified format and encoding.</summary><param name="FileName">The name of the file in which to save the DataWindow contents.</param><param name="SaveAsType">The format in which to save the DataWindow contents.</param><param name="IncludeColumnHeaders">
				<c>true</c> if DataWindow column headings should be included, <c>false</c> otherwise.
			<note>This value is ignored (and treated as <c>true</c>) for formats other than Clipboard, CSV, Excel, and Text.</note>
			</param><param name="Encoding">The character encoding used for the file.</param><exception cref="T:System.ArgumentNullException">
				<i>FileName</i> is null or an empty string ("").</exception><exception cref="T:System.IO.PathTooLongException">
				<i>FileName</i> contains more than 248 characters. </exception><exception cref="T:System.NotSupportedException"><b>SaveAs</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Report format (PSReport value of <see cref="T:Sybase.DataWindow.FileSaveAsType"/>) is the best choice if the DataWindow is a composite report.</para>
				<para>For Xml, the XML logical structure used is based on the current XML export template for the DataWindow object. You can 
         change the export template by setting the <c>Export.XML.UseTemplate</c> DataWindow object property. If no export 
         template is specified, the default template is used.</para>
				<para>When you save the contents of a DataWindow to a text file, double quotes are handled in a way that enables the 
         <see cref="M:Sybase.DataWindow.DataStore.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/> function to produce the same DataWindow when the text file is imported back into the application. 
         Any field 
         that is enclosed in a pair of double quotes is wrapped with three pairs of double quotes in the saved text file. 
         Double quotes at the beginning of a text field that have no matching double quotes at the end of the field are also 
         replaced by three double quotes in the saved text file. A double quote elsewhere in the field is saved as 
         one double quote. </para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataStore.SaveAsFormattedText(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SaveAsFormattedText(System.String)">
            <overloads>Saves the contents of a DataWindow as a Unicode text file.</overloads><summary>Saves the contents of a DataWindow as a Unicode text file using default formatting. 
      </summary><param name="FileName">The name of the file in which to save the DataWindow contents.</param><exception cref="T:System.ArgumentNullException">
				<i>FileName</i> is null or an empty string ("").</exception><exception cref="T:System.IO.PathTooLongException">
				<i>FileName</i> contains more than 248 characters. </exception><exception cref="T:System.NotSupportedException"><b>SaveAsFormattedText</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>SaveAsFormattedText</b> is similar to <see cref="M:Sybase.DataWindow.DataStore.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/> with the Text <see cref="T:Sybase.DataWindow.FileSaveAsType"/>;
				however, <b>SaveAsFormattedText</b>
         formats the text and saves column headers as they are displayed in the DataWindow instead of as the 
         column name. For example, if the heading for the <c>cust_id</c> column is "Customer ID", <b>SaveAsFormattedText</b> saves 
         "Customer ID" to the text file, whereas <see cref="M:Sybase.DataWindow.DataStore.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/> saves "cust_id". 
         <b>SaveAsFormattedText</b> also saves computed fields, and the overloaded 
         version of the method 
         allows you to customize formats in the file and specify the file encoding.</para>
				<para>In the default formatting implemented by this method, values are wrapped in double quotes and separated by tabs. 
         A newline character is placed at the end of each line. 
         Line feed and carriage return characters within each row are converted to white space. 
         The file is saved with UFT-16LE encoding.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SaveAsFormattedText(System.String,System.String,System.String,System.String,System.Boolean,Sybase.DataWindow.FileSaveAsEncoding)">
            <summary>Saves the contents of a DataWindow as a Unicode text file with user-specified formatting. 
      </summary><param name="FileName">The name of the file in which to save the DataWindow contents.</param><param name="Separator">The character to be used to delimit values. </param><param name="Quote">The character to be used to wrap values. </param><param name="LineEnd">The character to be use as an end-of-line marker.</param><param name="RetainDataNewLineChar">
				<c>true</c> if line feed and carriage return characters should be retained, <c>false</c> if
			they should be converted to white space</param><param name="Encoding">The character encoding used for the file.</param><exception cref="T:System.ArgumentNullException">
				<i>FileName</i> is null or an empty string ("").</exception><exception cref="T:System.IO.PathTooLongException">
				<i>FileName</i> contains more than 248 characters. </exception><exception cref="T:System.NotSupportedException"><b>SaveAsFormattedText</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>SaveAsFormattedText</b> is similar to <see cref="M:Sybase.DataWindow.DataStore.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/> with the Text <see cref="T:Sybase.DataWindow.FileSaveAsType"/>;
				however, <b>SaveAsFormattedText</b>
         formats the text and saves column headers as they are displayed in the DataWindow instead of as the 
         column name. For example, if the heading for the <c>cust_id</c> column is "Customer ID", <b>SaveAsFormattedText</b> saves 
         "Customer ID" to the text file, whereas <see cref="M:Sybase.DataWindow.DataStore.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/> saves "cust_id". 
         <b>SaveAsFormattedText</b> also saves computed fields, and the overloaded 
         version of the method 
         allows you to customize formats in the file and specify the file encoding.</para>
			</remarks><example>This statement saves the contents of <c>dwQuarter</c> to the file <c>H:\Q2\results.txt</c>. The saved file has 
         ANSI encoding with the hash mark (#) as the separator character, single quote (') as the value delimiter, 
         and the default line ending. Computed columns are included with the saved information, and line 
         feed and carriage return characters within column data are converted to white space.
         <code>dwQuarter.SaveAsFormattedText("H:\Q2\results.txt","#","'","\n", false, Sybase.FileSaveAsEncoding.Ansi)</code>
			</example><seealso cref="M:Sybase.DataWindow.DataStore.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SelectTreeNode(System.Int32,System.Int32,System.Boolean)">
            <summary>
				Selects or deselects a TreeView node in a TreeView DataWindow, which has the specified group level and includes the specified row.
			</summary><param name="RowNumber">
				The number of the row that belongs to the group of the TreeView node that will be selected or deselected.
			</param><param name="GroupLevel">
				The level of the group of the TreeView node that will be selected or deselected.
			</param><param name="Selected">
				<c>true</c> if the node should be selected, <c>false</c>
				if selection of the node should be deselected.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetChanges(Sybase.DataWindow.DataWindowChanges)">
            <summary>Applies changes captured with <see cref="M:Sybase.DataWindow.DataStore.GetChanges"/> to a DataWindowControl or DataStore. 
      </summary><param name="Changes">A <see cref="T:Sybase.DataWindow.DataWindowChanges"/> object containing the modifications to be applied.</param><exception cref="T:System.ArgumentNullException">
				<i>Changes</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This method in conjunction with <see cref="M:Sybase.DataWindow.DataStore.GetChanges"/> to synchronize two or more DataWindowControls or DataStores and is
				designed specifically for use in
				.NET remoting applications.  <see cref="T:Sybase.DataWindow.DataWindowChanges"/> is a serializable object allowing DataWindow
				changes made in a client application space to be transferred to a server application where the changes can be applied to
				the backend database.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetChanges"/><seealso cref="M:Sybase.DataWindow.DataStore.SetFullState(Sybase.DataWindow.DataWindowFullState)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore._SetChanges(Sybase.DataWindow.DataWindowChanges,System.Int32@)">
            <summary>
            This method is designed for DataWindow .NET internal usage only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetColumn(System.Int16)">
            <overloads>Sets the current column in a DataWindow. </overloads><summary>Sets the current column in a DataWindow given the column number. 
      </summary><param name="ColumnNumber">The column number to be made current.</param><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is not valid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> cannot be made current, because it is not editable.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Only editable columns, that is columns with a <see cref="P:Sybase.DataWindow.GraphicObjectEditableColumn.TabOrder"/> greater than 0, can be current.
				A <see cref="T:System.InvalidOperationException"/> will occur if you attempt to make a noneditable column the current column.</para>
				<para>
					<b>SetColumn</b> can trigger the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/>, <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/>, 
				and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemFocusChanged"/> events. Calling <b>SetColumn</b> in any of these events could result in an infinite loop.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetColumnNumber"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetColumn(System.String)">
            <summary>Sets the current column in a DataWindow given the column name. 
      </summary><param name="ColumnName">The name of column to be made current.</param><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is not valid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> cannot be made current, because it is not editable.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Only editable columns, that is columns with a <see cref="P:Sybase.DataWindow.GraphicObjectEditableColumn.TabOrder"/> greater than 0, can be current.
				A <see cref="T:System.InvalidOperationException"/> will occur if you attempt to make a noneditable column the current column.</para>
				<para>
					<b>SetColumn</b> can trigger the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/>, <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/>, 
				and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemFocusChanged"/> events. Calling <b>SetColumn</b> in any of these events could result in an infinite loop.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetColumnName"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetColumnValidation(System.Int16,System.String)">
            <overloads>Changes the validation rule for a column in a DataWindow. </overloads><summary>Changes the validation rule for a DataWindow column identified by number. 
      </summary><param name="ColumnNumber">The column number for which you want to set the validation rule.</param><param name="ValidationRule">The new validation rule for the column.</param><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is not valid.</exception><exception cref="T:Sybase.DataWindow.InvalidExpressionException">
				<i>ValidationRule</i> is not a valid boolean DataWindow expression.</exception><exception cref="T:System.ArgumentNullException">
				<i>ValidationRule</i> is null.</exception><exception cref="T:System.NotSupportedException">
				<b>SetColumnValidation</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Validation rules are boolean expressions that usually compare the value in the column's 
         edit control (obtained using <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>) to some other value. 
         When data the user enters fails to meet the criteria 
         established by the validation rule, an <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> event occurs. 
         You can specify validation rules at design time in DataWindow Designer, and you can change the rules in code using 
         <b>SetColumnValidation</b>. A validation rule can include any DataWindow expression function.</para>
				<para>For information about DataWindow expression functions and validation rules, see the 
         DataWindow Designer <i>User's Guide</i>.</para>
			</remarks><example>The following assigns a validation rule to the current column in <c>dwEmployee</c>. The rule ensures 
         that the data entered is greater than zero:
         <code>dwEmployee.SetColumnValidation(dwEmployee.GetColumnNumber(), "Number(GetText( )) &gt; 0")</code>
			</example><seealso cref="M:Sybase.DataWindow.DataStore.GetColumnValidation(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetColumnValidation(System.String,System.String)">
            <summary>Changes the validation rule for a DataWindow column identified by name. 
      </summary><param name="ColumnName">The column name for which you want to set the validation rule.</param><param name="ValidationRule">The new validation rule for the column.</param><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is not valid.</exception><exception cref="T:Sybase.DataWindow.InvalidExpressionException">
				<i>ValidationRule</i> is not a valid boolean DataWindow expression.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> or <i>ValidationRule</i> is null.</exception><exception cref="T:System.NotSupportedException">
				<b>SetColumnValidation</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Validation rules are boolean expressions that usually compare the value in the column's 
         edit control (obtained using <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>) to some other value. 
         When data the user enters fails to meet the criteria 
         established by the validation rule, an <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> event occurs. 
         You can specify validation rules at design time in DataWindow Designer, and you can change the rules in code using 
         <b>SetColumnValidation</b>. A validation rule can include any DataWindow expression function.</para>
				<para>For information about DataWindow expression functions and validation rules, see the 
         DataWindow Designer <i>User's Guide</i>.</para>
			</remarks><example>The following assigns a validation rule to the current column in <c>dwEmployee</c>. The rule ensures 
         that the data entered is greater than zero:
         <code>dwEmployee.SetColumnValidation(dwEmployee.GetColumnName(), "Number(GetText( )) &gt; 0")</code>
			</example><seealso cref="M:Sybase.DataWindow.DataStore.GetColumnValidation(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetDetailHeight(System.Int32,System.Int32,System.Int32)">
            <summary>Sets the height of each row in the specified range to the specified value. 
      </summary><param name="StartRow">The first row in the range of rows for which you want to set the height.</param><param name="EndRow">The last row in the range of rows for which you want to set the height.</param><param name="NewHeight">The height of the detail area for the specified rows in the <see cref="T:Sybase.DataWindow.Units"/> specified for the DataWindow object.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>StartRow</i> or <i>EndRow</i> is less than 1.</exception><exception cref="T:System.ArgumentException">
				<i>EndRow</i> &lt; <i>StartRow</i>.</exception><exception cref="T:System.ArgumentOutOfRangeException">
				<i>NewHeight</i> is less than 0.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Call <b>SetDetailHeight</b> in code to vary the amount of space assigned to rows in a DataWindow.
			 You cannot specifically set the height for different rows when you define a 
         DataWindow object in DataWindow Designer; however, you can turn on the Autosize Height property 
         for the detail band so that the height of each row is determined by the data.</para>
				<para>You can set the detail 
         height of one or more rows to zero, which hides them from view.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetFilter(System.String)">
            <summary>Sets the filter criteria for a DataWindow.</summary><param name="FilterExpression">A string whose value is a boolean expression.</param><exception cref="T:Sybase.DataWindow.InvalidExpressionException">
				<i>FilterExpression</i> is not a valid boolean DataWindow expression.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>
				<para>A DataWindow object can have a filter criteria specified as part of its definition. After data is 
         retrieved, rows that do not meet the criteria are immediately transferred from the Primary buffer to the 
         Filter buffer. The <b>SetFilter</b> method replaces any existing filter criteria.</para>
				<para>Rows for which <i>FilterExpression</i> evaluates to <c>false</c> will be moved to the Filter buffer when the <see cref="M:Sybase.DataWindow.DataStore.Filter"/>
			method is subsequently invoked.</para>
				<para>
					<i>FilterExpression</i> can consist of columns (identified by name or number), relational operators, 
				and values against which column values 
         are compared. Boolean expressions can be connected with logical operators AND and OR. You can also use NOT, 
         the negation operator. Use parentheses to control the order of evaluation.</para>
				<para>Sample expressions include:</para>
				<list type="bullet">
					<item>
						<c>item_id &gt; 5</c>
					</item>
					<item>
						<c>NOT item_id = 5</c>
					</item>
					<item>
						<c>(NOT item_id = 5) AND customer &gt; "Mabson"</c>
					</item>
					<item>
						<c>item_id &gt; 5 AND customer = "Smith"</c>
					</item>
					<item>
						<c>#1 &gt; 5 AND #2 = "Smith"</c>
					</item>
				</list>
				<para>If you build a <i>FilterExpression</i> in code, enclose string constants in quotation marks, and
				 format numbers using U.S. format (period as decimal separator). </para>
				<para>To remove a filter, call <b>SetFilter</b> with the empty string ("") for format and then call <see cref="M:Sybase.DataWindow.DataStore.Filter"/>.
				 The rows 
         in the filter buffer will be restored to the Primary buffer and positioned after the rows that already exist 
         there.</para>
				<para>To allow users to specify their own filter expression for a DataWindowControl, 
				call <see cref="M:Sybase.DataWindow.DataWindowControl.FilterDialog"/> to display a dialog box allowing for the constructon of a filter expression. 
         Then you can call <see cref="M:Sybase.DataWindow.DataStore.Filter"/> to apply the dynamically constructed expression to the DataWindowControl.
				</para>
			</remarks><example>The following code defines a filter so that rows within <c>dwEmployee</c> display only if the <c>emp_state</c> field
			matches the current value of <c>var1</c>, in this case "ME" for Maine.
         <code>
         [C#]
         string strState;
         strState = "ME";
         dwEmployee.SetFilter("emp_state = '"+ strState +" '");
         dwEmployee.Filter();
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetFilter(System.String)"/><seealso cref="M:Sybase.DataWindow.DataStore.Filter"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetFullState(Sybase.DataWindow.DataWindowFullState)">
            <summary>Applies the DataWindow state obtained by <see cref="M:Sybase.DataWindow.DataStore.GetFullState"/> to another DataWindowControl or DataStore. 
      </summary><param name="FullState">A <see cref="T:Sybase.DataWindow.DataWindowFullState"/> object containing the data and status information to be applied.</param><exception cref="T:System.ArgumentNullException">
				<i>FullState</i> is null.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<see cref="M:Sybase.DataWindow.DataStore.GetFullState"/> retrieves the entire state of a DataWindowControl or DataStore including the DataWindow object 
				specification, the data buffers, and the status flags in a format that can be serialized over application boundaries in .NET remoting applications. 
				When you use <b>SetFullState</b> 
         to apply <i>FullState</i>, the target DataWindow has 
         enough information to recreate the source DataWindow. </para>
				<para>Because <i>FullState</i> contains the DataWindow object specification, 
         the call to <b>SetFullState</b> will overwrite the DataWindow object current stored in the targeted DataWindow. 
         If the target of <b>SetFullState</b> does not have a DataWindow object associated with it, the DataWindow object associated 
         with <i>FullState</i> is used. The value of the <see cref="P:Sybase.DataWindow.DataWindowControl.DataWindowObject"/> property remains an empty string (""), however.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetFullState"/><seealso cref="M:Sybase.DataWindow.DataStore.SetChanges(Sybase.DataWindow.DataWindowChanges)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore._SetFullState(Sybase.DataWindow.DataWindowFullState,System.Int32@)">
            <summary>
            This method is designed for DataWindow .NET internal usage only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetHtmlAction(System.String,System.String)">
            <summary>Accepts action and context information about user interaction with a DataWindow control on a Web Form in a Web browser
         so that newly generated HTML can reflect any requested changes. 
      </summary><param name="Action">A string describing an action associated with a button click or method call in a DataWindow control on a Web page. </param><param name="Context">A string describing the context of the action parameter in the DataWindow control. </param><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetItemDate(System.Int32,System.Int16,System.DateTime)">
            <overloads>Sets the value of a DataWindow Date column. </overloads><summary>Sets the Date value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="DateValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store Date values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDate</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDate</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDate</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataStore.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDate(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetItemDate(System.Int32,System.String,System.DateTime)">
            <summary>Sets the Date value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="DateValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store Date values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDate</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDate</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDate</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataStore.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDate(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetItemDateTime(System.Int32,System.Int16,System.DateTime)">
            <overloads>Sets the value of a DataWindow DateTime column. </overloads><summary>Sets the DateTime value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="DateTimeValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store DateTime values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDateTime</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDateTime</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDateTime</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataStore.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDate(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDateTime(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetItemDateTime(System.Int32,System.String,System.DateTime)">
            <summary>Sets the DateTime value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="DateTimeValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store DateTime values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDateTime</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDateTime</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDateTime</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataStore.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDate(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDateTime(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)">
            <overloads>Sets the value of a DataWindow DateTime column. </overloads><summary>Sets the DateTime value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="DateTimeValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store DateTime values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlDateTime</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlDateTime</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlDateTime</b> to override the user's erroneous entry with valid data.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.DataStore.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDate(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetItemSqlDateTime(System.Int32,System.String,System.Data.SqlTypes.SqlDateTime)">
            <summary>Sets the Decimal value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="DateTimeValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store DateTime values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlDateTime</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlDateTime</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlDateTime</b> to override the user's erroneous entry with valid data.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.DataStore.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDate(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetItemDecimal(System.Int32,System.Int16,System.Decimal)">
            <overloads>Sets the value of a DataWindow Decimal column. </overloads><summary>Sets the Decimal value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="DecimalValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store Decimal values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDecimal</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDecimal</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDecimal</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataStore.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDecimal(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetItemDecimal(System.Int32,System.String,System.Decimal)">
            <summary>Sets the Decimal value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="DecimalValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store Decimal values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDecimal</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDecimal</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDecimal</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataStore.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDecimal(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)">
            <overloads>Sets the value of a DataWindow Decimal column. </overloads><summary>Sets the Decimal value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="DecimalValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store Decimal values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlDecimal</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlDecimal</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlDecimal</b> to override the user's erroneous entry with valid data.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.DataStore.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDecimal(System.Int32,System.Int16,System.Decimal)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetItemSqlDecimal(System.Int32,System.String,System.Data.SqlTypes.SqlDecimal)">
            <summary>Sets the Decimal value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="DecimalValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store Decimal values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlDecimal</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlDecimal</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlDecimal</b> to override the user's erroneous entry with valid data.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.DataStore.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDecimal(System.Int32,System.Int16,System.Decimal)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetItemDouble(System.Int32,System.Int16,System.Double)">
            <overloads>Sets the value of a DataWindow integer or floating point column. </overloads><summary>Sets the value of an integer or floating point column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number for which you want to set the value.</param><param name="ColumnNumber">The column number for which you want to set the value.</param><param name="DoubleValue">The value to which you want to set the data at the row and column location.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store numeric values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDouble</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDouble</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDouble</b> to override the user's erroneous entry with valid data.</para>
				<para>If the underlying DataWindow column type is long or ulong, <i>DoubleValue</i> is truncated before being stored in the DataWindow.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataStore.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetItemSqlDouble(System.Int32,System.String,System.Data.SqlTypes.SqlDouble)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDouble(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetItemDouble(System.Int32,System.String,System.Double)">
            <summary>Sets the value of an integer or floating point column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number for which you want to set the value.</param><param name="ColumnName">The column name for which you want to set the value.</param><param name="DoubleValue">The value to which you want to set the data at the row and column location.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store numeric values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDouble</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDouble</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDouble</b> to override the user's erroneous entry with valid data.</para>
				<para>If the underlying DataWindow column type is long or ulong, <i>DoubleValue</i> is truncated before being stored in the DataWindow.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataStore.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetItemSqlDouble(System.Int32,System.String,System.Data.SqlTypes.SqlDouble)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemDouble(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetItemSqlDouble(System.Int32,System.String,System.Data.SqlTypes.SqlDouble)">
            <summary>Sets the value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="DoubleValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store numeric values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlDouble</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlDouble</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlDouble</b> to override the user's erroneous entry with valid data.</para>
				<para>If the underlying DataWindow column type is long or ulong, <i>DoubleValue</i> is truncated before being stored in the DataWindow.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.DataStore.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDouble(System.Int32,System.Int16,System.Double)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetItemSqlDouble(System.Int32,System.Int16,System.Data.SqlTypes.SqlDouble)">
            <overloads>Sets the value of a DataWindow integer or floating point column. </overloads><summary>Sets the value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="DoubleValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store numeric values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlDouble</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlDouble</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlDouble</b> to override the user's erroneous entry with valid data.</para>
				<para>If the underlying DataWindow column type is long or ulong, <i>DoubleValue</i> is truncated before being stored in the DataWindow.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.DataStore.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDouble(System.Int32,System.Int16,System.Double)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetItemNull(System.Int32,System.Int16)">
            <overloads>Sets the value of a column to null. </overloads><summary>Sets to null  the value of the column, identified by number, in the specified row of the Primary buffer.
      </summary><param name="RowNumber">The row number containing the column.</param><param name="ColumnNumber">The number of the column to be set to null.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.NotSupportedException"><b>SetItemNull</b> is not supported for crosstab DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemNull</b> to set a column value to null before writing it to the database. Alternatively, 
         you can use the <see cref="M:Sybase.DataWindow.DataStore.SetItemSqlDouble(System.Int32,System.String,System.Data.SqlTypes.SqlDouble)"/>, <see cref="M:Sybase.DataWindow.DataStore.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)"/>, <see cref="M:Sybase.DataWindow.DataStore.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/>, or
         <see cref="M:Sybase.DataWindow.DataStore.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)"/> method, since they accept System.Data.SqlTypes datatypes, which support the direct assignment of a null
         value.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetItemNull(System.Int32,System.String)">
            <summary>Sets to null  the value of the column, identified by number, in the specified row of the Primary buffer.
      </summary><param name="RowNumber">The row number containing the column.</param><param name="ColumnName">The name of the column to be set to null.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.NotSupportedException"><b>SetItemNull</b> is not supported for crosstab DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemNull</b> to set a column value to null before writing it to the database. Alternatively, 
         you can use the <see cref="M:Sybase.DataWindow.DataStore.SetItemSqlDouble(System.Int32,System.String,System.Data.SqlTypes.SqlDouble)"/>, <see cref="M:Sybase.DataWindow.DataStore.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)"/>, <see cref="M:Sybase.DataWindow.DataStore.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/>, or
         <see cref="M:Sybase.DataWindow.DataStore.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)"/> method, since they accept System.Data.SqlTypes datatypes, which support the direct assignment of a null
         value.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.IsItemNull(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.ItemStatus)">
            <overloads>Changes the modification status of a column within a row. </overloads><summary>Changes the modification status of the column, specified by number, within a row. 
      </summary><param name="RowNumber">The row number containing the column.</param><param name="ColumnNumber">The number of the column for which you want to set the status.</param><param name="Buffer">The DataWindow buffer that contains the row.</param><param name="Status">The new <see cref="T:Sybase.DataWindow.ItemStatus"/>.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not a valid row in <i>Buffer</i>.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> in not valid.</exception><exception cref="T:System.NotSupportedException"><b>SetItemStatus</b> is not supported for crosstab DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<see cref="M:Sybase.DataWindow.DataStore.SetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.RowStatus)"/> changes the modification status of a row; <b>SetItemStatus</b> changes 
         the modification status of an item within a row.</para>
				<para>When data is retrieved into a DataWindow, all rows and columns initially have a status of NotModified. After 
         data has changed in a column in a particular row, either because the user changed the data or the data was changed 
         programmatically, the item status for that column changes to Modified. Once the status for any column in a row changes to Modified,
          the row status also changes to Modified.</para>
				<para>When a row is inserted into a DataWindow, it initially has a row status of New, and all columns in that 
         row initially have an item status of NotModified. After data has changed in a column in the row, either because 
         the user changed the data or the data was changed programmatically, the item status changes to Modified. Once 
         the status for any column in the inserted row changes to Modified, the row status changes to NewAndModified.
         When a DataWindow column has a default value, the column's item status does not change to Modified until the 
         user makes at least one actual change to a column in that row.</para>
				<para>Use <b>SetItemStatus</b> to change the column's status from Modified to NotModified or vice versa. A column marked as NotModified
				will not be included in any UPDATE statements issued by <see cref="M:Sybase.DataWindow.DataStore.UpdateData"/>.</para>
				<para>For more information about setting the status of rows and columns, see the section on updating the 
         database in the <i>DataWindow .NET Programmer's Guide</i>.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.RowStatus)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetItemStatus(System.Int32,System.String,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.ItemStatus)">
            <summary>Changes the modification status of the column, specified by name, within a row. 
      </summary><param name="RowNumber">The row number containing the column.</param><param name="ColumnName">The name of the column for which you want to set the status.</param><param name="Buffer">The DataWindow buffer that contains the row.</param><param name="Status">The new <see cref="T:Sybase.DataWindow.ItemStatus"/>.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not a valid row in <i>Buffer</i>.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> in not valid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.NotSupportedException"><b>SetItemStatus</b> is not supported for crosstab DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<see cref="M:Sybase.DataWindow.DataStore.SetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.RowStatus)"/> changes the modification status of a row; <b>SetItemStatus</b> changes 
         the modification status of an item within a row.</para>
				<para>When data is retrieved into a DataWindow, all rows and columns initially have a status of NotModified. After 
         data has changed in a column in a particular row, either because the user changed the data or the data was changed 
         programmatically, the item status for that column changes to Modified. Once the status for any column in a row changes to Modified,
          the row status also changes to Modified.</para>
				<para>When a row is inserted into a DataWindow, it initially has a row status of New, and all columns in that 
         row initially have an item status of NotModified. After data has changed in a column in the row, either because 
         the user changed the data or the data was changed programmatically, the item status changes to Modified. Once 
         the status for any column in the inserted row changes to Modified, the row status changes to NewAndModified.
         When a DataWindow column has a default value, the column's item status does not change to Modified until the 
         user makes at least one actual change to a column in that row.</para>
				<para>Use <b>SetItemStatus</b> to change the column's status from Modified to NotModified or vice versa. A column marked as NotModified
				will not be included in any UPDATE statements issued by <see cref="M:Sybase.DataWindow.DataStore.UpdateData"/>.</para>
				<para>For more information about setting the status of rows and columns, see the section on updating the 
         database in the <i>DataWindow .NET Programmer's Guide</i>.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.RowStatus)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetItemString(System.Int32,System.Int16,System.String)">
            <overloads>Sets the value of a DataWindow String column. </overloads><summary>Sets the String value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="StringValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store String values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemString</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemString</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemString</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataStore.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemString(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetItemString(System.Int32,System.String,System.String)">
            <summary>Sets the String value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="StringValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store String values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemString</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemString</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemString</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataStore.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemString(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)">
            <summary>Sets the String value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="StringValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store String values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlString</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlString</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlString</b> to override the user's erroneous entry with valid data.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.DataStore.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetItemString(System.Int32,System.Int16,System.String)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetItemSqlString(System.Int32,System.Int16,System.Data.SqlTypes.SqlString)">
            <overloads>Sets the value of a DataWindow String column. </overloads><summary>Sets the String value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="StringValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store String values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlString</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlString</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlString</b> to override the user's erroneous entry with valid data.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.DataStore.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetItemString(System.Int32,System.Int16,System.String)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetItemTime(System.Int32,System.Int16,System.DateTime)">
            <overloads>Sets the value of a DataWindow Time column. </overloads><summary>Sets the Time value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="TimeValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store Time values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemTime</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemTime</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemTime</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataStore.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemTime(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetItemTime(System.Int32,System.String,System.DateTime)">
            <summary>Sets the Time value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="TimeValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store Time values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemTime</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemTime</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemTime</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataStore.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataStore.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetItemTime(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetProperty(System.String,System.String)">
            <summary>Sets the value of a DataWindow object property.</summary><param name="Property">The property you want to modify.</param><param name="Value">The value to which you want to set the property, converted to a string.</param><exception cref="T:System.ArgumentNullException">
				<i>Property</i> or <i>Value</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">
				<i>Property</i> or <i>Value</i> is invalid, or an unexpected error has occurred.</exception><remarks>
				<para>You can only set one property at a time with the <b>SetProperty</b> method, while the <see cref="M:Sybase.DataWindow.DataStore.Modify(System.String)"/> method 
         lets you supply multiple properties in a single invocation. Some commonly used properties are also exposed on various descendants
         of the <see cref="T:Sybase.DataWindow.GraphicObject"/> classes and can be set directly.  For example, the following code fragments are 
         semantically equivalent:</para>
				<list type="bullet">
					<item>
						<c>dwReport.SetProperty("t_1.background.color", "0~tRGB(0,255,0)")</c>
					</item>
					<item>
						<c>dwReport.Modify("t_1.background.color='0~tRGB(0,255,0)'")</c>
					</item>
					<item>
						<c>Dim gobText as Sybase.DataWindow.GraphicObjectText</c>
        				<c>gobText = CObj(dwEmp.GetObjectByName("t_1"))</c>
        				<c>gobText.BackgroundColor = System.Drawing.Color.Lime</c>
					</item>
				</list>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.Modify(System.String)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetProperty(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetRow(System.Int32)">
            <summary>Sets the current row in a DataWindow. 
      </summary><param name="RowNumber">The row you want to make current.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not valid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>SetRow</b> sets the <see cref="P:Sybase.DataWindow.DataStore.CurrentRow"/> property. For a DataWindowControl, the cursor moves to the
			current column at <i>RowNumber</i>, but the DataWindow is not scrolled automatically.  Use <see cref="M:Sybase.DataWindow.DataWindowControl.ScrollToRow(System.Int32)"/> 
			passing <i>RowNumber</i> to ensure the row is visible to the user.</para>
				<para>
					<b>SetRow</b> can trigger the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/>, 
         <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/>,
         <see cref="E:Sybase.DataWindow.DataWindowControl.ItemFocusChanged"/>,
         <see cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanging"/>, and
         <see cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanged"/> event. Do not call <b>SetRow</b> 
         in any of these events, because a recursive call can cause a stack fault.</para>
			</remarks><seealso cref="P:Sybase.DataWindow.DataStore.CurrentRow"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.RowStatus)">
            <summary>Changes the modification status of a row. 
      </summary><param name="RowNumber">The row number for which you want to set the status.</param><param name="Buffer">The DataWindow buffer that contains the row.</param><param name="Status">The new <see cref="T:Sybase.DataWindow.RowStatus"/>.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not a valid row in <i>Buffer</i>.</exception><exception cref="T:System.NotSupportedException"><b>SetRowStatus</b> is not supported for crosstab DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>SetRowStatus</b> changes the modification status of a row; <see cref="M:Sybase.DataWindow.DataStore.SetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.ItemStatus)"/> changes 
         the modification status of an item within a row.</para>
				<para>When data is retrieved into a DataWindow, all rows and columns initially have a status of NotModified. After 
         data has changed in a column in a particular row, either because the user changed the data or the data was changed 
         programmatically, the item status for that column changes to Modified. Once the status for any column in a row changes to Modified,
          the row status also changes to Modified.</para>
				<para>When a row is inserted into a DataWindow, it initially has a row status of New, and all columns in that 
         row initially have an item status of NotModified. After data has changed in a column in the row, either because 
         the user changed the data or the data was changed programmatically 
         (not including the assignment of a default value), the item status changes to Modified. 
          Once 
         the status for any column in an inserted row changes to Modified, the row status changes to NewAndModified.
</para>
				<para>Changing the row status to NotModified will change the item status of all columns in that row to NotModified.</para>
				<para>Use <b>SetRowStatus</b> when you want to change the way a row will be updated. Typically, you do this to 
         prevent the default behavior from taking place. For example, you might copy a row from one DataWindow 
         to another. After the user modifies the row, you would want to issue an UPDATE statement instead of an 
         INSERT statement, since the row already exists in the database. To do so, you would change the row status of the copied row from NewAndModified to just Modified, signalling <see cref="M:Sybase.DataWindow.DataStore.UpdateData"/>
         to generate an UPDATE rather than an INSERT statement.</para>
				<para>For more information about setting the status of rows and columns, see the section on updating the 
         database in the <i>DataWindow .NET Programmer's Guide</i>.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.ItemStatus)"/><seealso cref="M:Sybase.DataWindow.DataStore.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetSort(System.String)">
            <summary>Specifies the sort criteria for a DataWindow control or DataStore. 
      </summary><param name="SortExpression">A string whose value is valid sort expression for the DataWindow.</param><exception cref="T:Sybase.DataWindow.InvalidExpressionException">
				<i>SortExpression</i> is not valid</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>A DataWindow object can have sort criteria specified as part of its definition. <b>SetSort</b> overrides 
         the definition, providing new sort criteria for the DataWindow; however, it does not actually sort the rows. 
         Call the <see cref="M:Sybase.DataWindow.DataStore.Sort"/> method to perform the actual sorting.</para>
				<para>
					<i>SortExpression</i> can have one of the forms shown below, depending on whether 
         you specify the column by name or number. (Column numbers must be prefaced by #). <c>Order</c> is either <c>A</c> for ascending or <c>D</c> for descending order. You can 
         specify secondary sorting by specifying criteria for additional columns in the format string. Separate each 
         column specification with a comma.</para>
				<list type="bullet">
					<item>
						<c>columnname order</c>, for instance: <c>"emp_lname A"</c> or <c>"emp_lname A, dept_id D"</c>
					</item>
					<item>
						<c>#columnnumber order</c>, for instance: <c>"#3 A"</c>
					</item>
				</list>
				<para>To allow users to specify their own sort expression for a DataWindowControl, 
				call <see cref="M:Sybase.DataWindow.DataWindowControl.SortDialog"/> to display a dialog box allowing for the construction of the expression. 
         Then you can call <see cref="M:Sybase.DataWindow.DataStore.Sort"/> to apply the dynamically constructed expression to the DataWindowControl.
				</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SortDialog"/><seealso cref="M:Sybase.DataWindow.DataStore.Sort"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetSqlUpdate(System.String)">
            <summary>Specifies the SQL statement that is about to be sent to the database by a DataWindowControl or DataStore. 
      </summary><param name="SqlSyntax">The SQL syntax to be submitted to the database.</param><exception cref="T:System.ArgumentNullException">
				<i>SqlSyntax</i> is null.</exception><exception cref="T:System.NotSupportedException">
				<b>SetSqlUpdate</b> was invoked outside of the <see cref="E:Sybase.DataWindow.DataStore.SqlPreview"/> event.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>Use <b>SetSqlUpdate</b> to modify SQL syntax before it is sent to the database. This method can only be
			called within the <see cref="E:Sybase.DataWindow.DataStore.SqlPreview"/> event, where the SQL statement is made available via the 
			SqlSyntax property of <see cref="T:Sybase.DataWindow.SqlPreviewEventArgs"/>. 
      </remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetSqlSelect(System.String)">
            <summary>Specifies the SQL SELECT statement for a DataWindowControl or DataStore.</summary><param name="SqlSyntax">The SQL SELECT syntax</param><exception cref="T:System.InvalidOperationException">
				<see cref="M:Sybase.DataWindow.DataStore.SetTransaction(Sybase.DataWindow.AdoTransaction)"/> has not been executed.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>You must <see cref="M:Sybase.DataWindow.DataStore.SetTransaction(Sybase.DataWindow.AdoTransaction)"/> method to set the transaction object before invoking <b>SetSqlSelect</b>, or
				an exception will result.</para>
				<para>Use <b>SetSqlSelect</b> to dynamically change the SQL SELECT statement for a DataWindow.
         If the DataWindow is updatable, the SELECT statement is validated against the database 
         and the DataWindow column specifications. Each column in the SQL SELECT 
         statement must match the column type in the DataWindow object.</para>
				<para>Use <b>SetSqlSelect</b> only if the data source for the DataWindow object is a SQL SELECT statement without 
         retrieval arguments.  You can use <see cref="M:Sybase.DataWindow.DataStore.Modify(System.String)"/> or <see cref="M:Sybase.DataWindow.DataStore.SetProperty(System.String,System.String)"/> 
         with the <c>DataWindow.Table.Select</c> property
          when retrieval arguments are involved; however, no validation of the SQL statement will occur, making this technique more
          error prone.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.GetSqlSelect"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetSqlUpdate(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetTransaction(Sybase.DataWindow.AdoTransaction)">
            <summary>Associates a DataWindow with an ADO.NET database connection.
      </summary><param name="AdoTransaction">The <see cref="T:Sybase.DataWindow.AdoTransaction"/> instance referencing the database connection.</param><exception cref="T:System.InvalidOperationException">
				<i>AdoTransaction</i> has not been bound to an ADO.NET connection.</exception><exception cref="T:System.ArgumentNullException">
				<i>AdoTransaction</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In a DataWindow database connection, <i>AdoTransaction</i> is an object that functions 
         as the communications area between the DataWindow and the database. <i>AdoTransaction</i> specifies the 
         parameters for connecting to a database and is a prerequisite for accessing a 
         database via DataWindow .NET using ADO.NET.</para>
				<para>To connect to a database using an ADO.NET connection, you perform the following general steps:
         <list type="number">
						<item>Create a new ADO.NET IDbConnection reference and set its properties. In the initial release of DataWindow .NET, only 
         			<see cref="T:System.Data.OleDb.OleDbConnection"/> is supported.</item>
						<item>Open the connection.</item>
						<item>Create an <see cref="T:Sybase.DataWindow.AdoTransaction"/> object passing the IDBConnection
						reference to its constructor.</item>
						<item>
							<see cref="M:Sybase.DataWindow.AdoTransaction.BindConnection"/> the ADO.NET connection to the internal DataWindow .NET
         database interaction layer.</item>
						<item>Call <b>SetTransaction</b> to associate the transaction with a DataWindow.</item>
						<item>Perform various database operations, such as <see cref="M:Sybase.DataWindow.DataStore.Retrieve(System.Data.DataTable)"/> and <see cref="M:Sybase.DataWindow.DataStore.UpdateData"/>.</item>
						<item>Close the ADO.NET connection.</item>
					</list>
				</para>
			</remarks><example>This C# example retrieves and updates a simple DataStore using an ADO.NET connection to Adaptive Server Anywhere 
			(exception handling has been omitted for brevity) :
         <code>
         System.Data.OleDbConnection oleDbConn = new System.Data.OleDb.OleDbConnection();
         oleDbConn.ConnectionString="User ID=dba;Password=sql;Data Source=mydb;Provider=ASAProv.90";
         oleDbConn.Open();
         
         Sybase.DataWindow.AdoTransaction adoTrans = new Sybase.DataWindow.AdoTransaction(oleDbConn);
         adoTrans.BindConnection();
         
         Sybase.DataWindow.DataStore ds = new Sybase.DataWindow.DataStore("hr.pbl","employees");
         ds.SetTransaction(adoTrans);
         ds.Retrieve();
         
         adoTrans.Transaction = adoTrans.Connection.BeginTransaction();
         ds.SetItemString(1,2,"New Hire");
         ds.UpdateData();
         adoTrans.Transaction.Commit();
         
         adoTrans.Connection.Close();
         </code>
			</example><seealso cref="M:Sybase.DataWindow.AdoTransaction.BindConnection"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetTransaction(Sybase.DataWindow.Transaction)">
            <overloads>Associates a DataWindow with a physical database connection.</overloads><summary>Associates a DataWindow with a database connection made via a native DataWindow .NET database connection.
      </summary><param name="Transaction">The <see cref="T:Sybase.DataWindow.Transaction"/> instance referencing the database connection.</param><exception cref="T:System.ArgumentNullException">
				<i>Transaction</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In a DataWindow database connection, <i>Transaction</i> is an object that functions 
         as the communications area between the DataWindow and the database. <i>Transaction</i> specifies the 
         parameters for connecting to a database and is a prerequisite for accessing a 
         database via DataWindow .NET when using Sybase-provided database interfaces. <note>You cannot use a
         <see cref="T:Sybase.DataWindow.Transaction"/> to access the database outside of a DataWindow .NET method.  You can do this using
         the <see cref="T:Sybase.DataWindow.AdoTransaction"/> class, however.</note>
				</para>
				<para>The following general steps apply: 
         <list type="number">
						<item>Create a <see cref="T:Sybase.DataWindow.Transaction"/> object instance. </item>
						<item>Set its properties.</item>
						<item>
							<see cref="M:Sybase.DataWindow.Transaction.Connect"/> to the database.</item>
						<item>Call <b>SetTransaction</b> to associate object to a DataWindow.</item>
						<item>Perform various database operations, such as <see cref="M:Sybase.DataWindow.DataStore.Retrieve(System.Data.DataTable)"/> and <see cref="M:Sybase.DataWindow.DataStore.UpdateData"/>.</item>
						<item>
							<see cref="M:Sybase.DataWindow.Transaction.Disconnect"/> from the database. </item>
					</list>
				</para>
			</remarks><example>This example connects to the database using the Sybase-provided ODBC interface and uses that connection to 
			retrieve the <c>dwDepartment</c> DataWindowControl:
         <code>
         sqlca = new Sybase.DataWindow.Transaction;
         sqlca.Dbms = Sybase.DataWindow.DbmsType.Odbc;
         sqlca.DbParameter = "ConnectString='DSN=EAS Demo DB V10;UID=dba;PWD=sql'";
         try
         {
         	sqlca.Connect();
         	dwDepartment.SetTransaction(sqlca);
        		dwDepartment.Retrieve();
         } catch (System.Exception ex) {
         	HandleException(ex);
         }
         </code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.SetWSConnection(Sybase.DataWindow.WebServiceConnection)">
            <summary>Specifies overrides for a DataWindow or DataStore's web service connection</summary><param name="wsObject">The <see cref="T:Sybase.DataWindow.WebServiceConnection"/> containing the override values.</param>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.ShareData(Sybase.DataWindow.IDataWindowBase)">
            <summary>Shares data retrieved by one DataWindow which is referred with another DataWindow</summary><param name="TargetDW">The (secondary) DataWindow that will share the primary DataWindow's data.</param><exception cref="T:System.ArgumentException">Primary DataWindow cannot be shared with <i>TargetDW</i> due to 
			incompatible formats.</exception><exception cref="T:System.ArgumentNullException">
				<i>TargetDW</i> is null.</exception><exception cref="T:System.NotSupportedException">Crosstab and composite DataWindows cannot be shared, nor can the initiator of <b>ShareData</b>
			be a DataWindowChild nested in composite DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The primary and secondary DataWindows do not share formatting; only the data is shared, including data in the
         Primary, Delete buffer, and Filter buffer, as well as the sort criteria. The columns must be the same for the 
         DataWindow objects, but the SELECT statements can be different. For example, you could share data among DataWindow objects with 
         these SELECT statements:</para>
				<list type="bullet">
					<item>
						<c>SELECT dept_id from dept</c>
					</item>
					<item>
						<c>SELECT dept_id from dept where dept_id = 200</c>
					</item>
					<item>
						<c>SELECT dept_id from employee</c>
					</item>
				</list>
				<para>The WHERE clause in the DataWindow object of <i>TargetDW</i> has no effect on the 
         number of rows returned. The number of rows returned to both DataWindow controls is determined by the 
         WHERE clause in the DataWindow which invoked <b>ShareData</b>.</para>
				<para>When you call methods in either the primary or secondary DataWindow that change the data, 
         messages normally associated with the method are routed to the primary DataWindow 
          and all secondary DataWindows are affected. Such methods include:
         DeleteRow, Filter, FilterDialog, GetSqlSelect, ImportFile, ImportString, ImportClipboard, InsertRow, ReselectRow,
         Reset, Retrieve, SetFilter, SetSort, SetSqlSelect, Sort, SortrDialog, and UpdateData.</para>
				<para>
					<b>ShareData</b> does not automatically share data among DropDownDataWindows
				 in the primary or secondary DataWindows. You must do this explicitly by getting a handle to the DropDownDataWindow 
         using <see cref="M:Sybase.DataWindow.DataStore.GetChild(System.String)"/> and either retrieving the DropDownDataWindow or using <b>ShareData</b>
         to share data from an appropriate data source with the DropDownDataWindow.</para>
				<para>To turn off sharing in a primary or secondary DataWindow, call the <see cref="M:Sybase.DataWindow.DataStore.ShareDataOff"/> method. When 
         sharing is turned off for the primary DataWindow, the secondary DataWindows are disconnected and 
         the data disappears. However, turning off sharing for a secondary DataWindow does not affect the 
         data in the primary DataWindow or other secondary DataWindows.</para>
				<para>You cannot use <b>ShareData</b> to share data among application boundaries, <see cref="M:Sybase.DataWindow.IDataStore.GetFullState"/>
				for information on how to manage DataWindows in .NET remoting applications.</para>
				<para>Trying to set 
         the QueryMode or QuerySort DataWindow object properties on a secondary DataWindow is not supported and
         results in an exception.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.ShareDataOff"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.ShareDataOff">
            <summary>Turns off the sharing of data buffers for a DataWindow.</summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>When you call <b>ShareDataOff</b> for a secondary 
         DataWindow, that control no longer contains data, but the primary DataWindow and other secondary controls 
         are not affected. When you call <b>ShareDataOff</b> for the primary DataWindow, all secondary DataWindows are 
         disconnected and no longer contain data. 
      </remarks><seealso cref="M:Sybase.DataWindow.DataStore.ShareData(Sybase.DataWindow.IDataWindowBase)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.Sort">
            <summary>Sorts the rows in a DataWindow using the current sort criteria. 
      </summary><exception cref="T:System.NotSupportedException">
				<b>Sort</b> is not supported for a composite DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>To change the sort criteria from the default specified in DataWindow Designer, use
         <see cref="M:Sybase.DataWindow.DataStore.SetSort(System.String)"/> or <see cref="M:Sybase.DataWindow.DataWindowControl.SortDialog"/> (the latter
         for DataWindowControls only).</para>
				<para>When the <see cref="M:Sybase.DataWindow.DataStore.Retrieve(System.Data.DataTable)"/> method retrieves data for the DataWindow, it automatically applies the current
				sort criteria. You only need to call <b>Sort</b> after you 
         change the criteria or if the data have changed because of processing or user input.</para>
				<para>After sorting a DataWindow object that includes groups, 
         call <see cref="M:Sybase.DataWindow.DataStore.CalculateGroups"/> to ensure the groupings take into account changes in the sort order.</para>
				<para>When the Retrieve As Needed DataWindow object property is set, <b>Sort</b> method cancels its effect, because 
         all rows must be retrieved to be sorted correctly.</para>
				<para>When you sort a DataWindow on a specified column, rows with null data remain at the top, regardless of 
         whether you choose ascending or descending order for your sort criteria.</para>
				<para>The sort order is performed 
         on a result set returned from a database, but is not necessarily the same sort order used by the database 
          when an ORDER BY clause is used in a SQL query.</para>
				<para>
					<b>Sort</b> method uses a typical 
         lexical sort, with symbols, such as a hyphen or underline, ranked higher than alphanumeric characters.</para>
			</remarks><example>This example sort <c>dwEmployee</c> by column 1 in ascending order.  Rows with identical values in the first column
			are further sorted by column 2 in descending order:
         <code>
         dwEmployee.SetSort("#1 A, #2 D")
         dwEmployee.Sort()
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataStore.SetSort(System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SortDialog"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.UpdateData">
            <overloads>Updates the database with the changes made in a DataWindow.</overloads><summary>Updates the database with the changes made in a DataWindow and automatically clears the status flags.</summary><exception cref="T:Sybase.DataWindow.DbErrorException">A database error has occurred.</exception><exception cref="T:System.InvalidOperationException">
				<list type="bullet">
					<item>The DataWindow is not updatable, or</item>
					<item>the associated <see cref="T:Sybase.DataWindow.Transaction"/> or <see cref="T:Sybase.DataWindow.AdoTransaction"/> is not 
				connected to the database.</item>
				</list>
			</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This overload of <b>UpdateData</b> resets the row and item status flags after successfully completing the update. 
				However, you 
         can prevent the flags from being reset until you perform other validations and commit the changes by
         calling one of the overloaded versions of <b>UpdateData</b> and setting the <i>ResetUpdateFlags</i> argument to <c>false</c>. You would then
         later call <see cref="M:Sybase.DataWindow.DataStore.ResetUpdateStatus"/> to explicitly refresh the status flags. 
         </para>
				<para>
         For DataWindowControls, this version of <b>UpdateData</b> performs an implicit
          <see cref="M:Sybase.DataWindow.DataWindowControl.AcceptText"/> operation on the data within the edit control when the method is 
          invoked.  This ensures that pending data is moved from the edit control to the Primary buffer before the database 
          update occurs. Overloaded versions of this method allow you to change that behavior.</para>
				<para>Do not call this version of <b>UpdateData</b> in the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> event.
         The implicit <see cref="M:Sybase.DataWindow.DataWindowControl.AcceptText"/> will trigger another ItemChanged event leading to
         a recursive loop and likely a stack fault.</para>
				<!-- CHECK ON THIS - SEEMS LIKE A BUG?
				<para>If a DataWindowControl or DataStore is populated using SetChanges or SetFullState, and an UpdateData is done that 
         includes deleted rows, the deleted rows remain in the delete buffer until a subsequent GetChanges is applied 
         to the DataWindow or DataStore.</para>
         -->
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetTransaction(Sybase.DataWindow.AdoTransaction)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.UpdateData(System.Boolean)">
            <summary>Updates the database with the changes made in a DataWindow, optionally accepting a pending change in the edit control.</summary><param name="AcceptData">
				<c>true</c> if an <see cref="M:Sybase.DataWindow.DataWindowControl.AcceptText"/> should be 
			performed prior to the update, false otherwise.</param><exception cref="T:Sybase.DataWindow.DbErrorException">A database error has occurred.</exception><exception cref="T:System.InvalidOperationException">
				<list type="bullet">
					<item>The DataWindow is not updatable, or</item>
					<item>the associated <see cref="T:Sybase.DataWindow.Transaction"/> or <see cref="T:Sybase.DataWindow.AdoTransaction"/> is not 
				connected to the database.</item>
				</list>
			</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Since <see cref="M:Sybase.DataWindow.DataWindowControl.AcceptText"/> applies only to DataWindowControls, this overload is 
				identical to the parameterless version of <b>UpdateData</b> when invoked on a DataStore or DataWindowChild.</para>
				<para>Use this version of <b>UpdateData</b> to ignore any pending changes in the DataWindowControl's edit control
				before performing the update. Changes in the edit control are automatically validated when the user moves from 
				column to column within the control;
				however, if focus leaves the DataWindowControl completely (for instance, a command button is pressed) the last changes made
				in the edit control are not automatically applied to the Primary buffer.  If you want that data to be included in the update, 
				set <i>AcceptData</i> to <c>true</c> (or use the parameterless version of <b>UpdateData</b>).</para>
				<para>If you call <b>UpdateData</b> in the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/>
				event, be sure to set the <i>AcceptData</i> argument to <c>false</c> to 
         avoid an endless loop and a stack fault. If you call <b>UpdateData</b> in that event, the item's old value will be applied
         , not the newly entered value; the new value is not in place until the event completes.
           If you want to include the new value, use an appropriate SetItem method within the event script.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetTransaction(Sybase.DataWindow.AdoTransaction)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.UpdateData(System.Boolean,System.Boolean)">
            <summary>Updates the database with the changes made in a DataWindow, optionally accepting a pending change in the edit control and
			resetting status flags.</summary><param name="AcceptData">
				<c>true</c> if an <see cref="M:Sybase.DataWindow.DataWindowControl.AcceptText"/> should be 
			performed prior to the update, false otherwise.</param><param name="ResetUpdateFlags">
				<c>true</c> if an row and item status flags should be automatically reset, <c>false</c> if they should
			be retained.</param><exception cref="T:Sybase.DataWindow.DbErrorException">A database error has occurred.</exception><exception cref="T:System.InvalidOperationException">
				<list type="bullet">
					<item>The DataWindow is not updatable, or</item>
					<item>the associated <see cref="T:Sybase.DataWindow.Transaction"/> or <see cref="T:Sybase.DataWindow.AdoTransaction"/> is not 
				connected to the database.</item>
				</list>
			</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>You can use this version of <b>UpdateData</b> to ignore any pending changes in the DataWindowControl's edit control
				before performing the update. Changes in the edit control are automatically validated when the user moves from 
				column to column within the control;
				however, if focus leaves the DataWindowControl completely (for instance, a command button is pressed) the last changes made
				in the edit control are not automatically applied to the Primary buffer.  If you want that data to be included in the update, 
				set <i>AcceptData</i> to <c>true</c> (or use the parameterless version of <b>UpdateData</b>).</para>
				<para>If you call <b>UpdateData</b> in the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/>
				event, be sure to set the <i>AcceptData</i> argument to <c>false</c> to 
         avoid an endless loop and a stack fault. If you call <b>UpdateData</b> in that event, the item's old value will be applied
         , not the newly entered value; the new value is not in place until the event completes.
           If you want to include the new value, use an appropriate SetItem method within the event script.</para>
				<para>If you want to update several tables in one DataWindow, you can use <see cref="M:Sybase.DataWindow.DataStore.Modify(System.String)"/> or <see cref="M:Sybase.DataWindow.DataStore.SetProperty(System.String,System.String)"/>
				to change the Update property of columns in each table. To preserve the status flags of the rows and columns, set 
         <i>ResetUpdateFlags</i> argument to <c>false</c>. Because the updates all occur in the same DataWindow control or DataStore, 
         you cannot allow the flags to be cleared until all the tables have used them. When all the updates are 
         successfully completed and committed, call <see cref="M:Sybase.DataWindow.DataStore.ResetUpdateStatus"/> to clear the status flags and return the DataWindow to 
         an unmodified state.</para>
				<para>Likewise, if you are updating multiple DataWindows as part of one transaction, set the <i>ResetUpdateFlags</i>
         argument to <c>false</c>. This will prevent each DataWindow from "forgetting" which rows to update in case one of 
         the updates fails. You can roll back, try to correct the situation, and attempt to update again. Once all of the 
         DataWindows have been updated successfully, commit the changes to finalize the 
         transaction and call <see cref="M:Sybase.DataWindow.DataStore.ResetUpdateStatus"/> to reset the status flags.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataStore.SetTransaction(Sybase.DataWindow.AdoTransaction)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.GetObjectHandle">
            <summary>
            This method is designed for DataWindow .NET internal usage only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.OnDataWindowCreated(Sybase.DataWindow.DataWindowCreatedEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataStore.DataWindowCreated"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.DataWindowCreatedEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnDataWindowCreated</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnDataWindowCreated</b> in a derived class, be sure to call the base class's <b>OnDataWindowCreated</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.OnBeginPrint(Sybase.DataWindow.BeginPrintEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataStore.BeginPrint"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.BeginPrintEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnBeginPrint</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnBeginPrint</b> in a derived class, be sure to call the base class's <b>OnBeginPrint</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.OnEndPrint(Sybase.DataWindow.EndPrintEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataStore.EndPrint"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.EndPrintEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnEndPrint</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnEndPrint</b> in a derived class, be sure to call the base class's <b>OnEndPrint</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.OnPagePrinting(Sybase.DataWindow.PagePrintingEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataStore.PagePrinting"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.PagePrintingEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnPagePrinting</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnPagePrinting</b> in a derived class, be sure to call the base class's <b>OnPagePrinting</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.OnEndRetrieve(Sybase.DataWindow.EndRetrieveEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataStore.EndRetrieve"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.EndRetrieveEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnEndRetrieve</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnEndRetrieve</b> in a derived class, be sure to call the base class's <b>OnEndRetrieve</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.OnItemError(Sybase.DataWindow.ItemErrorEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataStore.ItemError"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.ItemErrorEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnItemError</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnItemError</b> in a derived class, be sure to call the base class's <b>OnItemError</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.OnRowRetrieved(Sybase.DataWindow.RowRetrievedEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataStore.RowRetrieved"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.RowRetrievedEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnRowRetrieved</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnRowRetrieved</b> in a derived class, be sure to call the base class's <b>OnRowRetrieved</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.OnBeginRetrieve(Sybase.DataWindow.BeginRetrieveEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataStore.BeginRetrieve"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.BeginRetrieveEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnBeginRetrieve</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnBeginRetrieve</b> in a derived class, be sure to call the base class's <b>OnBeginRetrieve</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.OnSqlPreview(Sybase.DataWindow.SqlPreviewEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataStore.SqlPreview"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.SqlPreviewEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnSqlPreview</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnSqlPreview</b> in a derived class, be sure to call the base class's <b>OnSqlPreview</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.OnEndUpdate(Sybase.DataWindow.EndUpdateEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataStore.EndUpdate"/> event.
			</summary><param name="e">
				A <see cref="T:Sybase.DataWindow.EndUpdateEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnEndUpdate</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnEndUpdate</b> in a derived class, be sure to call the base class's <b>OnEndUpdate</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.OnBeginUpdate(System.ComponentModel.CancelEventArgs)">
            <summary>
				Raises the <see cref="E:Sybase.DataWindow.IDataStore.BeginUpdate"/> event.
			</summary><param name="e">
				A <see cref="T:System.ComponentModel.CancelEventArgs"/> that contains the event data.
			</param><remarks>
				<para>an event invokes the event handler through a delegate. For more information, see Raising an Event.</para>
				<para>The <b>OnBeginUpdate</b> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</para>
				<para>Notes to Inheritors:  When overriding <b>OnBeginUpdate</b> in a derived class, be sure to call the base class's <b>OnBeginUpdate</b> method so that registered delegates receive the event.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.BeginInit">
            <summary>Begins the initialization of a DataStore that is used within a form or by another component. The initialization occurs at run time. 
      </summary><remarks>
				<para>The Visual Studio .NET design environment uses this method to start the initialization of 
         a component that is used on a form or used by another component. The <see cref="M:Sybase.DataWindow.DataStore.EndInit"/> method ends the 
         initialization. Using these methods prevents the control from being 
         used before it is fully initialized.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataStore.EndInit">
            <summary>Ends the initialization of a DataStore that is used within a form or by another 
         component. The initialization occurs at runtime. 
      </summary><remarks>The Visual Studio .NET design environment uses this method to end the initialization of a 
         component that is used on a form or used by another component. The <see cref="M:Sybase.DataWindow.DataStore.BeginInit"/> method starts the 
         initialization. Using these methods prevents the control from being 
         used before it is fully initialized. 
      </remarks>
        </member>
        <member name="P:Sybase.DataWindow.DataStore.DataWindowObject">
            <summary>Gets or sets the name of the DataWindow object to load for this DataWindowControl or DataStore. 
      </summary><value>The DataWindow object name.</value><exception cref="T:Sybase.DataWindow.DataWindowLoadFailedException">The specified DataWindow object could not be found in <see cref="P:Sybase.DataWindow.DataStore.LibraryList"/>.</exception>
        </member>
        <member name="P:Sybase.DataWindow.DataStore.LibraryList">
            <summary>Gets or sets the list of libraries in which the DataWindowControl or DataStore searches for DataWindow objects. 
      </summary><value>The list of libraries.</value>
            
        </member>
        <member name="P:Sybase.DataWindow.DataStore.DeletedCount">
            <summary>Gets the number of rows that have been marked for deletion in the database. 
      </summary><value>The number of rows currently in the Delete buffer.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataStore.FilteredCount">
            <summary>Gets the number of rows not included in the Primary buffer
         because of the application of a filter criteria. 
      </summary><value>The number of rows currently in the Filter buffer.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataStore.ModifiedCount">
            <summary>Get number of rows that have been modified. 
      </summary><value>The number of modified rows in the DataWindow.</value>
            
        </member>
        <member name="P:Sybase.DataWindow.DataStore.RowCount">
            <summary>Gets the number of rows in the Primary buffer.</summary><value>The number of rows currently in the Primary buffer.</value>
            
        </member>
        <member name="P:Sybase.DataWindow.DataStore.ColumnCount">
            <summary>Returns the number of columns in the DataWindow or DataStore. Computed columns are not included in this value.</summary><value>A short read-only value indicating the number of columns.</value><remarks>This property can also be evaluated using a DataWindow object property.  See the <i>DataWindow Object Reference</i> for more information.	</remarks><example>
		<code>
		short ColCount;
		ColCount = dwEmp.ColumnCount;
		</code>
		</example>
        </member>
        <member name="P:Sybase.DataWindow.DataStore.CurrentRow">
            <summary>Gets the number of the current row in a DataWindow.
      </summary><value>The number of the current row in the DataWindow.</value>
            
        </member>
        <member name="P:Sybase.DataWindow.DataStore.Style">
            <summary>Gets the style of the DataWindow.</summary><value>The style of the DataWindow (e.g., Tabular, Grid, Crosstab).</value><remarks>The Tabular, FreeForm, and Group styles are internally identical; the <b>Style</b> will always be reported as Tabular.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.DataStore.DataSourceType">
            <!-- No matching elements were found for the following include tag --><include file="DataWindowComments.xml" path="doc/members/member[@name=&quot;P:DataSourceType&quot;]/*"/>
        </member>
        <member name="P:Sybase.DataWindow.DataStore.Syntax">
            <summary>
        Returns the syntax that describes the DataWindow object.
       </summary><value>A string that contains the complete syntax for the DataWindow object.</value><remarks>This property can also be evaluated using a DataWindow object property. See the <i>DataWindow Object Reference</i> for more information.	</remarks><example>
		<code>
String dwSyntax;
dwSyntax = dw_1.Syntax;
		</code>
		</example>
        </member>
        <member name="P:Sybase.DataWindow.DataStore.PrintProperties">
            <summary>
        Gets print properties. For a complete list of properties, see the <see cref="T:Sybase.DataWindow.PrintProperties"/> class.
       </summary>
        </member>
        <member name="P:Sybase.DataWindow.DataStore.ContainsNestedReport">
            <summary>
		Whether the DataWindow contains a nested report.
		</summary><value>A boolean value that is true if the DataWindow contains a nested reported and false otherwise.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataStore.TreeViewProperties">
            <summary>
        Gets properties for a TreeView style DataWindow. For a complete list of properties, see the <see cref="T:Sybase.DataWindow.TreeViewProperties"/> class.
       </summary>
        </member>
        <member name="E:Sybase.DataWindow.DataStore.BeginPrint">
            <summary>Occurs when the printing of the DataWindow starts.</summary><remarks><b>BeginPrint</b> is triggered when the <see cref="M:Sybase.DataWindow.DataWindowControl.Print"/> method is invoked.</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.EndPrint"/><seealso cref="E:Sybase.DataWindow.DataWindowControl.PagePrinting"/>
        </member>
        <member name="E:Sybase.DataWindow.DataStore.EndPrint">
            <summary>Occurs when the printing of the DataWindow ends.</summary><seealso cref="E:Sybase.DataWindow.DataWindowControl.BeginPrint"/><seealso cref="E:Sybase.DataWindow.DataWindowControl.PagePrinting"/>
        </member>
        <member name="E:Sybase.DataWindow.DataStore.PagePrinting">
            <summary>Occurs before each page is formatted for printing.</summary><remarks>You can set the <see cref="P:Sybase.DataWindow.PagePrintingEventArgs.Cancel"/> property of the associated
			<see cref="T:Sybase.DataWindow.PagePrintingEventArgs"/> object to skip printing the current page.  To cancel, the remainder of the print job, each page must be cancelled
			individually.</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.BeginPrint"/><seealso cref="E:Sybase.DataWindow.DataWindowControl.EndPrint"/>
        </member>
        <member name="E:Sybase.DataWindow.DataStore.ItemError">
            <summary>Occurs when a modified column does not pass the validation criteria specified for it.</summary><remarks>This event can be triggered as a result of user input into a <see cref="T:Sybase.DataWindow.DataWindowControl"/>
			and as a result of the <see cref="M:Sybase.DataWindow.DataStore.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/>, <see cref="M:Sybase.DataWindow.DataStore.ImportString(System.String,Sybase.DataWindow.FileSaveAsType)"/>, and <see cref="M:Sybase.DataWindow.DataStore.ImportClipboard(Sybase.DataWindow.FileSaveAsType)"/>
			methods.</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/>
        </member>
        <member name="E:Sybase.DataWindow.DataStore.DataWindowCreated">
            <summary>Occurs when a DataWindow object is attached to a DataWindowControl or DataStore.</summary><remarks>This event is triggered whenever the <see cref="P:Sybase.DataWindow.DataStore.DataWindowObject"/> property is modified.</remarks>
        </member>
        <member name="E:Sybase.DataWindow.DataStore.EndRetrieve">
            <summary>Occurs when the retrieval from the database has completed.</summary><seealso cref="E:Sybase.DataWindow.DataWindowControl.BeginRetrieve"/><seealso cref="E:Sybase.DataWindow.DataWindowControl.RowRetrieved"/>
        </member>
        <member name="E:Sybase.DataWindow.DataStore.BeginRetrieve">
            <summary>Occurs when the retrieval from the database is about to begin.</summary><remarks><b>BeginRetrieve</b> is triggered when the <see cref="M:Sybase.DataWindow.DataWindowControl.Retrieve(System.Data.DataTable)"/> method is invoked.</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.EndRetrieve"/><seealso cref="E:Sybase.DataWindow.DataWindowControl.RowRetrieved"/>
        </member>
        <member name="E:Sybase.DataWindow.DataStore.RowRetrieved">
            <summary>Occurs after each row has been retrieved.</summary><remarks>To cancel the retrieval of the remaining rows of a result set, set the <see cref="P:Sybase.DataWindow.RowRetrievedEventArgs.Cancel"/> property of the
			associated <see cref="T:Sybase.DataWindow.RowRetrievedEventArgs"/> object to <c>true</c>.</remarks><seealso cref="E:Sybase.DataWindow.DataStore.BeginRetrieve"/><seealso cref="E:Sybase.DataWindow.DataStore.EndRetrieve"/>
        </member>
        <member name="E:Sybase.DataWindow.DataStore.SqlPreview">
            <summary>Occurs immediately before a SQL statement is submitted to the database.</summary><remarks>The <b>SqlPreview</b> event allows you to intercept all SQL statement issued by a DataStore or DataWindowControl to the database.  Properties of
			the associated <see cref="T:Sybase.DataWindow.SqlPreviewEventArgs"/> object contain the context under which the statement is issued and the text of the SQL itself, allowing
			developers to inspect, change or even cancel the request that is forwarded to the database.</remarks>
        </member>
        <member name="E:Sybase.DataWindow.DataStore.EndUpdate">
            <summary>Occurs when all the updates to the database have completed.</summary><seealso cref="E:Sybase.DataWindow.DataWindowControl.BeginUpdate"/>
        </member>
        <member name="E:Sybase.DataWindow.DataStore.BeginUpdate">
            <summary>Occurs just before changes are sent to the database.</summary><remarks>
				<b>BeginUpdate</b> is triggered when the <see cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/> method is invoked.</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.EndUpdate"/>
        </member>
        <member name="E:Sybase.DataWindow.DataStore.GraphCreated">
            <summary>Occurs after a graph is populated with data, but before it is displayed.</summary><remarks>Add code to this event to modify the graph layout before it is displayed to the user.</remarks>
        </member>
        <member name="E:Sybase.DataWindow.DataStore.TreeViewExpanding">
            <summary> Occurs when a TreeView node is about to expand.</summary><remarks><b>TreeViewExpanding</b> is triggered when one of the Expand methods is called or when the user clicks on the expand icon.</remarks>
        </member>
        <member name="E:Sybase.DataWindow.DataStore.TreeViewCollapsing">
            <summary> Occurs when a TreeView node is about to collapse.</summary><remarks><b>TreeViewCollapsing</b> is triggered when one of the Collapse methods is called or when the user clicks on the collapse icon.</remarks>
        </member>
        <member name="E:Sybase.DataWindow.DataStore.TreeViewNodeSelecting">
            <summary> Occurs when a TreeView node is about to be selected.</summary><remarks>
				<b>TreeViewNodeSelecting</b> is triggered when one of the SelectTreeNode methods is called or when the user selects a TreeView node using mouse.
			</remarks>
        </member>
        <member name="E:Sybase.DataWindow.DataStore.TreeViewExpanded">
            <summary> Occurs when a TreeView node has expanded.</summary><remarks><b>TreeViewExpanded</b> is triggered after one of the Expand methods is called or when the user clicks on the expand icon if the action was not canceled in the <see cref="E:Sybase.DataWindow.DataWindowControl.TreeViewExpanding"></see> event.</remarks>
        </member>
        <member name="E:Sybase.DataWindow.DataStore.TreeViewCollapsed">
            <summary> Occurs when a TreeView node has collapsed.</summary><remarks><b>TreeViewCollapse</b> is triggered after one of the Collapse methods is called or when the user clicks on the collapse icon if the action was not canceled in the <see cref="E:Sybase.DataWindow.DataWindowControl.TreeViewCollapsing"></see> event.</remarks>
        </member>
        <member name="E:Sybase.DataWindow.DataStore.TreeViewNodeSelected">
            <summary> Occurs when a TreeView node is selected.</summary><remarks>
				<b>TreeViewNodeSelected</b> is triggered when one of the SelectTreeNode methods is called or when the user selects a TreeView node using mouse.
			</remarks>
        </member>
        <member name="E:Sybase.DataWindow.DataStore.DbError">
            <summary>
            This event is designed for DataWindow .NET internal usage only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="E:Sybase.DataWindow.DataStore.WSError">
            <summary>
            This event is designed for DataWindow .NET internal usage only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.GraphicObjectColumn">
            <summary>Abstract ancestor class for columns in a DataWindow.</summary><remarks>This class offers access to methods shared by all type of column objects on a DataWindow, be they editable, computed, or blob columns.</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetColumnObjectByNumber(System.Int16)"/>
        </member>
        <member name="T:Sybase.DataWindow.GraphicObject">
            <summary>Ancestor class for controls in a DataWindow object.</summary><remarks>A <b>GraphicObject</b> is only valid for the lifetime of the DataWindow from which it was obtained. If referenced out of scope, properties and methods of a <b>GraphicObject</b> throw a <see cref="T:System.InvalidOperationException"/>.</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetObjectByName(System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.GetColumnObjectByNumber(System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObject.SetBand(Sybase.DataWindow.BandType)">
            <overloads>Moves a control on the DataWindow from one band to another.</overloads><summary>Moves the <see cref="T:Sybase.DataWindow.GraphicObject"/> from one DataWindow band to another.</summary><param name="Type">A value of the <see cref="T:Sybase.DataWindow.BandType"/> specifying the band to which the object is to move.</param><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObject"/> is no longer valid.</exception><remarks>Use the overloaded version of this method if you need to target a specific group's header or trailer band.</remarks>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObject.SetBand(Sybase.DataWindow.BandType,System.Int32)">
            <summary>Moves the <see cref="T:Sybase.DataWindow.GraphicObject"/> from one DataWindow band to a specific group header or trailer band.</summary><param name="Type">A value of the <see cref="T:Sybase.DataWindow.BandType"/> specifying the band to which the object is to move.</param><param name="Level">The group level. If <i>Type</i> is not Header or Trailer, this value is ignored.</param><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObject"/> is no longer valid.</exception>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObject.BringToFront">
            <summary>Places the <see cref="T:Sybase.DataWindow.GraphicObject"/> in front of other objects in the DataWindow.</summary><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObject"/> is no longer valid.</exception><example>The following code in the <see cref="E:System.Windows.Forms.Control.Click"/> event of a <see cref="T:Sybase.DataWindow.DataWindowControl"/> provides a visual cue in the DataWindow 
			header as to how the data is sorted.  <c>t_ascending</c> and <c>t_descending</c> are two <see cref="T:Sybase.DataWindow.GraphicObjectText"/> controls that display an
			up arrow and down arrow (in the Wingdings3 font).  Depending on the sort order, one or the other of the controls is made visible, repositioned, and brought to the front thus overlaying the 
			header of the DataWindow column that was clicked.  This code makes use of two module-level variables, <c>m_sortColumn</c> and <c>m_sortAscending</c>, to retain the current sort criteria. It also
			assumes that <see cref="P:Sybase.DataWindow.GraphicObject.Name"/> consists of the prefix <c>tsort_</c> added to the name property of the <see cref="T:Sybase.DataWindow.GraphicObjectColumn"/> object whose sort
			order the header controls.
			<code lang="Visual Basic">
Dim dwObj As Sybase.DataWindow.GraphicObject
Dim dwHeader As Sybase.DataWindow.GraphicObjectText
Dim columnName As String

dwObj = dw_basic.ObjectUnderMouse.Gob
If Microsoft.VisualBasic.Left(dwObj.Name, 5) = "tsort" Then
    dwHeader = dwObj
    columnName = Microsoft.VisualBasic.Right(dwHeader.Name, _
        Microsoft.VisualBasic.Len(dwHeader.Name) - 6)

    If columnName = m_sortColumn Then
        m_sortAscending = Not m_sortAscending
    Else
        m_sortColumn = columnName
        m_sortAscending = True
    End If

    Dim glyphAsc As Sybase.DataWindow.GraphicObjectText
    Dim glyphDesc As Sybase.DataWindow.GraphicObjectText

    glyphAsc = dw_basic.GetObjectByName("t_ascending")
    glyphDesc = dw_basic.GetObjectByName("t_descending")

    If m_sortAscending Then
        glyphDesc.Visible = False
        glyphAsc.Y = dwHeader.Y
        glyphAsc.X = dwHeader.X + dwHeader.Width - glyphAsc.Width
        glyphAsc.BringToFront()
        glyphAsc.Visible = True
        dw_basic.SetSort(columnName + " A")
    Else
        glyphAsc.Visible = False
        glyphDesc.Y = dwHeader.Y
        glyphDesc.X = dwHeader.X + dwHeader.Width - glyphDesc.Width
        glyphDesc.BringToFront()
        glyphDesc.Visible = True
       dw_basic.SetSort(columnName + " D")
   End If
   dw_basic.Sort()
End If			
			</code>
				<code lang="C#">
GraphicObjectText glyphAsc = dw_basic.GetObjectByName("t_ascending") as GraphicObjectText;
GraphicObjectText glyphDesc = dw_basic.GetObjectByName("t_descending") as GraphicObjectText;
GraphicObjectText glyphToShow, glyphToHide;
GraphicObject dwObj;
GraphicObjectText dwHeader;
String columnName;

dwObj = dw_basic.ObjectUnderMouse.Gob;
if (dwObj.Name.Substring(0,5) == "tsort") {
	dwHeader = dwObj as GraphicObjectText;
	columnName = dwHeader.Name.Substring(6);

	if (columnName == m_sortColumn )
		m_sortAscending = !m_sortAscending;
	else 
	{
		m_sortColumn = columnName;
		m_sortAscending = true;
	}
	glyphToShow = m_sortAscending ? glyphAsc  : glyphDesc;
	glyphToHide = m_sortAscending ? glyphDesc : glyphAsc;

	glyphToHide.Visible = false;
	glyphToShow.Y = dwHeader.Y;
	glyphToShow.X = dwHeader.X + dwHeader.Width - glyphToShow.Width;
	glyphToShow.BringToFront();
	glyphToShow.Visible = true;
	dw_basic.SetSort(columnName + (m_sortAscending ? " A" : " D"));
	dw_basic.Sort();
}
			</code>
			</example><seealso cref="M:Sybase.DataWindow.GraphicObject.SendToBack"/>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObject.SendToBack">
            <summary>Places the <see cref="T:Sybase.DataWindow.GraphicObject"/> behind other objects in the DataWindow.</summary><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObject"/> is no longer valid.</exception><seealso cref="M:Sybase.DataWindow.GraphicObject.BringToFront"/>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObject.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObject.Empty">
            <summary>Gets a value indicating whether the <see cref="T:Sybase.DataWindow.GraphicObject"/> contains information about a DataWindow control.</summary><value>
				<c>false</c> if the <see cref="T:Sybase.DataWindow.GraphicObject"/> contains valid and current information about a DataWindow control; otherwise, <c>true</c>.</value><remarks>Check the <b>Empty</b> property to ensure the validity of the <see cref="T:Sybase.DataWindow.GraphicObject"/> before referring to its other properties and methods.  Failure to do so may result in a <see cref="T:System.InvalidOperationException"/>.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObject.Height">
            <summary>Gets or sets the default height of the object.</summary><value>The default height of the object.</value><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObject"/> is no longer valid.</exception><remarks>If there is a <see cref="P:Sybase.DataWindow.GraphicObject.HeightExpression"/> set, <b>Height</b> may not reflect the actual height of the object.</remarks><example>The following code resizes all column objects in the DataWindow to be the same height (that of the tallest column at design time) and repositions them to the top of the band in which they were placed.
			<code lang="Visual Basic">
Dim objectList() As String
Dim gob As Sybase.DataWindow.GraphicObject
Dim i As Integer
Dim maxHeight As Integer

objectList = dwReport.Describe("DataWindow.objects").Split(New Char() {vbTab})
For i = 0 To objectList.Length - 1
    gob = dwReport.GetObjectByName(objectList(i))
    If TypeOf gob Is Sybase.DataWindow.GraphicObjectSimpleColumn Then
        If gob.Height &gt; maxHeight Then
            maxHeight = gob.Height
        End If
    End If
Next
For i = 0 To objectList.Length - 1
    gob = dwReport.GetObjectByName(objectList(i))
    If TypeOf gob Is Sybase.DataWindow.GraphicObjectSimpleColumn Then
        gob.Height = maxHeight
        gob.Y = 0
    End If
Next
</code>
				<code lang="C#">
String[] objectList;
Sybase.DataWindow.GraphicObject gob;
Int32 maxHeight = 0;

objectList = dwReport.Describe("DataWindow.objects").Split(new char[] {'\t'});
for (int i=0; i &lt; objectList.Length; i++) 
{
	gob = dwReport.GetObjectByName(objectList[i]);
	if (gob is Sybase.DataWindow.GraphicObjectSimpleColumn)
	    if (gob.Height &gt; maxHeight)
	        maxHeight = gob.Height;
}
for (int i=0; i &lt; objectList.Length; i++) 
{
	gob = dwReport.GetObjectByName(objectList[i]);
	if (gob is Sybase.DataWindow.GraphicObjectSimpleColumn) 
	{
		gob.Height = maxHeight;
		gob.Y = 0;
	}
}
</code>
			</example>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObject.Name">
            <summary>Gets the name of the DataWindow control.</summary><value>The name of the DataWindow control.</value><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObject"/> is no longer valid.</exception>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObject.Visible">
            <summary>Gets or sets the default visibility of the object.</summary><value>The default visibility of the object.</value><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObject"/> is no longer valid.</exception><remarks>If there is a <see cref="P:Sybase.DataWindow.GraphicObject.VisibleExpression"/> set, <b>Visible</b> may not reflect the actual visibility of the object.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObject.Width">
            <summary>Gets or sets the default width of the object.</summary><value>The default width of the object.</value><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObject"/> is no longer valid.</exception><remarks>If there is a <see cref="P:Sybase.DataWindow.GraphicObject.WidthExpression"/> set, <b>Width</b> may not reflect the actual width of the object.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObject.X">
            <summary>Gets or sets the default X position of the object.</summary><value>The default X position of the object.</value><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObject"/> is no longer valid.</exception><remarks>If there is a <see cref="P:Sybase.DataWindow.GraphicObject.XExpression"/> set, <b>X</b> may not reflect the actual location of the object.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObject.Y">
            <summary>Gets or sets the default Y position of the object.</summary><value>The default Y position of the object.</value><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObject"/> is no longer valid.</exception><remarks>If there is a <see cref="P:Sybase.DataWindow.GraphicObject.YExpression"/> set, <b>Y</b> may not reflect the actual location of the object.</remarks>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectColumn.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectColumn.Alignment">
            <summary>
            Returns the alignment of the text object.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectColumn.BorderStyle">
            <summary>Gets or sets the border style of the column.</summary><value>The <see cref="T:Sybase.DataWindow.ColumnBorderStyle"/> of the column.</value><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectColumn"/> is no longer valid.</exception><remarks>If there is a <see cref="P:Sybase.DataWindow.GraphicObjectColumn.BorderStyleExpression"/> set, <b>BorderStyle</b> may not reflect the actual column border style.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectColumn.DataType">
            <summary>Gets the DataWindow datatype of the column.</summary><value>The column's data type.</value><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectColumn"/> is no longer valid.</exception>
        </member>
        <member name="T:Sybase.DataWindow.GraphicObjectSimpleColumn">
            <summary>Abstract ancestor for editable and computed columns in a DataWindow.</summary>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectSimpleColumn.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectSimpleColumn.BackgroundColor">
            <summary>Gets or sets the default background color of the column.</summary><value>The default background color of the column.</value><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectSimpleColumn"/> is no longer valid.</exception><remarks>If there is a <see cref="P:Sybase.DataWindow.GraphicObjectSimpleColumn.BackgroundColorExpression"/> set, <b>BackgroundColor</b> may not reflect the actual background color of the column.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectSimpleColumn.Format">
            <summary>Gets or sets the default format mask of the column.</summary><value>The default format mask of the column.</value><exception cref="T:System.ArgumentException">The format string to be assigned was null or an empty. </exception><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectSimpleColumn"/> is no longer valid.</exception><remarks>If there is a <see cref="P:Sybase.DataWindow.GraphicObjectSimpleColumn.FormatExpression"/> set, <b>BackgroundColor</b> may not reflect the actual format of the column.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectSimpleColumn.TextColor">
            <summary>Gets or sets the default text color of the column.</summary><value>The default text color of the column.</value><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectSimpleColumn"/> is no longer valid.</exception><remarks>If there is a <see cref="P:Sybase.DataWindow.GraphicObjectSimpleColumn.TextColorExpression"/> set, <b>TextColor</b> may not reflect the actual color of the column.</remarks>
        </member>
        <member name="T:Sybase.DataWindow.GraphicObjectEditableColumn">
            <summary>An editable column on a DataWindow.</summary>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectEditableColumn.GetCodeTableValue(System.Int32)">
            <summary>Obtains the value of an entry in a value list or code table associated with the <see cref="T:Sybase.DataWindow.GraphicObjectEditableColumn"/>.</summary><returns>A <see cref="T:Sybase.DataWindow.CodeTableValue"/> that contains the requested data and display value pair.</returns><param name="ItemIndex">The index of the entry within the code table for which the display and data value are desired.  The first entry in a code table has an index of 1.</param><exception cref="T:System.IndexOutOfRangeException">
				<i>ItemIndex</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">The DataWindow column does not have a code table, or the DataWindow containing the column is no longer valid.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><seealso cref="M:Sybase.DataWindow.GraphicObjectEditableColumn.ResetCodeTable"/><seealso cref="M:Sybase.DataWindow.GraphicObjectEditableColumn.SetCodeTableValue(System.Int32,Sybase.DataWindow.CodeTableValue)"/>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectEditableColumn.ResetCodeTable">
            <summary>Clears the entries in a value list or code table associated with the <see cref="T:Sybase.DataWindow.GraphicObjectEditableColumn"/>.</summary><exception cref="T:System.InvalidOperationException">The DataWindow column does not have a code table, or the DataWindow containing the column is no longer valid.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><seealso cref="M:Sybase.DataWindow.GraphicObjectEditableColumn.GetCodeTableValue(System.Int32)"/><seealso cref="M:Sybase.DataWindow.GraphicObjectEditableColumn.SetCodeTableValue(System.Int32,Sybase.DataWindow.CodeTableValue)"/>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectEditableColumn.SetCodeTableValue(System.Int32,Sybase.DataWindow.CodeTableValue)">
            <summary>Sets a data and display value in a code table associated with the <see cref="T:Sybase.DataWindow.GraphicObjectEditableColumn"/>.</summary><param name="Index">The index of the entry in the code table for which to set the value.  The first entry in a code table has an index of 1.</param><param name="Value">A <see cref="T:Sybase.DataWindow.CodeTableValue"/> that contains the data and display value pair.</param><exception cref="T:System.IndexOutOfRangeException">
				<i>ItemIndex</i> is less than 1.</exception><exception cref="T:System.InvalidOperationException">The DataWindow column does not have a code table, or the DataWindow containing the column is no longer valid.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>If <i>ItemIndex</i> already contains a data display value pair, it will be overwritten.  If <i>ItemIndex</i> exceeds the size of the code table, the entry will be appended to the last position of the existing table.<note>There is no direct mechanism to determine the size of an existing code table.</note>
			</remarks><example>The following code populates the code table for the DataWindow column called <c>status</c> with name/value pairs contained in a <see cref="T:System.Collections.Hashtable"/> that 
			was populated elsewhere in the application as a lookup table:
			<code lang="Visual Basic">
Dim codeTableColumn As GraphicObjectEditableColumn
Dim statusEnumerator As IDictionaryEnumerator
Dim idx As Integer

codeTableColumn = dwInput.GetObjectByName("status")

' statusTable is a HashTable populated by some other means
statusEnumerator = statusTable.GetEnumerator()
Do While statusEnumerator.MoveNext()
    idx = idx + 1
    codeTableColumn.SetCodeTableValue(idx, _
        New CodeTableValue(statusEnumerator.Value, _
        statusEnumerator.Key))
Loop
			</code>
				<code lang="C#">
GraphicObjectEditableColumn codeTableColumn;
IDictionaryEnumerator statusEnumerator;
int idx = 0;

codeTableColumn = dwInput.GetObjectByName("status") as
	GraphicObjectEditableColumn;

// statusTable is a HashTable populated by some other means
statusEnumerator = statusTable.GetEnumerator();
while (statusEnumerator.MoveNext())
	codeTableColumn.SetCodeTableValue(++idx, 
		new CodeTableValue(statusEnumerator.Value.ToString(), 
		statusEnumerator.Key.ToString())); 
			</code>
			</example><seealso cref="M:Sybase.DataWindow.GraphicObjectEditableColumn.ResetCodeTable"/><seealso cref="M:Sybase.DataWindow.GraphicObjectEditableColumn.GetCodeTableValue(System.Int32)"/>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectEditableColumn.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectEditableColumn.ColumnNumber">
            <summary>Gets the column number.</summary><value>The column number.</value><remarks>
				<para>Column numbering begins at 1.</para>
				<para>The ordering of the columns is determined when the DataWindow object is created and unrelated to their graphical positions.  You can determine the column sequence via the Column Specifications view within the DataWindow painter of DataWindow Designer.</para>
			</remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectEditableColumn.EditStyle">
             <summary>
             Returns an instance of an EditStyle class; the type depends on the EditStyle of the column.
             </summary>
             <remarks>
             EditStyles that can be returned are:
            <list type="bullet">
            <item>CheckBox, a checkbox edit control.</item>
            <item>DDDW, a DropDownDataWindowControl</item>
            <item>DDLB, a DropDownListBox control.</item>
            <item>Editmask, an EditMask control.</item>
            <item>InkEdit, an InkEdit control.</item>
            <item>RadioButton, a RadioButton control.</item>
            <item>SimpleEdit, a text box edit control.</item>
            </list>
            </remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectEditableColumn.InitialValue">
            <summary>
            A string containing the initial value of the column. Special values include:
            Empty - A string of length 0, Null - No value, Spaces - All blanks, Today - Current date, time, or date and time.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectEditableColumn.Protect">
            <summary>
            Whether or not the column is protected; if protected, you cannot tab to the column.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectEditableColumn.TabOrder">
            <summary>Gets or sets the tab order of the editable column.</summary><value>The column's tab order.</value><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectEditableColumn"/> is no longer valid.</exception><remarks>If the tab order is 0, the column cannot gain focus via the keyboard or mouse.</remarks>
        </member>
        <member name="T:Sybase.DataWindow.GraphicObjectComputedColumn">
            <summary>A computed field on a DataWindow.</summary>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectComputedColumn.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectComputedColumn.Expression">
            <summary>Gets or sets the DataWindow expression for the computed column.</summary><value>The column expression.</value><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectComputedColumn"/> is no longer valid.</exception>
        </member>
        <member name="T:Sybase.DataWindow.GraphicObjectBlobColumn">
            <summary>A binary large object column on a DataWindow.</summary><remarks>A <b>GraphicObjectBlobColumn</b> is used to represent OLE-Blob columns added to a DataWindow.  An OLE-Blob column can be used to store data such as documents or pictures and allows that data to be associated with an OLE-Server application like Microsoft Word for in-place or off-site activation.</remarks>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectBlobColumn.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectBlobColumn.ColumnNumber">
            <summary>Gets the column number.</summary><value>The column number.</value><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectBlobColumn"/> is no longer valid.</exception><remarks>
				<para>Column numbering begins at 1.</para>
				<para>The ordering of the columns is determined when the DataWindow object is created and unrelated to their graphical positions.  You can determine the column sequence via the Column Specifications view within the DataWindow painter of DataWindow Designer.</para>
			</remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectBlobColumn.DataType">
            <summary>Gets the DataWindow datatype of the column.</summary><value>The column's data type.</value><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectColumn"/> is no longer valid.</exception>
        </member>
        <member name="T:Sybase.DataWindow.GraphicObjectInkPicture">
            <summary>An InkPicture object on a DataWindow.</summary><remarks>A <b>GraphicObjectInkPicture</b> </remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectInkPicture.AutoErase">
            <summary>
            Specifies whether or not auto erase is turned on.  
            AutoErase is available with styluses that support erasers
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectInkPicture.BackgoundColor">
            <summary>
            The background color displayed
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectInkPicture.CollectionMode">
            <summary>
            Returns or sets the collection mode that determines whether ink, 
            gestures, or both are recognized as the user writes.
            Uses the InkMode enumeration.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectInkPicture.DynamicRendering">
            <summary>
            Specifies whether ink is rendered as it is drawn.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectInkPicture.EditMode">
            <summary>
            Specifies whether the object/control is in ink mode, deletion mode, or selecting/editing mode.
            Uses the InkEditMode enumeration.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectInkPicture.EraserMode">
            <summary>
            Specifies whether ink is erased by stroke or point.
            Uses the InkEraserMode enumeration.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectInkPicture.EraserWidth">
            <summary>
            Specifies the width of the eraser pen tip in pixels.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectInkPicture.HighContrastInk">
            <summary>
            Specifies whether ink is rendered as just one color when the system is in High Contrast mode.  
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectInkPicture.InkEnabled">
            <summary>
            Specifies whether the InkPicture control collects pen input. 
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectInkPicture.MarginX">
            <summary>
            Returns or sets the x-axis margin in pixels around the control
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectInkPicture.MarginY">
            <summary>
            Returns or sets the y-axis margin in pixels around the control
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectInkPicture.SizeMode">
            <summary>
            Determines how the picture is displayed in the control.
            Uses the InkPictureSizeMode enumeration.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.EditStyleBase">
            <summary>
            Base class for the column edit styles.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.RadioButton">
            <summary>
            Defines properties for the RadioButton edit style.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.RadioButton.Columns">
            <summary>
            An number constant specifying the number of columns of radio buttons
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.RadioButton.ThreeD">
            <summary>
            Whether the RadioButton should have a three-dimensional appearance.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.RadioButton.LeftText">
            <summary>
            Whether the RadioButton label is to the left or right of the RadioButton. If true the text
            is displayed to the left, if false the text is displayed to the right.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.RadioButton.Scale">
            <summary>
            Whether you want to scale a two-dimensional RadioButton. 
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.CheckBox">
            <summary>
            Defines properties for the CheckBox edit style.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.CheckBox.ThreeD">
            <summary>
            Whether the CheckBox should have a three-dimensional appearance.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.CheckBox.LeftText">
            <summary>
            Whether the CheckBox label is to the left or right of the CheckBox. If true the text
            is displayed to the left, if false the text is displayed to the right.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.CheckBox.OffValue">
            <summary>
            A string specifying the column value when the CheckBox is off (unchecked). 
            The resulting value must be the same data type as the column.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.CheckBox.OnValue">
            <summary>
            A string specifying the column value when the CheckBox is on (checked). 
            The resulting value must be the same data type as the column.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.CheckBox.OtherValue">
            <summary>
            A string specifying the column value when the CheckBox is other (neither checked nor unchecked). 
            The resulting value must be the same data type as the column.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.CheckBox.Scale">
            <summary>
            Whether you want to scale a two dimensional CheckBox. 
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.CheckBox.Text">
            <summary>
            A string specifying the CheckBox's label text.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.ScrollableEdit.AutoHorizontalScroll">
            <summary>
            Whether the edit control scrolls horizontally 
            automatically when data is entered or deleted. 
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.ScrollableEdit.AutoVerticalScroll">
            <summary>
            Whether the edit control scrolls vertically 
            automatically when data is entered or deleted. 
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.ScrollableEdit.CharacterCasing">
            <summary>
            The case of the text in the edit control. Uses the CharacterCasing enumeration
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.ScrollableEdit.ScrollBars">
            <summary>
            Gets or sets the scroll properties for a GraphicObjectColumn using the DataWindowScrollBars enumeration.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.ScrollableEdit.NillIsNull">
            <summary>
            Whether to set the data value of the edit control to NULL 
            when the user leaves the edit box blank.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.ScrollableEdit.Required">
            <summary>
            Whether the column is required. 
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.SimpleEdit">
            <summary>
            Defines properties for a simple text box edit control.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.SimpleEdit.AutoSelect">
            <summary>
            Whether to select the contents of the edit control automatically when it receives focus.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.SimpleEdit.DisplayOnly">
            <summary>
            Whether the column is display only.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.SimpleEdit.FocusRectangle">
            <summary>
            Whether a dotted rectangle (the focus rectangle) will 
            surround the current row of the column when the column has focus.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.SimpleEdit.TextLimit">
            <summary>
            A number specifying the maximum number of characters (0 to 32,767) that the user can enter. 
            0 means unlimited.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.SimpleEdit.PassWord">
            <summary>
            Whether to assign secure display mode to the column. 
            When the user enters characters, they display as asterisks (*). 
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.SpinProperties">
            <summary>
            Defines spin properties for an EditMask.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.SpinProperties.Increment">
            <summary>
            An integer indicating the amount to increment the spin control's values. 
            The default for numeric values is 1; for dates, 1 year; and for time, 1 minute.
            If the EditMask control is not a Spin control this value will be 0.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.SpinProperties.Minimum">
            <summary>
            The minimum value of the spin control as a string.
            The string must be convertable to the data type of the spin control.
            If the EditMask control is not a Spin control this value will be an empty string.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.SpinProperties.Maximum">
            <summary>
            The maximum value of the spin control as a string.
            The string must be convertable to the data type of the spin control.
            If the EditMask control is not a Spin control this value will be an empty string.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.EditMask">
            <summary>
            Defines properties for the EditMask edit style.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.EditMask.AutoSkip">
            <summary>
            Whether the EditMask will automatically skip to the next field 
            when the maximum number of characters have been entered.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.EditMask.Mask">
            <summary>
            A string specifying the edit mask for the column.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.EditMask.ReadOnly">
            <summary>
            Whether the column is read only.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.EditMask.Spin">
            <summary>
            Gets or sets the EditMask's spin properties using the SpinProperties class.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.EditMask.UseFormat">
            <summary>
            Whether the column should use the format display mask when it does not have focus.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.DDLB">
            <summary>
            Defines properties for the DropDownListBox edit style.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.DDLB.AllowEdit">
            <summary>
            Whether or not the user can type a value as well as choose from the DropDownListBox's list.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.DDLB.TextLimit">
            <summary>
            The maximum number of characters that can be entered in the DropDownListBox. 0 is unlimited.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.DDLB.PercentWidth">
            <summary>
            The width of the drop-down portion of the DropDownListBox 
            as a percentage of the column's width
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.DDLB.ShowList">
            <summary>
            Whether the ListBox portion of the DropDownListBox displays when the column has focus.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.DDLB.ShowRightArrow">
            <summary>
            Whether a down arrow displays at the right end of the DropDownListBox.
            Note that if ShowList is set to Yes, the column ignores the ShowRightArrow property and the arrow never displays.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.DDLB.Sorted">
            <summary>
            Whether or not the data in the DropDownListBox is sorted.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.DDDW">
            <summary>
            Defines properties for the DropDownDataWindow edit style.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.DDDW.AutoRetrieve">
            <summary>           
             Whether the DropDownDataWindow data is retrieved when the 
             parent DataWindow data is retrieved.
             </summary>
        </member>
        <member name="P:Sybase.DataWindow.DDDW.DataColumn">
            <summary>
            The name of the data column in the associated DropDownDataWindow. 
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.DDDW.DisplayColumn">
            <summary>
            The name of the display column in the DropDownDataWindow.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.DDDW.Lines">
            <summary>
            The number of lines (values) to display in the DropDownListBox. 0 is unlimited.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.DDDW.Sorted">
            <summary>
            The data in a DropDownDataWindow is not sorted unless it is sorted by the underlying
            DataWindow.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.Ink.AntiAliased">
            <summary>
            Specifies whether the foreground and background colors along the edge of the ink are blended to 
            increase the smoothness of an ink stroke.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.Ink.Color">
            <summary>
            Sets or gets the current ink color.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.Ink.FitToCurve">
            <summary>
            
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.Ink.Height">
            <summary>
            The height of the Ink control
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.Ink.IgnorePressure">
            <summary>
            Specifies whether drawn ink automatically 
            becomes wider with increased pressure of the pen tip on the tablet surface.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.Ink.PenTip">
            <summary>
            Specifies the pen tip using the InkPenTip enumeration
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.Ink.Transparency">
            <summary>
            Specifies the transparency value of drawn ink. 
            Values range from zero (totally opaque) to 255 (totally transparent).
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.Ink.Width">
            <summary>
            Specifies the width of the Ink control.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.DTEHelper">
            <summary>
            Summary description for DTEHelper.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.Blob">
            <summary>Represents a binary large object. </summary><remarks>This abstract ancestor class is the common parent of DataStore classes used in .NET remoting applications. 
         </remarks><seealso cref="T:Sybase.DataWindow.DataWindowChanges"/><seealso cref="T:Sybase.DataWindow.DataWindowFullState"/>
            
        </member>
        <member name="M:Sybase.DataWindow.Blob.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Populates a structure necessary for serialization.</summary><remarks>This method is implemented as part of the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface. You do not need
		to provide an implementation here in your DataWindow .NET applications.</remarks>
        </member>
        <member name="T:Sybase.DataWindow.DataWindowChanges">
            <summary>Represents the changes made in the DataWindow.
         </summary><remarks>
				<b>DataWindowChanges</b> supports the ISerializable interface for use in .NET remoting applications. 
         </remarks><seealso cref="M:Sybase.DataWindow.IDataStore.GetChanges"/><seealso cref="M:Sybase.DataWindow.IDataStore.SetChanges(Sybase.DataWindow.DataWindowChanges)"/>
            
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChanges.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Populates a structure necessary for serialization.</summary><remarks>This method is implemented as part of the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface. You do not need
		to provide an implementation here in your DataWindow .NET applications.</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChanges.ToByteArray">
            <summary>
            Gets the byte array representation of the DataWindowChanges object.
            </summary>
            <returns>The byte array that represents the DataWindowChanges object.</returns>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChanges.FromByteArray(System.Byte[])">
            <summary>
            Creates a DataWindowChanges object from the specified byte data array.
            </summary>
            <param name="arrayData">A byte array that contains the data for this DataWindowChanges object.</param>
            <returns>The DataWindowChanges object this method creates.</returns>
        </member>
        <member name="T:Sybase.DataWindow.DataWindowFullState">
            <summary>Represents the complete data and state of the DataWindow.</summary><remarks>
				<b>DataWindowFullState</b> supports the ISerializable interface for use in .NET remoting applications.
      </remarks><seealso cref="M:Sybase.DataWindow.IDataStore.GetFullState"/><seealso cref="M:Sybase.DataWindow.IDataStore.SetFullState(Sybase.DataWindow.DataWindowFullState)"/>
            
        </member>
        <member name="M:Sybase.DataWindow.DataWindowFullState.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Populates a structure necessary for serialization.</summary><remarks>This method is implemented as part of the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface. You do not need
		to provide an implementation here in your DataWindow .NET applications.</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowFullState.ToByteArray">
            <summary>
            Gets the byte array representation of the DataWindowFullState object.
            </summary>
            <returns>The byte array that represents the DataWindowFullState object.</returns>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowFullState.FromByteArray(System.Byte[])">
            <summary>
            Creates a DataWindowFullState object from the specified byte data array.
            </summary>
            <param name="arrayData">A byte array that contains the data for this DataWindowFullState object.</param>
            <returns>The DataWindowFullState object this method creates.</returns>
        </member>
        <member name="T:Sybase.DataWindow.Shared">
            <summary>
            Summary description for Shared.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.EditControl">
            <summary>
    The implementation class for the CurrentEdit property of a DataWindowControl. 
     This object is only valid during the lifetime of the DataWindowControl from which it was derived.
   </summary>
        </member>
        <member name="M:Sybase.DataWindow.EditControl.SelectText(System.Int16,System.Int16)">
            <summary>Selects text within the control. 
      </summary><returns>The number of characters selected.</returns><param name="Begin">The first character in the control to be selected.</param><param name="End">The last character in the control to be selected.</param><remarks>A value of -1 for <i>End</i> will select the remaining text of the control beginning with <i>Begin</i>.
      </remarks>
        </member>
        <member name="M:Sybase.DataWindow.EditControl.Clear">
            <summary>Clears the selection from the EditControl without placing the text on the clipboard. 
      </summary><returns>The number of characters cleared from the control.</returns><seealso cref="M:Sybase.DataWindow.EditControl.Copy"/>
        </member>
        <member name="M:Sybase.DataWindow.EditControl.Copy">
            <summary>Copies the selected text of the control into the clipboard. 
      </summary><returns>The number of characters copied from the control.</returns><seealso cref="M:Sybase.DataWindow.EditControl.Paste"/>
        </member>
        <member name="M:Sybase.DataWindow.EditControl.Cut">
            <summary>Removes the selected text of the control and places a copy of it in the clipboard. 
      </summary><returns>The number of characters removed from the control.</returns><seealso cref="M:Sybase.DataWindow.EditControl.Clear"/>
        </member>
        <member name="M:Sybase.DataWindow.EditControl.Paste">
            <summary>Copies the text from the clipboard to the control. 
      </summary><returns>The number of characters pasted into the control.</returns><remarks>If text is selected in the control, it is replaced by the text currently in the clipboard.
      </remarks><seealso cref="M:Sybase.DataWindow.EditControl.Copy"/><seealso cref="M:Sybase.DataWindow.EditControl.Replace"/>
        </member>
        <member name="M:Sybase.DataWindow.EditControl.Replace(System.String)">
            <summary>Replaces the current selection in the control with the provided text. 
      </summary><returns>The number of characters pasted into the control.</returns><param name="ReplacementString">The string to be used to replace the current selection.</param><remarks>If no text is selected in the control, the string is inserted at the current cursor position.
      </remarks><seealso cref="M:Sybase.DataWindow.EditControl.Paste"/>
        </member>
        <member name="M:Sybase.DataWindow.EditControl.Scroll(System.Int32)">
            <summary>Scrolls the control the specified number of lines . 
      </summary><returns>The number of first line displayed in the control after the scrolling has completed.</returns><param name="Lines">The number of lines to scroll the control.</param><seealso cref="M:Sybase.DataWindow.EditControl.Paste"/>
        </member>
        <member name="M:Sybase.DataWindow.EditControl.Undo">
            <summary>
				Cancels the last edit in the control, restoring the text to the content before the last change.
			</summary><remarks>
				To determine whether the last action can be canceled, check the <see cref="P:Sybase.DataWindow.EditControl.CanUndo"/> property.
			</remarks>
        </member>
        <member name="P:Sybase.DataWindow.EditControl.Empty">
            <summary>
       Gets a value indicating whether the current instance is valid for properties and methods.
   </summary>
        </member>
        <member name="P:Sybase.DataWindow.EditControl.TextLength">
            <summary>
       Gets the length of the text in the EditControl.
    </summary>
        </member>
        <member name="P:Sybase.DataWindow.EditControl.Text">
            <summary>
        Gets the raw text in the control. 
    </summary><remarks>Use the <b>GetText</b> method if you wish to obtain the 
        contents reflecting the applicable edit styles or while the DataWindow is in query mode. 
    </remarks>
        </member>
        <member name="P:Sybase.DataWindow.EditControl.SelectedLength">
            <summary>
       Gets the length of the selected text in the control or 0 if no text is selected.    </summary>
        </member>
        <member name="P:Sybase.DataWindow.EditControl.SelectedText">
            <summary>
       Gets the selected text in the control or empty string ("") if no text is selected.    </summary>
        </member>
        <member name="P:Sybase.DataWindow.EditControl.LineCount">
            <summary>
       Gets the number of lines in the EditControl.    </summary>
        </member>
        <member name="P:Sybase.DataWindow.EditControl.Position">
            <summary>
       Gets the input position of the EditControl.    </summary>
        </member>
        <member name="P:Sybase.DataWindow.EditControl.LineNumber">
            <summary>
       Gets the line number on which the insertion point is positioned.    </summary>
        </member>
        <member name="P:Sybase.DataWindow.EditControl.SelectedStart">
            <summary>
        Gets the position of the first character of selected text.  If no text is selected, this value is the same as the Position property.
	</summary>
        </member>
        <member name="P:Sybase.DataWindow.EditControl.TextAtLineNumber">
            <summary>
        Gets the contents of the line that contains the insertion point.
	</summary>
        </member>
        <member name="P:Sybase.DataWindow.EditControl.CanUndo">
            <summary>
			Gets a value indicating whether the user can undo the previous operation in the EditControl.
		</summary>
        </member>
        <member name="T:Sybase.DataWindow.DataWindowKeyDownEventHandler">
            <summary>Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.DataWindowKeyDown"/> event of a <see cref="T:Sybase.DataWindow.DataWindowControl"/>.</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param><remarks>
				<para>The declaration of your event handler must have the same parameters as the <b>DataWindowKeyDownEventHandler</b> delegate declaration.</para>
				<para>When you create a <b>DataWindowKeyDownEventHandler</b> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event.
			The event handler is called whenever the event occurs, unless you remove the delegate.
			For more information about handling events with delegates, see <see href="ms-help://MS.NETFrameworkSDKv1.1/cpguidenf/html/cpconeventsdelegates.htm">Events and Delegates</see>.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.DataWindowKeyDown"/><seealso cref="T:System.Windows.Forms.KeyEventArgs"/>
        </member>
        <member name="T:Sybase.DataWindow.BeginPrintEventHandler">
            <summary>Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.BeginPrint"/> event of a <see cref="T:Sybase.DataWindow.DataStore"/> or <see cref="T:Sybase.DataWindow.DataWindowControl"/>.</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="T:Sybase.DataWindow.BeginPrintEventArgs"/> that contains the event data.</param><remarks>
				<para>The declaration of your event handler must have the same parameters as the <b>BeginPrintEventHandler</b> delegate declaration.</para>
				<para>When you create a <b>BeginPrintEventHandler</b> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event.
			The event handler is called whenever the event occurs, unless you remove the delegate.
			For more information about handling events with delegates, see <see href="ms-help://MS.NETFrameworkSDKv1.1/cpguidenf/html/cpconeventsdelegates.htm">Events and Delegates</see>.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.BeginPrint"/><seealso cref="T:Sybase.DataWindow.BeginPrintEventArgs"/>
        </member>
        <member name="T:Sybase.DataWindow.PagePrintingEventHandler">
            <summary>Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.PagePrinting"/> event of a <see cref="T:Sybase.DataWindow.DataStore"/> or <see cref="T:Sybase.DataWindow.DataWindowControl"/>.</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="T:Sybase.DataWindow.PagePrintingEventArgs"/> that contains the event data.</param><remarks>
				<para>The declaration of your event handler must have the same parameters as the <b>PagePrintingEventHandler</b> delegate declaration.</para>
				<para>When you create a <b>PagePrintingEventHandler</b> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event.
			The event handler is called whenever the event occurs, unless you remove the delegate.
			For more information about handling events with delegates, see <see href="ms-help://MS.NETFrameworkSDKv1.1/cpguidenf/html/cpconeventsdelegates.htm">Events and Delegates</see>.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.PagePrinting"/><seealso cref="T:Sybase.DataWindow.PagePrintingEventArgs"/>
        </member>
        <member name="T:Sybase.DataWindow.EndPrintEventHandler">
            <summary>Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.EndPrint"/> event of a <see cref="T:Sybase.DataWindow.DataStore"/> or <see cref="T:Sybase.DataWindow.DataWindowControl"/>.</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="T:Sybase.DataWindow.EndPrintEventArgs"/> that contains the event data.</param><remarks>
				<para>The declaration of your event handler must have the same parameters as the <b>EndPrintEventHandler</b> delegate declaration.</para>
				<para>When you create a <b>EndPrintEventHandler</b> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event.
			The event handler is called whenever the event occurs, unless you remove the delegate.
			For more information about handling events with delegates, see <see href="ms-help://MS.NETFrameworkSDKv1.1/cpguidenf/html/cpconeventsdelegates.htm">Events and Delegates</see>.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.EndPrint"/><seealso cref="T:Sybase.DataWindow.EndPrintEventArgs"/>
        </member>
        <member name="T:Sybase.DataWindow.PrintEventArgs">
            <summary>Abstract ancestor class for arguments to various print events.</summary>
        </member>
        <member name="T:Sybase.DataWindow.BeginPrintEventArgs">
            <summary>Provides data for the <see cref="E:Sybase.DataWindow.DataWindowControl.BeginPrint"/> event.</summary>
        </member>
        <member name="M:Sybase.DataWindow.BeginPrintEventArgs.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <b>BeginPrintEventArgs</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.BeginPrintEventArgs.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.BeginPrintEventArgs.TotalPages">
            <summary>Gets the number of pages that will be printed.</summary><value>The number of pages that will be printed.</value>
        </member>
        <member name="T:Sybase.DataWindow.PagePrintingEventArgs">
            <summary>Provides data for the <see cref="E:Sybase.DataWindow.DataWindowControl.PagePrinting"/> event.</summary>
        </member>
        <member name="M:Sybase.DataWindow.PagePrintingEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <b>PagePrintingEventArgs</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.PagePrintingEventArgs.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.PagePrintingEventArgs.PageNumber">
            <summary>Gets the page number about to be printed.</summary><value>The page number about to be printed.</value>
        </member>
        <member name="P:Sybase.DataWindow.PagePrintingEventArgs.CopyNumber">
            <summary>Gets the number of the copy for which the page is being printed.</summary><value>The number of the copy for which the page is being printed.</value>
        </member>
        <member name="P:Sybase.DataWindow.PagePrintingEventArgs.Cancel">
            <summary>Gets or sets the cancellation status.</summary><value>The cancellation status.</value><remarks>Setting <b>Cancel</b> to <c>true</c> skips printing the page identified by <see cref="P:Sybase.DataWindow.PagePrintingEventArgs.PageNumber"/>
			and <see cref="P:Sybase.DataWindow.PagePrintingEventArgs.CopyNumber"/>; however, the remainder of the print job continues.</remarks>
        </member>
        <member name="T:Sybase.DataWindow.EndPrintEventArgs">
            <summary>Provides data for the <see cref="E:Sybase.DataWindow.DataWindowControl.EndPrint"/> event.</summary>
        </member>
        <member name="M:Sybase.DataWindow.EndPrintEventArgs.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <b>EndPrintEventArgs</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.EndPrintEventArgs.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.EndPrintEventArgs.PagesPrinted">
            <summary>Gets the number of pages that were printed.</summary><value>The number of pages that were printed.</value>
        </member>
        <member name="T:Sybase.DataWindow.DataWindowCreatedEventHandler">
            <summary>Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.DataWindowCreated"/> event of a <see cref="T:Sybase.DataWindow.DataStore"/> or <see cref="T:Sybase.DataWindow.DataWindowControl"/>.</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="T:Sybase.DataWindow.DataWindowCreatedEventArgs"/> that contains the event data.</param><remarks>
				<para>The declaration of your event handler must have the same parameters as the <b>DataWindowCreatedEventHandler</b> delegate declaration.</para>
				<para>When you create a <b>DataWindowCreatedEventHandler</b> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event.
			The event handler is called whenever the event occurs, unless you remove the delegate.
			For more information about handling events with delegates, see <see href="ms-help://MS.NETFrameworkSDKv1.1/cpguidenf/html/cpconeventsdelegates.htm">Events and Delegates</see>.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.DataWindowCreated"/><seealso cref="T:Sybase.DataWindow.DataWindowCreatedEventArgs"/>
        </member>
        <member name="T:Sybase.DataWindow.DataWindowCreatedEventArgs">
            <summary>Provides data for the <see cref="E:Sybase.DataWindow.DataWindowControl.DataWindowCreated"/> event.</summary>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowCreatedEventArgs.#ctor(System.String)">
            <summary>Initializes a new instance of the <b>DataWindowCreatedEventArgs</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowCreatedEventArgs.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowCreatedEventArgs.DataWindowObject">
            <summary>Gets the name of the DataWindow object associated with the DataWindow.</summary><value>The name of the DataWindow object associated with the DataWindow.</value>
        </member>
        <member name="T:Sybase.DataWindow.DbErrorEventHandler">
            <summary>
            This delegate is designed for DataWindow .NET internal usage only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.DbErrorEventArgs">
            <summary>
            This class is designed for DataWindow .NET internal usage only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.EditChangedEventHandler">
            <summary>Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.EditChanged"/> event of a <see cref="T:Sybase.DataWindow.DataWindowControl"/>.</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="T:Sybase.DataWindow.EditChangedEventArgs"/> that contains the event data.</param><remarks>
				<para>The declaration of your event handler must have the same parameters as the <b>EditChangedEventHandler</b> delegate declaration.</para>
				<para>When you create a <b>EditChangedEventHandler</b> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event.
			The event handler is called whenever the event occurs, unless you remove the delegate.
			For more information about handling events with delegates, see <see href="ms-help://MS.NETFrameworkSDKv1.1/cpguidenf/html/cpconeventsdelegates.htm">Events and Delegates</see>.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.EditChanged"/><seealso cref="T:Sybase.DataWindow.EditChangedEventArgs"/>
        </member>
        <member name="T:Sybase.DataWindow.EditChangedEventArgs">
            <summary>Provides data for the <see cref="E:Sybase.DataWindow.DataWindowControl.EditChanged"/> event.</summary>
        </member>
        <member name="M:Sybase.DataWindow.EditChangedEventArgs.#ctor(System.Int32,System.String,System.String,System.Int16)">
            <summary>Initializes a new instance of the <b>EditChangedEventArgs</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.EditChangedEventArgs.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.EditChangedEventArgs.RowNumber">
            <summary>Gets the row number in which the user has typed.</summary><value>The row number in which the user typed.</value>
        </member>
        <member name="P:Sybase.DataWindow.EditChangedEventArgs.ColumnName">
            <summary>Gets the name of the column which the user has typed.</summary><value>The name of the column in which the user typed.</value>
        </member>
        <member name="P:Sybase.DataWindow.EditChangedEventArgs.Data">
            <summary>Gets the data currently in the edit control.</summary><value>The data (in string format) currently in the edit control.</value>
        </member>
        <member name="P:Sybase.DataWindow.EditChangedEventArgs.ColumnNumber">
            <summary>Gets the number of the column which the user has typed.</summary><value>The number of the column in which the user typed.</value>
        </member>
        <member name="T:Sybase.DataWindow.ItemChangedEventHandler">
            <summary>Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> event of a <see cref="T:Sybase.DataWindow.DataWindowControl"/>.</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="T:Sybase.DataWindow.ItemChangedEventArgs"/> that contains the event data.</param><remarks>
				<para>The declaration of your event handler must have the same parameters as the <b>ItemChangedEventHandler</b> delegate declaration.</para>
				<para>When you create a <b>ItemChangedEventHandler</b> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event.
			The event handler is called whenever the event occurs, unless you remove the delegate.
			For more information about handling events with delegates, see <see href="ms-help://MS.NETFrameworkSDKv1.1/cpguidenf/html/cpconeventsdelegates.htm">Events and Delegates</see>.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/><seealso cref="T:Sybase.DataWindow.ItemChangedEventArgs"/>
        </member>
        <member name="T:Sybase.DataWindow.ItemFocusChangedEventHandler">
            <summary>Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemFocusChanged"/> event of a  <see cref="T:Sybase.DataWindow.DataWindowControl"/>.</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="T:Sybase.DataWindow.ItemFocusChangedEventArgs"/> that contains the event data.</param><remarks>
				<para>The declaration of your event handler must have the same parameters as the <b>ItemFocusChangedEventHandler</b> delegate declaration.</para>
				<para>When you create a <b>ItemFocusChangedEventHandler</b> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event.
			The event handler is called whenever the event occurs, unless you remove the delegate.
			For more information about handling events with delegates, see <see href="ms-help://MS.NETFrameworkSDKv1.1/cpguidenf/html/cpconeventsdelegates.htm">Events and Delegates</see>.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.ItemFocusChanged"/><seealso cref="T:Sybase.DataWindow.ItemFocusChangedEventArgs"/>
        </member>
        <member name="T:Sybase.DataWindow.ItemErrorEventHandler">
            <summary>Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> event of a <see cref="T:Sybase.DataWindow.DataStore"/> or  <see cref="T:Sybase.DataWindow.DataWindowControl"/>.</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="T:Sybase.DataWindow.ItemErrorEventArgs"/> that contains the event data.</param><remarks>
				<para>The declaration of your event handler must have the same parameters as the <b>ItemErrorEventHandler</b> delegate declaration.</para>
				<para>When you create a <b>ItemErrorEventHandler</b> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event.
			The event handler is called whenever the event occurs, unless you remove the delegate.
			For more information about handling events with delegates, see <see href="ms-help://MS.NETFrameworkSDKv1.1/cpguidenf/html/cpconeventsdelegates.htm">Events and Delegates</see>.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/><seealso cref="T:Sybase.DataWindow.ItemErrorEventArgs"/>
        </member>
        <member name="T:Sybase.DataWindow.ItemEventArgs">
            <summary>Abstract ancestor class for arguments to various item related events.</summary>
        </member>
        <member name="M:Sybase.DataWindow.ItemEventArgs.#ctor(System.Int32,System.String,System.Int16)">
            <summary>Initializes a new instance of the <b>ItemEventArgs</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.ItemEventArgs.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.ItemEventArgs.RowNumber">
            <summary>Gets the row number of the DataWindow to which the event applies.</summary><value>The DataWindow row number.</value>
        </member>
        <member name="P:Sybase.DataWindow.ItemEventArgs.ColumnName">
            <summary>Gets the name of the DataWindow column to which the event applies.</summary><value>The DataWindow column name.</value>
        </member>
        <member name="P:Sybase.DataWindow.ItemEventArgs.ColumnNumber">
            <summary>Gets the number of the DataWindow column to which the event applies.</summary><value>The DataWindow column number.</value>
        </member>
        <member name="T:Sybase.DataWindow.ItemFocusChangedEventArgs">
            <summary>Provides data for the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemFocusChanged"/> event.</summary>
        </member>
        <member name="M:Sybase.DataWindow.ItemFocusChangedEventArgs.#ctor(System.Int32,System.String,System.Int16)">
            <summary>Initializes a new instance of the <b>ItemFocusChangedEventArgs</b> class.</summary>
        </member>
        <member name="T:Sybase.DataWindow.ItemChangedEventArgs">
            <summary>Provides data for the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> event.</summary>
        </member>
        <member name="M:Sybase.DataWindow.ItemChangedEventArgs.#ctor(System.Int32,System.String,System.String,System.Int16)">
            <summary>Initializes a new instance of the <b>ItemChangedEventArgs</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.ItemChangedEventArgs.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.ItemChangedEventArgs.Data">
            <summary>Gets the contents of the edit control.</summary><value>The contents of the edit control.</value>
        </member>
        <member name="P:Sybase.DataWindow.ItemChangedEventArgs.Action">
            <summary>Gets or set a value indicating what action should be applied when the event is triggered.</summary><value>The action applied when the event is triggered.</value><remarks><para>Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> event, you can examing the <see cref="P:Sybase.DataWindow.ItemChangedEventArgs.Data"/>
			property to determine whether of not the value should be accepted or rejected and return the appropriate value of the <see cref="T:Sybase.DataWindow.ItemChangedAction"/>.</para>
			<para>If the value is rejected, the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> event is automatically triggered.</para></remarks>
        </member>
        <member name="T:Sybase.DataWindow.ItemErrorEventArgs">
            <summary>Provides data for the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> event.</summary>
        </member>
        <member name="M:Sybase.DataWindow.ItemErrorEventArgs.#ctor(System.Int32,System.String,System.String,System.Int16)">
            <summary>Initializes a new instance of the <b>ItemErrorEventArgs</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.ItemErrorEventArgs.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.ItemErrorEventArgs.Data">
            <summary>Gets the data value that has failed validation.</summary><value>The data value.</value>
        </member>
        <member name="P:Sybase.DataWindow.ItemErrorEventArgs.Action">
            <summary>Gets or set a value indicating what action should be applied when the event is triggered.</summary><value>The action applied when the event is triggered.</value><remarks><para>Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> event, you can examing the <see cref="P:Sybase.DataWindow.ItemErrorEventArgs.Data"/>
			property to determine whether of not the value should be accepted or rejected and return the appropriate value of the <see cref="T:Sybase.DataWindow.ItemErrorAction"/>.</para>
			<para>If the value is rejected, you can choose whether or not to allow the focus in the DataWindowControl to change as well as whether an automatically generated
			valdation message is displayed.</para></remarks>
        </member>
        <member name="T:Sybase.DataWindow.BeginRetrieveEventHandler">
            <summary>Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.BeginRetrieve"/> event of a <see cref="T:Sybase.DataWindow.DataStore"/> or <see cref="T:Sybase.DataWindow.DataWindowControl"/>.</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="T:Sybase.DataWindow.BeginRetrieveEventArgs"/> that contains the event data.</param><remarks>
				<para>The declaration of your event handler must have the same parameters as the <b>BeginRetrieveEventHandler</b> delegate declaration.</para>
				<para>When you create a <b>BeginRetrieveEventHandler</b> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event.
			The event handler is called whenever the event occurs, unless you remove the delegate.
			For more information about handling events with delegates, see <see href="ms-help://MS.NETFrameworkSDKv1.1/cpguidenf/html/cpconeventsdelegates.htm">Events and Delegates</see>.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.BeginRetrieve"/><seealso cref="T:Sybase.DataWindow.BeginRetrieveEventArgs"/>
        </member>
        <member name="T:Sybase.DataWindow.RowRetrievedEventHandler">
            <summary>Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.RowRetrieved"/> event of a <see cref="T:Sybase.DataWindow.DataStore"/> or <see cref="T:Sybase.DataWindow.DataWindowControl"/>.</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="T:Sybase.DataWindow.RowRetrievedEventArgs"/> that contains the event data.</param><remarks>
				<para>The declaration of your event handler must have the same parameters as the <b>RowRetrievedEventHandler</b> delegate declaration.</para>
				<para>When you create a <b>RowRetrievedEventHandler</b> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event.
			The event handler is called whenever the event occurs, unless you remove the delegate.
			For more information about handling events with delegates, see <see href="ms-help://MS.NETFrameworkSDKv1.1/cpguidenf/html/cpconeventsdelegates.htm">Events and Delegates</see>.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.RowRetrieved"/><seealso cref="T:Sybase.DataWindow.RowRetrievedEventArgs"/>
        </member>
        <member name="T:Sybase.DataWindow.EndRetrieveEventHandler">
            <summary>Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.EndRetrieve"/> event of a <see cref="T:Sybase.DataWindow.DataStore"/> or <see cref="T:Sybase.DataWindow.DataWindowControl"/>.</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="T:Sybase.DataWindow.EndRetrieveEventArgs"/> that contains the event data.</param><remarks>
				<para>The declaration of your event handler must have the same parameters as the <b>EndRetrieveEventHandler</b> delegate declaration.</para>
				<para>When you create a <b>EndRetrieveEventHandler</b> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event.
			The event handler is called whenever the event occurs, unless you remove the delegate.
			For more information about handling events with delegates, see <see href="ms-help://MS.NETFrameworkSDKv1.1/cpguidenf/html/cpconeventsdelegates.htm">Events and Delegates</see>.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.EndRetrieve"/><seealso cref="T:Sybase.DataWindow.EndRetrieveEventArgs"/>
        </member>
        <member name="T:Sybase.DataWindow.BeginRetrieveEventArgs">
            <summary>Provides data for the <see cref="E:Sybase.DataWindow.DataWindowControl.BeginRetrieve"/> event.</summary>
        </member>
        <member name="T:Sybase.DataWindow.RowEventArgs">
            <summary>Abstract ancestor class for various row related events.</summary>
        </member>
        <member name="M:Sybase.DataWindow.RowEventArgs.#ctor">
            <summary>Initializes a new instance of the <b>RowEventArgs</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.RowEventArgs.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <b>RowEventArgs</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.RowEventArgs.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="M:Sybase.DataWindow.BeginRetrieveEventArgs.#ctor">
            <summary>Initializes a new instance of the <b>BeginRetrieveEventArgs</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.BeginRetrieveEventArgs.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.BeginRetrieveEventArgs.Action">
            <summary>Gets or sets a value indicating what action should be taken regarding the retrieval and any existing data in the DataWindow. </summary><value>A value indicating what action should be taken regarding the retrieval and any existing data in the DataWindow.</value><remarks>Set the <b>Action</b> property to one of the following values before exiting the <see cref="E:Sybase.DataWindow.DataWindowControl.BeginRetrieve"/> event to change the effect of the
			retrieval.  The default value of <see cref="F:Sybase.DataWindow.BeginRetrieveAction.Continue"/> clears the existing rows in the DataWindow and proceeds with the retrieval.</remarks>
        </member>
        <member name="T:Sybase.DataWindow.RowRetrievedEventArgs">
            <summary>Provides data for the <see cref="E:Sybase.DataWindow.DataWindowControl.RowRetrieved"/> event.</summary>
        </member>
        <member name="M:Sybase.DataWindow.RowRetrievedEventArgs.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <b>RowRetrievedEventArgs</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.RowRetrievedEventArgs.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.RowRetrievedEventArgs.RowNumber">
            <summary>Gets the number of the row currently being retrieved.</summary><value>Gets the number of the row currently being retrieve.</value><remarks><b>RowNumber</b> refers to the position in the Primary buffer of the DataWindow where the retrieved row resides before any existing filter criteria
			is applied.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.RowRetrievedEventArgs.Cancel">
            <summary>Gets or sets a value indicating whether the retrieval should be cancelled.</summary><value>The value indicating whether the retrieval should be cancelled.</value><remarks>Set <b>Cancel</b> to <c>true</c> within the <see cref="E:Sybase.DataWindow.DataWindowControl.RowRetrieved"/> event to cancel the retrieval
			of the remaining rows of the result set.</remarks>
        </member>
        <member name="T:Sybase.DataWindow.EndRetrieveEventArgs">
            <summary>Provides data for the <see cref="E:Sybase.DataWindow.DataWindowControl.EndRetrieve"/> event.</summary>
        </member>
        <member name="M:Sybase.DataWindow.EndRetrieveEventArgs.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <b>EndRetrieveEventArgs</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.EndRetrieveEventArgs.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.EndRetrieveEventArgs.RowCount">
            <summary>Gets the numer of rows in the DataWindow following the retrieval.</summary><value>The number of rows in the DataWindow after retrieval.</value><remarks><b>RowCount</b> includes rows that are placed in the Filter buffer as a result of an filter criterion in effect.  Also included are any rows that are already in the Primary and Filter buffers that are not cleared out because
			the <see cref="P:Sybase.DataWindow.BeginRetrieveEventArgs.Action"/> was set to <c>AppendRows</c> in the <see cref="E:Sybase.DataWindow.DataWindowControl.BeginRetrieve"/> event.</remarks>
        </member>
        <member name="T:Sybase.DataWindow.RowFocusChangedEventHandler">
            <summary>Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanged"/> event of a <see cref="T:Sybase.DataWindow.DataWindowControl"/>.</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="T:Sybase.DataWindow.RowFocusChangedEventArgs"/> that contains the event data.</param><remarks>
				<para>The declaration of your event handler must have the same parameters as the <b>RowFocusChangedEventHandler</b> delegate declaration.</para>
				<para>When you create a <b>RowFocusChangedEventHandler</b> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event.
			The event handler is called whenever the event occurs, unless you remove the delegate.
			For more information about handling events with delegates, see <see href="ms-help://MS.NETFrameworkSDKv1.1/cpguidenf/html/cpconeventsdelegates.htm">Events and Delegates</see>.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanged"/><seealso cref="T:Sybase.DataWindow.RowFocusChangedEventArgs"/>
        </member>
        <member name="T:Sybase.DataWindow.RowFocusChangingEventHandler">
            <summary>Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanging"/> event of a <see cref="T:Sybase.DataWindow.DataWindowControl"/>.</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="T:Sybase.DataWindow.RowFocusChangingEventArgs"/> that contains the event data.</param><remarks>
				<para>The declaration of your event handler must have the same parameters as the <b>RowFocusChangingEventHandler</b> delegate declaration.</para>
				<para>When you create a <b>RowFocusChangingEventHandler</b> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event.
			The event handler is called whenever the event occurs, unless you remove the delegate.
			For more information about handling events with delegates, see <see href="ms-help://MS.NETFrameworkSDKv1.1/cpguidenf/html/cpconeventsdelegates.htm">Events and Delegates</see>.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanging"/><seealso cref="T:Sybase.DataWindow.RowFocusChangingEventArgs"/>
        </member>
        <member name="T:Sybase.DataWindow.RowFocusChangedEventArgs">
            <summary>Provides data for the <see cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanged"/> event.</summary>
        </member>
        <member name="M:Sybase.DataWindow.RowFocusChangedEventArgs.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <b>RowFocusChangedEventArgs</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.RowFocusChangedEventArgs.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.RowFocusChangedEventArgs.RowNumber">
            <summary>Gets the number of the row which has gained focus.</summary><value>The number of the row which has gained focus.</value>
        </member>
        <member name="T:Sybase.DataWindow.RowFocusChangingEventArgs">
            <summary>Provides data for the <see cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanging"/> event.</summary>
        </member>
        <member name="M:Sybase.DataWindow.RowFocusChangingEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <b>RowFocusChangingEventArgs</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.RowFocusChangingEventArgs.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.RowFocusChangingEventArgs.CurrentRowNumber">
            <summary>Gets the number of the current row, that is, the row which is losing focus.</summary><value>The number of the current row.</value>
        </member>
        <member name="P:Sybase.DataWindow.RowFocusChangingEventArgs.NewRowNumber">
            <summary>Gets the number of the new row, that is, the row which is gaining focus.</summary><value>The number of the new row.</value>
        </member>
        <member name="P:Sybase.DataWindow.RowFocusChangingEventArgs.Cancel">
            <summary>Gets or sets a value indicating whether the event action should be cancelled.</summary><value>The value indicating whether the event action should be cancelled.</value><remarks>Set <b>Cancel</b> to <c>true</c> within the <see cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanging"/> event to cancel the change
			of focus and the subsequent <see cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanged"/> event.</remarks>
        </member>
        <member name="T:Sybase.DataWindow.ScrollHorizontalEventHandler">
            <summary>Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.ScrollHorizontal"/> event of a <see cref="T:Sybase.DataWindow.DataWindowControl"/>.</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="T:Sybase.DataWindow.ScrollHorizontalEventArgs"/> that contains the event data.</param><remarks>
				<para>The declaration of your event handler must have the same parameters as the <b>ScrollHorizontalEventHandler</b> delegate declaration.</para>
				<para>When you create a <b>ScrollHorizontalEventHandler</b> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event.
			The event handler is called whenever the event occurs, unless you remove the delegate.
			For more information about handling events with delegates, see <see href="ms-help://MS.NETFrameworkSDKv1.1/cpguidenf/html/cpconeventsdelegates.htm">Events and Delegates</see>.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.ScrollHorizontal"/><seealso cref="T:Sybase.DataWindow.ScrollHorizontalEventArgs"/>
        </member>
        <member name="T:Sybase.DataWindow.ScrollHorizontalEventArgs">
            <summary>Provides data for the <see cref="E:Sybase.DataWindow.DataWindowControl.ScrollHorizontal"/> event.</summary>
        </member>
        <member name="M:Sybase.DataWindow.ScrollHorizontalEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <b>ScrollHorizontalEventArgs</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.ScrollHorizontalEventArgs.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.ScrollHorizontalEventArgs.ScrollPosition">
            <summary>Gets the position of the scroll bar thumb.</summary><value>The position of the scroll bar thumb.</value><remarks><b>ScrollPosition</b> is expressed in the <see cref="P:Sybase.DataWindow.DataWindowControl.Units"/> of measure assigned to the <see cref="T:Sybase.DataWindow.DataWindowControl"/>.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.ScrollHorizontalEventArgs.Pane">
            <summary>Gets the pane that was scrolled horizontally.</summary><value>The pane that was scrolled.</value><remarks>If the <see cref="P:Sybase.DataWindow.DataWindowControl.ScrollBars"/> does not indicate a horizontal split scroll should be used, <b>Pane</b>
			will have the value of <c>Left</c>.</remarks>
        </member>
        <member name="T:Sybase.DataWindow.ScrollVerticalEventHandler">
            <summary>Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.ScrollVertical"/> event of a <see cref="T:Sybase.DataWindow.DataWindowControl"/>.</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="T:Sybase.DataWindow.ScrollVerticalEventArgs"/> that contains the event data.</param><remarks>
				<para>The declaration of your event handler must have the same parameters as the <b>ScrollVerticalEventHandler</b> delegate declaration.</para>
				<para>When you create a <b>ScrollVerticalEventHandler</b> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event.
			The event handler is called whenever the event occurs, unless you remove the delegate.
			For more information about handling events with delegates, see <see href="ms-help://MS.NETFrameworkSDKv1.1/cpguidenf/html/cpconeventsdelegates.htm">Events and Delegates</see>.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.ScrollVertical"/><seealso cref="T:Sybase.DataWindow.ScrollVerticalEventArgs"/>
        </member>
        <member name="T:Sybase.DataWindow.ScrollVerticalEventArgs">
            <summary>Provides data for the <see cref="E:Sybase.DataWindow.DataWindowControl.ScrollVertical"/> event.</summary>
        </member>
        <member name="M:Sybase.DataWindow.ScrollVerticalEventArgs.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <b>ScrollVerticalEventArgs</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.ScrollVerticalEventArgs.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.ScrollVerticalEventArgs.ScrollPosition">
            <summary>Gets the position of the scroll bar thumb.</summary><value>The position of the scroll bar thumb.</value><remarks><b>ScrollPosition</b> is expressed in the <see cref="P:Sybase.DataWindow.DataWindowControl.Units"/> of measure assigned to the <see cref="T:Sybase.DataWindow.DataWindowControl"/>.</remarks>
        </member>
        <member name="T:Sybase.DataWindow.SqlPreviewEventHandler">
            <summary>Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.SqlPreview"/> event of a <see cref="T:Sybase.DataWindow.DataStore"/> or "<see cref="T:Sybase.DataWindow.DataWindowControl"/>.</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="T:Sybase.DataWindow.SqlPreviewEventArgs"/> that contains the event data.</param><remarks>
				<para>The declaration of your event handler must have the same parameters as the <b>SqlPreviewEventHandler</b> delegate declaration.</para>
				<para>When you create a <b>SqlPreviewEventHandler</b> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event.
			The event handler is called whenever the event occurs, unless you remove the delegate.
			For more information about handling events with delegates, see <see href="ms-help://MS.NETFrameworkSDKv1.1/cpguidenf/html/cpconeventsdelegates.htm">Events and Delegates</see>.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.SqlPreview"/><seealso cref="T:Sybase.DataWindow.SqlPreviewEventArgs"/>
        </member>
        <member name="T:Sybase.DataWindow.SqlPreviewEventArgs">
            <summary>Provides data for the <see cref="E:Sybase.DataWindow.DataWindowControl.SqlPreview"/> event.</summary>
        </member>
        <member name="M:Sybase.DataWindow.SqlPreviewEventArgs.#ctor(System.Int32,System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Int32)">
            <summary>Initializes a new instance of the <b>SqlPreviewEventArgs</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.SqlPreviewEventArgs.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.SqlPreviewEventArgs.SqlVerb">
            <summary>Gets the type of SQL statement that caused the event to be fired.</summary><value>The type of SQL statement that caused the event to be fired.</value>
        </member>
        <member name="P:Sybase.DataWindow.SqlPreviewEventArgs.RequestingMethod">
            <summary>Gets the DataWindow .NET method that caused the event to be fired.</summary><value>Gets the DataWindow .NET method that caused the event to be fired.</value>
        </member>
        <member name="P:Sybase.DataWindow.SqlPreviewEventArgs.SqlSyntax">
            <summary>Gets or sets the SQL syntax that will be sent to the database.</summary><value>The SQL syntax to be sent to the database.</value>
        </member>
        <member name="P:Sybase.DataWindow.SqlPreviewEventArgs.Buffer">
            <summary>Gets the DataWindow buffer for which the associated SQL statement was generated.</summary><value>The DataWindow buffer for which the associated SQL statement was generated.</value>
        </member>
        <member name="P:Sybase.DataWindow.SqlPreviewEventArgs.RowNumber">
            <summary>Gets the number of the DataWindow row for which the associated SQL statement was generated.</summary><value>the number of the DataWindow row for which the associated SQL statement was generated.</value>
        </member>
        <member name="P:Sybase.DataWindow.SqlPreviewEventArgs.Action">
            <summary>Gets or sets a value indicating whether the SQL statement should be forwarded to the database.</summary><value>A value indicating whether the SQL statement should be forwarded to the database.</value>
        </member>
        <member name="T:Sybase.DataWindow.BeginUpdateEventHandler">
            <summary>Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.BeginUpdate"/> event of a <see cref="T:Sybase.DataWindow.DataStore"/> or <see cref="T:Sybase.DataWindow.DataWindowControl"/>.</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"/> that contains the event data.</param><remarks>
				<para>The update action can be cancelled by setting the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property of <c>e</c> to <c>true</c>.</para>
				<para>The declaration of your event handler must have the same parameters as the <b>BeginUpdateEventHandler</b> delegate declaration.</para>
				<para>When you create a <b>BeginUpdateEventHandler</b> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event.
			The event handler is called whenever the event occurs, unless you remove the delegate.
			For more information about handling events with delegates, see <see href="ms-help://MS.NETFrameworkSDKv1.1/cpguidenf/html/cpconeventsdelegates.htm">Events and Delegates</see>.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.BeginUpdate"/><seealso cref="T:System.ComponentModel.CancelEventArgs"/>
        </member>
        <member name="T:Sybase.DataWindow.EndUpdateEventHandler">
            <summary>Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.EndUpdate"/> event of a <see cref="T:Sybase.DataWindow.DataStore"/> or <see cref="T:Sybase.DataWindow.DataWindowControl"/>.</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="T:Sybase.DataWindow.EndUpdateEventArgs"/> that contains the event data.</param><remarks>
				<para>The declaration of your event handler must have the same parameters as the <b>EndUpdateEventHandler</b> delegate declaration.</para>
				<para>When you create a <b>EndUpdateEventHandler</b> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event.
			The event handler is called whenever the event occurs, unless you remove the delegate.
			For more information about handling events with delegates, see <see href="ms-help://MS.NETFrameworkSDKv1.1/cpguidenf/html/cpconeventsdelegates.htm">Events and Delegates</see>.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.EndUpdate"/><seealso cref="T:Sybase.DataWindow.EndUpdateEventArgs"/>
        </member>
        <member name="T:Sybase.DataWindow.EndUpdateEventArgs">
            <summary>Provides data for the <see cref="E:Sybase.DataWindow.DataWindowControl.EndUpdate"/> event.</summary>
        </member>
        <member name="M:Sybase.DataWindow.EndUpdateEventArgs.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <b>EndUpdateEventArgs</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.EndUpdateEventArgs.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.EndUpdateEventArgs.RowsInserted">
            <summary>Gets the number of rows inserted as a result of the call to <see cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/>.</summary><value>The number of rows inserted.</value>
        </member>
        <member name="P:Sybase.DataWindow.EndUpdateEventArgs.RowsUpdated">
            <summary>Gets the number of rows updated as a result of the call to <see cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/>.</summary><value>The number of rows updated.</value>
        </member>
        <member name="P:Sybase.DataWindow.EndUpdateEventArgs.RowsDeleted">
            <summary>Gets the number of rows deleted as a result of the call to <see cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/>.</summary><value>The number of rows deleted.</value>
        </member>
        <member name="T:Sybase.DataWindow.DropDownEventHandler">
            <summary>Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.DropDown"/> event of a <see cref="T:Sybase.DataWindow.DataWindowControl"/>.</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param><remarks>
				<para>The declaration of your event handler must have the same parameters as the <b>DropDownEventHandler</b> delegate declaration.</para>
				<para>When you create a <b>DropDownEventHandler</b> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event.
			The event handler is called whenever the event occurs, unless you remove the delegate.
			For more information about handling events with delegates, see <see href="ms-help://MS.NETFrameworkSDKv1.1/cpguidenf/html/cpconeventsdelegates.htm">Events and Delegates</see>.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.DropDown"/><seealso cref="T:System.EventArgs"/>
        </member>
        <member name="T:Sybase.DataWindow.ButtonClickingEventHandler">
            <summary>Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.ButtonClicking"/> event of a <see cref="T:Sybase.DataWindow.DataWindowControl"/>.</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"/> that contains the event data.</param><remarks>
				<para>The action can be cancelled by setting the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property of <c>e</c> to <c>true</c>.</para>
				<para>The declaration of your event handler must have the same parameters as the <b>ButtonClickingEventHandler</b> delegate declaration.</para>
				<para>When you create a <b>ButtonClickingEventHandler</b> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event.
			The event handler is called whenever the event occurs, unless you remove the delegate.
			For more information about handling events with delegates, see <see href="ms-help://MS.NETFrameworkSDKv1.1/cpguidenf/html/cpconeventsdelegates.htm">Events and Delegates</see>.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.ButtonClicking"/><seealso cref="T:System.ComponentModel.CancelEventArgs"/>
        </member>
        <member name="T:Sybase.DataWindow.ButtonClickedEventHandler">
            <summary>Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.ButtonClicked"/> event of a <see cref="T:Sybase.DataWindow.DataWindowControl"/>.</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="T:Sybase.DataWindow.ButtonClickedEventArgs"/> that contains the event data.</param><remarks>
				<para>The declaration of your event handler must have the same parameters as the <b>ButtonClickedEventHandler</b> delegate declaration.</para>
				<para>When you create a <b>ButtonClickedEventHandler</b> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event.
			The event handler is called whenever the event occurs, unless you remove the delegate.
			For more information about handling events with delegates, see <see href="ms-help://MS.NETFrameworkSDKv1.1/cpguidenf/html/cpconeventsdelegates.htm">Events and Delegates</see>.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.ButtonClicked"/><seealso cref="T:Sybase.DataWindow.ButtonClickedEventArgs"/>
        </member>
        <member name="T:Sybase.DataWindow.ButtonClickedEventArgs">
            <summary>Provides data for the <see cref="E:Sybase.DataWindow.DataWindowControl.ButtonClicked"/> event.</summary>
        </member>
        <member name="M:Sybase.DataWindow.ButtonClickedEventArgs.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <b>ButtonClickedEventArgs</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.ButtonClickedEventArgs.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.ButtonClickedEventArgs.ActionReturnCode">
            <summary>Gets a value returned by the action carried out as a result of the button click.</summary><value>The value returned as a result of the button click.</value><remarks><para>The <b>ActionReturnCode</b> values depend on the action assigned to the DataWindowControl button within DataWindow Designer or at runtime via the <c>dw_control.Object.buttonname.Action</c> property.</para>
				<table class="dtTABLE" cellspacing="0">
					<tr><th width="30">Value</th><th>Action</th><th>Description</th><th>ActionReturnCode</th></tr>
			  		 <tr valign="top"><td width="30">0</td><td>UserDefined</td><td>No implicit action, code in <see cref="E:Sybase.DataWindow.DataWindowControl.ButtonClicked"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ButtonClicking"/> events is executed.</td><td>Return value specified in script.</td></tr>
			  		 <tr valign="top"><td width="30">1</td><td>Retrieve (w/Yield)</td><td>Retrieves rows from the database and enables cancellation during a long retrieval process.</td><td>Number of rows retrieved</td></tr>
			  		 <tr valign="top"><td width="30">2</td><td>Retrieve</td><td>Retrieves rows from the database.</td><td>Number of rows retrieved</td></tr>
			  		 <tr valign="top"><td width="30">3</td><td>Cancel</td><td>Cancels a retrieval (if cancellation enabled).</td><td>0</td></tr>
			  		 <tr valign="top"><td width="30">4</td><td>PageNext</td><td>Scrolls to the next page.</td><td>Number of row displayed at top of the control (or -1 if error)</td></tr>
			  		 <tr valign="top"><td width="30">5</td><td>PagePrior</td><td>Scrolls to the previous page.</td><td>Number of row displayed at top of the control (or -1 if error)</td></tr>
			  		 <tr valign="top"><td width="30">6</td><td>PageFirst</td><td>Scrolls to the first page.</td><td>Number of row displayed at top of the control (or -1 if error)</td></tr>
			  		 <tr valign="top"><td width="30">7</td><td>PageLast</td><td>Scrolls to the last page.</td><td>Number of row displayed at top of the control (or -1 if error)</td></tr>
			  		 <tr valign="top"><td width="30">8</td><td>Sort</td><td>Displays the Sort dialog box and sorts as specified.</td><td>1 if successful, -1 if error</td></tr>
			  		 <tr valign="top"><td width="30">9</td><td>Filter</td><td>Displays the Filter dialog box and filters as specified.</td><td>1 if successful, -1 if error</td></tr>
			  		 <tr valign="top"><td width="30">10</td><td>DeleteRow</td><td>Deletes row associated with the button, or deletes the current row if button is not in detail band.</td><td>1 if successful, -1 if error</td></tr>
			  		 <tr valign="top"><td width="30">11</td><td>Append</td><td>Insert a new row at the end of the DataWindow.</td><td>Number of the new row</td></tr>
			  		 <tr valign="top"><td width="30">12</td><td>InsertRow</td><td>Inserts a row before the row containing the button, or before the current row if button is not in detail band.</td><td>Number of the new row</td></tr>
			  		 <tr valign="top"><td width="30">13</td><td>Update</td><td>Saves (and commits) changes.</td><td>1 if successful, -1 if error</td></tr>
			  		 <tr valign="top"><td width="30">14</td><td>SaveRowsAs</td><td>Displays SaveAs dialog and saves rows in the selected format.</td><td>Number of rows saved.</td></tr>
			  		 <tr valign="top"><td width="30">15</td><td>Print</td><td>Prints one copy of the DataWindow.</td><td>0</td></tr>
			  		 <tr valign="top"><td width="30">16</td><td>Preview</td><td>Toggles DataWindow between preview and print preview modes.</td><td>0</td></tr>
			  		 <tr valign="top"><td width="30">17</td><td>PreviewWithRulers</td><td>Toggles print preview rulers on and off.</td><td>0</td></tr>
			  		 <tr valign="top"><td width="30">18</td><td>QueryMode</td><td>Toggles query mode on and off.</td><td>0</td></tr>
			  		 <tr valign="top"><td width="30">19</td><td>QuerySort</td><td>Toggles query sort on and off.</td><td>0</td></tr>
			  		 <tr valign="top"><td width="30">19</td><td>QueryClear</td><td>Removes the WHERE clause from a query (if applicable).</td><td>0</td></tr>
				</table>
			</remarks>
        </member>
        <member name="T:Sybase.DataWindow.GraphCreatedEventHandler">
            <summary>Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.GraphCreated"/> event of a <see cref="T:Sybase.DataWindow.DataWindowControl"/>.</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="T:Sybase.DataWindow.GraphCreatedEventArgs"/> that contains the event data.</param><remarks>
				<para>The declaration of your event handler must have the same parameters as the <b>GraphCreatedEventHandler</b> delegate declaration.</para>
				<para>When you create a <b>GraphCreatedEventHandler</b> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event.
			The event handler is called whenever the event occurs, unless you remove the delegate.
			For more information about handling events with delegates, see <see href="ms-help://MS.NETFrameworkSDKv1.1/cpguidenf/html/cpconeventsdelegates.htm">Events and Delegates</see>.</para>
			</remarks><seealso cref="E:Sybase.DataWindow.DataWindowControl.GraphCreated"/><seealso cref="T:Sybase.DataWindow.GraphCreatedEventArgs"/>
        </member>
        <member name="T:Sybase.DataWindow.GraphCreatedEventArgs">
            <summary>Provides data for the <see cref="E:Sybase.DataWindow.DataWindowControl.GraphCreated"/> event.</summary>
        </member>
        <member name="M:Sybase.DataWindow.GraphCreatedEventArgs.#ctor(System.String)">
            <summary>Initializes a new instance of the <b>GraphCreatedEventArgs</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.GraphCreatedEventArgs.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.GraphCreatedEventArgs.Name">
            <summary>Gets the name of the graph control within the DataWindow.</summary><value>The name of the graph control within the DataWindow.</value><remarks>You can use <b>Name</b> as the argument to <see cref="M:Sybase.DataWindow.DataWindowControl.GetObjectByName(System.String)"/> to return a <see cref="T:Sybase.DataWindow.GraphicObjectGraph"/> reference
			that can be further manipulated before the graph is displayed.</remarks>
        </member>
        <member name="T:Sybase.DataWindow.TreeViewExpandingEventHandler">
            <summary>
			Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.TreeViewExpanding"></see> event of a <see cref="T:Sybase.DataWindow.DataWindowControl"></see> or a <see cref="T:Sybase.DataWindow.DataStore"></see>.
			</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="M:Sybase.DataWindow.DataWindowControl.TreeViewExpandingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Sybase.DataWindow.TreeViewCollapsingEventHandler">
            <summary>
			Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.TreeViewCollapsing"></see> event of a <see cref="T:Sybase.DataWindow.DataWindowControl"></see> or a <see cref="T:Sybase.DataWindow.DataStore"></see>.
			</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="T:Sybase.DataWindow.TreeViewCollapsingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Sybase.DataWindow.TreeViewExpandedEventHandler">
            <summary>
			Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.TreeViewExpanded"></see> event of a <see cref="T:Sybase.DataWindow.DataWindowControl"></see> or a <see cref="T:Sybase.DataWindow.DataStore"></see>.
			</summary><param name="sender">The source of the event.</param><param name="e">A <see cref="T:Sybase.DataWindow.TreeViewExpandedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Sybase.DataWindow.TreeViewCollapsedEventHandler">
            <!-- No matching elements were found for the following include tag --><include file="EventComments.xml" path="doc/members/member[@name=&quot;M:TreeViewCollapsedEventHandler&quot;]/*"/>
        </member>
        <member name="T:Sybase.DataWindow.TreeViewNodeSelectingEventHandler">
            <summary>
				Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.TreeViewNodeSelecting"></see> event of a <see cref="T:Sybase.DataWindow.DataWindowControl"></see> or a <see cref="T:Sybase.DataWindow.DataStore"></see>.
			</summary><param name="sender">The source of the event.</param><param name="e">
				A <see cref="M:Sybase.DataWindow.DataWindowControl.TreeViewNodeSelectingEventArgs"/> that contains the event data.
			</param>
        </member>
        <member name="T:Sybase.DataWindow.TreeViewNodeSelectedEventHandler">
            <summary>
				Represents the method that will handle the <see cref="E:Sybase.DataWindow.DataWindowControl.TreeViewNodeSelected"></see> event of a <see cref="T:Sybase.DataWindow.DataWindowControl"></see> or a <see cref="T:Sybase.DataWindow.DataStore"></see>.
			</summary><param name="sender">The source of the event.</param><param name="e">
				A <see cref="M:Sybase.DataWindow.DataWindowControl.TreeViewNodeSelectedEventArgs"/> that contains the event data.
			</param>
        </member>
        <member name="T:Sybase.DataWindow.TreeViewEventArgs">
            <summary>Ancestor class for the TreeView event args.</summary>
        </member>
        <member name="M:Sybase.DataWindow.TreeViewEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <b>TreeViewEventArgs</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.TreeViewEventArgs.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.TreeViewEventArgs.Row">
            <summary>Gets the number of the first row of the group that will be expanding.</summary><value>The number of the first row of the group.</value>
        </member>
        <member name="P:Sybase.DataWindow.TreeViewEventArgs.GroupLevel">
            <summary>Gets the level of the of the group that will be expanding.</summary><value>The level of the group.</value>
        </member>
        <member name="T:Sybase.DataWindow.TreeViewCancelEventArgs">
            <summary>Ancestor class for the TreeViewCancel event args.</summary>
        </member>
        <member name="M:Sybase.DataWindow.TreeViewCancelEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <b>TreeViewCancelEventArgs</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.TreeViewCancelEventArgs.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.TreeViewCancelEventArgs.Cancel">
            <summary>Cancels the action.</summary>
        </member>
        <member name="T:Sybase.DataWindow.TreeViewExpandingEventArgs">
            <summary>Provides data for the <see cref="E:Sybase.DataWindow.DataWindowControl.TreeViewExpanding"></see>event.</summary>
        </member>
        <member name="M:Sybase.DataWindow.TreeViewExpandingEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of a <see cref="T:Sybase.DataWindow.DataWindowControl.TreeviewExpandingEventArgs"></see></summary>
        </member>
        <member name="T:Sybase.DataWindow.TreeViewCollapsingEventArgs">
            <summary>Provides data for the <see cref="E:Sybase.DataWindow.DataWindowControl.TreeViewCollapsing"></see> event.</summary>
        </member>
        <member name="M:Sybase.DataWindow.TreeViewCollapsingEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <b>TreeViewCollapsingEventArgs</b> class.</summary>
        </member>
        <member name="T:Sybase.DataWindow.TreeViewNodeSelectingEventArgs">
            <summary>
				Provides data for the <see cref="E:Sybase.DataWindow.DataWindowControl.TreeViewNodeSelecting"></see>event.
			</summary>
        </member>
        <member name="M:Sybase.DataWindow.TreeViewNodeSelectingEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
				Initializes a new instance of a <see cref="T:Sybase.DataWindow.DataWindowControl.TreeViewNodeSelectingEventArgs"></see>
			</summary>
        </member>
        <member name="T:Sybase.DataWindow.TreeViewExpandedEventArgs">
            <summary> Provides data for the <see cref="E:Sybase.DataWindow.DataWindowControl.TreeViewExpanded"></see> event.</summary>
        </member>
        <member name="M:Sybase.DataWindow.TreeViewExpandedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <b>TreeViewExpandedEventArgs</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.TreeViewExpandedEventArgs.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="T:Sybase.DataWindow.TreeViewCollapsedEventArgs">
            <summary> Provides data for the <see cref="E:Sybase.DataWindow.DataWindowControl.TreeViewCollapsed"></see> event.</summary>
        </member>
        <member name="M:Sybase.DataWindow.TreeViewCollapsedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <b>TreeViewCollapsedEventArgs</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.TreeViewCollapsedEventArgs.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="T:Sybase.DataWindow.TreeViewNodeSelectedEventArgs">
            <summary>
				Provides data for the <see cref="E:Sybase.DataWindow.DataWindowControl.TreeViewNodeSelected"></see>event.
			</summary>
        </member>
        <member name="M:Sybase.DataWindow.TreeViewNodeSelectedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
				Initializes a new instance of a <see cref="T:Sybase.DataWindow.DataWindowControl.TreeViewNodeSelectedEventArgs"></see>
			</summary>
        </member>
        <member name="M:Sybase.DataWindow.TreeViewNodeSelectedEventArgs.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="T:Sybase.DataWindow.WSErrorEventHandler">
            <summary>
            This delegate is designed for DataWindow .NET internal usage only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.WSErrorEventArgs">
            <summary>
            This class is designed for DataWindow .NET internal usage only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.DataWindowChild">
            <summary>A DropDownDataWindow or a DataWindow located within a composite style DataWindow.</summary><remarks>This object is 
         returned when invoking <see cref="M:Sybase.DataWindow.DataWindowControl.GetChild(System.String)"/> for a DropDownDataWindow column or a DataWindow object within a composite DataWindow.
         </remarks>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowChild.PrimaryData">
            <summary>
            Data rows that are displayed in the DataWindow.
            </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowChild.FilteredData">
            <summary>
            Data rows that have been filtered out of the PrimaryData.
            </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowChild.DeletedData">
            <summary>
            Data rows that have been deleted.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.BindAdoDataTable(System.Data.DataTable)">
            <summary>Binds the DataTable data to the DataWindow and copies DataTable data to the DataWindow.
			</summary><remarks>The BindAdoDataTable method does not support the Crosstab presentation style.
			</remarks><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.BindDataView(System.Data.DataView)">
            <summary>
			Binds the DataView data to the DataWindow object and copies the data from the DataView to the DataWindow.
			</summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.Collapse(System.Int32,System.Int32)">
            <summary>
			Collapse a group which has the specified group level and includes the specified row.
			</summary><param name="rowNumber">
			The number of the row that belongs to the group that will be collapsed.
			</param><param name="groupLevel">
			The level of the group that will be collapsed.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.CollapseAll">
            <summary>
			Collapses all groups.
			</summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.CollapseAllChildren(System.Int32,System.Int32)">
            <summary>
			Collapse a group and all child groups beneath it.
			</summary><param name="rowNumber">
			The number of the row that belongs to the group that will be collapsed.
			</param><param name="groupLevel">
			The level of the group that will be collapsed.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.CollapseLevel(System.Int32)">
            <summary>
			Collapse all groups within the specified group level.
			</summary><param name="level">
			The level of the groups that will be collapsed.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.DbCancel">
            <summary>Cancels the retrieval in process. 
      </summary><exception cref="T:System.InvalidOperationException">The object is not connected to a database. </exception><exception cref="T:System.NotSupportedException">The object is a DataWindowChild that is a DropDownDataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<!-- You can let users cancel a retrieval in progress by setting the Async database parameter to 1 before beginning a retrieve.-->
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.Retrieve(System.Data.DataTable)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.DeleteRow(System.Int32)">
            <summary>Deletes a row from the DataWindow. 
      </summary><param name="RowNumber">The number of the row to be deleted. If 0, the current row will be deleted.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not valid.</exception><exception cref="T:System.NotSupportedException">The assigned DataWindow object is a Crosstab.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The designated row is removed from the DataWindow's Primary buffer. If the DataWindow is not updatable, 
         all storage associated with the row is cleared. If the DataWindow is updatable, <b>DeleteRow</b> moves the row to 
         the DataWindow's Delete buffer. The row is not deleted from the database table until the application calls the <see cref="M:Sybase.DataWindow.DataWindowChild.UpdateData"/> method. After 
         the <see cref="M:Sybase.DataWindow.DataWindowChild.UpdateData"/> method has updated the database and the status flags are reset, the storage associated 
         with the row is cleared.</para>
			</remarks><example>This example shows the code for a button that deletes the last row from <c>dwItems</c>:
         <code>      
         [Visual Basic]
         Private Sub cb_delitem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cb_delitem.Click
            dwItems.DeleteRow(dwItems.RowCount)
         End Sub
         
         [C#]
         private void cb_delitem_Click(object sender, System.EventArgs e)
         {
            dwItems.DeleteRow(dwItems.RowCount);
         }
         </code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.Describe(System.String)">
            <summary>Reports the values of properties of a DataWindow object and the controls within it. 
      </summary><returns>A string that includes a value for each property.</returns><param name="Syntax">A string whose value is a blank-separated list of properties.</param><exception cref="T:System.ArgumentNullException">
				<i>Syntax</i> is null.</exception><exception cref="T:System.ArgumentException">
				<i>Syntax</i> contains an invalid property.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>
				<para>Use <b>Describe</b> to understand the structure of a DataWindow object. For example, you can find which 
         bands the DataWindow uses and the datatypes of its columns.</para>
				<para>
					<b>Describe</b> differs from <see cref="M:Sybase.DataWindow.DataWindowChild.GetProperty(System.String)"/> in that it allows you go retrieve multiple properties in one invocation.</para>
			</remarks><example>This Visual Basic example changes a crosstab DataWindow to have a more formatted appearance: 
         <code>
         Private Sub ChangeCrossTab()
         
            'This function will dynamically change a crosstab to have a
            'more formatted appearance.
         
            Dim ColumnCount As Integer
            Dim Counter As Integer
            Dim CurrentIndex, NextIndex As Integer
         
            Dim Split, DWBand, ObjectType As String
            Dim DWObjects, DWObject, ModString As String
            Dim Temp As String
            Dim ColName As String
         
            Try
               ' returns a list of all of the DWObjects on the datawindow
               DWObjects = dwCust.Describe("datawindow.objects")
         
               CurrentIndex = 0
               NextIndex = DWObjects.IndexOf("\t")
         
               Do Until NextIndex = -1
                  DWObject = Mid(DWObjects, CurrentIndex, NextIndex - CurrentIndex)
         
                  'center text in the heading
                  DWBand = dwCust.Describe(DWObject + ".Band")
                  If DWBand.ToLower().Substring(0, 5).Equals("header") Then
                     ModString = ModString + DWObject + ".Alignment=2 " + DWObject + ".Font.Weight=700 "
                  End If
         
                  'format detail and total columns differently
                  ObjectType = dwCust.Describe(DWObject + ".Type")
                  If ObjectType.ToLower().Equals("compute") Then
                     Temp = dwCust.Describe(DWObject + ".Expression")
                     If Temp.IndexOf("sum") &gt; 0 Then
                        ModString = ModString + DWObject + ".Format='$#,##0' "
                     ElseIf Temp.IndexOf("count") &gt; 0 Then
                        ModString = ModString + DWObject + ".Format='#,##0' "
                     End If
                  ElseIf ObjectType.ToLower().Equals("column") Then
                     Temp = dwCust.Describe(DWObject + ".Coltype")
                     If Temp.IndexOf("dec") &gt; 0 Then
                        ModString = ModString + DWObject + ".Format='$#,##0.00' "
                     ElseIf Temp.IndexOf("num") &gt; 0 Then
                        ModString = ModString + DWObject + ".Format='#,##0.00' "
                     End If
                  End If
         
                  'loop through all the DWObjects on the datawindow
                  CurrentIndex = NextIndex + 1
                  NextIndex = DWObjects.IndexOf("\t", CurrentIndex)
               Loop
         
               dwCust.Modify(ModString)
         
            Catch ex As Exception
               ErrorHandler.HandleException(ex)
            End Try
         End Sub
         </code>
			</example><example>This line of code returns a string that lists all the controls in the DataWindow object contained in DW1:
         <code>str = DW1.Describe("datawindow.objects")</code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetProperty(System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.Modify(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.Expand(System.Int32,System.Int32)">
            <summary>
			Expand a group which has the specified group level and includes the specified row.
			</summary><param name="rowNumber">
			The number of the row that belongs to the group that will be expanded.
			</param><param name="groupLevel">
			The level of the group that will be expanded.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.ExpandAll">
            <summary>
			Expands all groups.
			</summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.ExpandAllChildren(System.Int32,System.Int32)">
            <summary>
			Expand a group and all child groups beneath it.
			</summary><param name="rowNumber">
			The number of the row that belongs to the group that will be expanded.
			</param><param name="groupLevel">
			The level of the group that will be expanded.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.ExpandLevel(System.Int32)">
            <summary>
			Expand all groups within the specified group level.
			</summary><param name="level">
			The level of the groups that will be expanded.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.Filter">
            <summary>Moves rows that do not match the current filter expression from the Primary buffer to the Filter buffer. 
      </summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>When the <see cref="M:Sybase.DataWindow.DataWindowChild.Retrieve(System.Data.DataTable)"/> method retrieves rows
         into the DataWindow, it automatically uses the current filter (which may be part of the definition of the DataWindow object). You only need to call this method after changing 
         the filter expression with <see cref="M:Sybase.DataWindow.DataWindowChild.SetFilter(System.String)"/> or <see cref="M:Sybase.DataWindow.DataWindowControl.FilterDialog"/> or if the data has changed because of processing or user input.</para>
				<para>When you filter a DataWindow with groups, you should call <see cref="M:Sybase.DataWindow.DataWindowChild.CalculateGroups"/> after calling <b>Filter</b>.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetFilter(System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.FilterDialog"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.FindRow(System.String,System.Int32,System.Int32)">
            <summary>Finds the next row in a DataWindow which meets the specified condition. 
      </summary><returns>The number of the first row between <i>BeginRow</i> and <i>EndRow</i> that meets the search criteria, or 0 if there are no such rows.
         </returns><param name="Expression">A string whose value is a boolean expression to be used as the 
         search criteria.</param><param name="BeginRow">The row number at which to begin the search.</param><param name="EndRow">The row number at which to end the search.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>BeginRow</i> or <i>EndRow</i> is less than zero.</exception><exception cref="T:Sybase.DataWindow.InvalidExpressionException">
				<i>Expression</i> is not valid DataWindow expression syntax.</exception><exception cref="T:System.ArgumentNullException">
				<i>Expression</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The search is case sensitive.</para>
				<para>To search backwards, make <i>EndRow</i> less than <i>BeginRow</i>. Beware of creating an endless loop, which can occur if you are searching for all occurrences within a DataWindow and the last 
         row satisfies the search criteria. To solve this problem, you can make <i>EndRow</i> 1 greater than the number of rows, or exit the search loop when the current 
         row (<i>BeginRow</i> for that iteration of the loop) is greater than the row count.</para>
				<para>If the 
         text you want to find includes quotes, you must treat the nested quote as doubly nested; therefore, you cannot simply alternate double and 
         single quotes, as you can in most strings. For example, to find the name O'Neil, <i>Expression</i> can be:
         <c>"O~~~'Neil"</c> (3 tildes and single quote) or <c>"O~~~~~"Neil"</c> (5 tildes and double quote) but not <c>"O'Neil"</c> or 
         <c>"O~"Neil"</c>.</para>
			</remarks><example>This example finds the first row where the employee salary is greater than 50,000:
         <code>RowNumber = dwStatus.FindRow("emp_salary &gt; 50000", 1, dwStatus.RowCount)</code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.FindGroupChange(System.Int32,System.Int16)">
            <summary>Searches for the next break (change in value) within the specified group. 
      </summary><returns>The row number beginning the next grouping within the level specified by <i>GroupLevel</i>, or 0 if no such row.
         </returns><param name="RowNumber">The row number at which you want to begin searching for the next group break.</param><param name="GroupLevel">The level of the group in which you are searching for the next break. </param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:System.ArgumentOutOfRangeException">
				<i>GroupLevel</i> is less than 0.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>If <i>RowNumber</i> begins a new grouping at <i>GroupLevel</i>, then that row is the one returned. 
         To continue searching for subsequent breaks, increment the starting row so that the search resumes with 
         the next row in the group. 
      </remarks><example>This statement searches for the first break in group 2 within <c>dwRegions</c> that occurs at or after row 5:
         <code>RowNumOfNextBreak = dwRegions.FindGroupChange(5, 2)</code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetChild(System.String)">
            <summary>Provides a reference to a DropDownDataWindow or to a report in a composite DataWindow. 
      </summary><returns>A DataWindowChild object.</returns><param name="ChildName">The name of a column with a DropDownDataWindow edit style or of a report in a composite DataWindow.</param><exception cref="T:Sybase.DataWindow.ChildNotFoundException">
				<i>ChildName</i> is not a DropDownDataWindow column or a report.</exception><exception cref="T:System.ArgumentNullException">
				<i>ChildName</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>A report is a read-only DataWindow 
         that is part of a composite DataWindow object. When you define a composite 
         DataWindow in DataWindow Designer, each report is given a name. You can see the name in the Name 
         option of the Properties view. You must use the report name (not the name of the DataWindow object 
         in which the report has been placed) when calling <b>GetChild</b>.</para>
				<para>Use <b>GetChild</b> when you need to explicitly retrieve data for a DropDownDataWindow or a report. Although 
         the DataWindow server automatically retrieves data for the DropDownDataWindow or report when the main DataWindow 
         is displayed, you need to explicitly retrieve data when there are retrieval arguments or when 
         conditions change and you want to retrieve new rows.</para>
				<para>You cannot use <b>GetChild</b> to get a reference to a report in a composite DataWindow when the report 
         itself is a composite or nested DataWindow.</para>
				<para>Changing certain property values using the <see cref="M:Sybase.DataWindow.DataWindowChild.Modify(System.String)"/> or <see cref="M:Sybase.DataWindow.DataWindowChild.SetProperty(System.String,System.String)"/> methods can cause the 
				reference returned by <b>GetChild</b> to 
         become invalid. Best practices dictate calling <b>GetChild</b> again after such changes.</para>
			</remarks><example>In a composite DataWindow there are two reports: orders and current inventory. The orders report 
         has a retrieval argument for selecting the order status. This report will display open orders. The composite 
         DataWindow is displayed in a DataWindow control called <c>dwNews</c>, and the reports are named <c>orders</c> and 
         <c>current_inv</c>. The following code in the Load event of the form that contains <c>dwNews</c> provides a retrieval 
         argument for <c>orders</c>.<code>
         Dim dwcOrders as Sybase.DataWindow.DataWindowChild
         Try
            dwcOrders = dwNews.GetChild("orders")
            dwcOrders.SetTransaction(myTrans)
            dwcOrders.Retrieve("open")
         Catch NoSuchChild As Sybase.DataWindow.ChildNotFoundException
            ' handle condition where order is not a valid child DataWindow
         Catch DbException As Sybase.DataWindow.DbErrorException
            ' handle database retrieval error
         End Try
         </code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetColumnObjectByNumber(System.Int16)">
            <summary>Returns a column within the DataWindow.</summary><returns>An instance of the <see cref="T:Sybase.DataWindow.GraphicObjectColumn"/> class representing the column.</returns><param name="ColumnNumber">The number of the column to be returned.</param><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is not valid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<see cref="T:Sybase.DataWindow.GraphicObjectColumn"/> is an abstract class, and the actual value returned will be:</para>
				<list type="bullet">
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectBlobColumn"/> for an OLE-Blob column,</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectComputedColumn"/> for a computed column, or</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectEditableColumn"/> for a database column.</item>
				</list>
				<para>After narrowing the returned object to one of these classes, you can access some of the more common properties of the object such as format, border style, X and Y coordinates, and colors.
				Additionally, you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.Modify(System.String)"/> or <see cref="M:Sybase.DataWindow.DataWindowChild.SetProperty(System.String,System.String)"/> methods to modify properties that are not exposed by the <see cref="T:Sybase.DataWindow.GraphicObject"/> classes.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowChild.GetObjectByName(System.String)"/> method to get any control on a DataWindow, including a column,
				 when you know the name of that control.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetObjectByName(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetColumnValidation(System.String)">
            <summary>Obtains the validation rule for a DataWindow column given the column name.
      </summary><returns>The validation rule for the column, or an empty string ("")
         if no validation rule is defined for the column.</returns><param name="ColumnName">The name of the column for which you want the validation rule.</param><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>You can use <b>GetColumnValidation</b> to save the current validation rule before calling <see cref="M:Sybase.DataWindow.DataWindowChild.SetColumnValidation(System.Int16,System.String)"/> to change 
         the rule temporarily.
      </remarks><example>These statements save the validation rule for the <c>salary</c> column in the DataWindowControl <c>dwEmp</c> in 
         the string <c>Rule1</c> and set the new validation rule to the string <c>Rule2</c>:
         <code>
         Dim Rule1 as String
         Dim Rule2 as String
         ' ...
         Rule1 = dwEmp.GetColumnValidation("salary")
         dwEmp.SetColumnValidation("salary", Rule2)
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetColumnValidation(System.Int16,System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetColumnValidation(System.Int16)">
            <overloads>Obtains the validation rule for a DataWindow column.</overloads><summary>Obtains the validation rule for a DataWindow column given the column number.
      </summary><returns>The validation rule for the column, or an empty string ("")
         if no validation rule is defined for the column.</returns><param name="ColumnNumber">The column number for which you want the validation rule.</param><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>You can use <b>GetColumnValidation</b> to save the current validation rule before calling <see cref="M:Sybase.DataWindow.DataWindowChild.SetColumnValidation(System.Int16,System.String)"/> to change 
         the rule temporarily.
      </remarks><example>These statements save the validation rule for column 7 in the DataWindowControl <c>dwEmp</c> in 
         the string <c>Rule1</c> and set the new validation rule to the string <c>Rule2</c>:
         <code>
         Dim Rule1 as String
         Dim Rule2 as String
         ' ...
         Rule1 = dwEmp.GetColumnValidation(7)
         dwEmp.SetColumnValidation(7, Rule2)
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetColumnValidation(System.Int16,System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemDate(System.Int32,System.Int16)">
            <overloads>Gets a Date value from a DataWindow column.</overloads><summary>Gets the current Date value from a DataWindow column within a row of the Primary buffer given the column number.</summary><returns>The Date value located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.DateTime.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Date value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Date value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDate(RowNumber, ColumnNumber, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDate</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Date value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDate(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemDate(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a Date value from a DataWindow column given the column number.</summary><returns>The original or current Date value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.DateTime.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Date value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Date value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDate</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Date value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDate(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemDate(System.Int32,System.String)">
            <summary>Gets the current Date value from a DataWindow column within a row of the Primary buffer given the column name.</summary><returns>The Date value located at <i>RowNumber</i> and <i>ColumnName</i> as a System.DateTime.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Date value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Date value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDate(RowNumber, ColumnName, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDate</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Date value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDate(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemDate(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a Date value from a DataWindow column given the column name.</summary><returns>The original or current Date value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.DateTime.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Date value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Date value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDate</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Date value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDate(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemDateTime(System.Int32,System.Int16)">
            <overloads>Gets a DateTime value from a DataWindow column.</overloads><summary>Gets the current DateTime value from a DataWindow column within a row of the Primary buffer given the column number. 
      </summary><returns>The DateTime located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.DateTime.
				<note>The DataWindow DateTime datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemDateTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The DateTime value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a DateTime value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDateTime(RowNumber, ColumnNumber, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDateTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the DateTime value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDate(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a DateTime value from a DataWindow column given the column number.
      </summary><returns>The DateTime located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.DateTime.
				<note>The DataWindow DateTime datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemDateTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The DateTime value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a DateTime value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDateTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the DateTime value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDate(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemDateTime(System.Int32,System.String)">
            <summary>Gets the current DateTime value from a DataWindow column within a row of the Primary buffer given the column name.
      </summary><returns>The DateTime located at <i>RowNumber</i> and <i>ColumnName</i> as a System.DateTime.
				<note>The DataWindow DateTime datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemDateTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The DateTime value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a DateTime value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDateTime(RowNumber, ColumnName, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDateTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the DateTeime value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDate(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a DateTime value from a DataWindow column given the column name.</summary><returns>The DateTime located at <i>RowNumber</i> and <i>ColumnName</i> as a System.DateTime.
				<note>The DataWindow DateTime datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemDateTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The DateTime value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a DateTime value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDateTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the DateTime value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDate(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <overloads>Gets a Date, Time, or DateTime value from a DataWindow column.</overloads><summary>Gets a Date, Time, or DateTime value from a DataWindow column given the column number.</summary><returns>The Date, Time, or DateTime value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlDateTime. 				<note>The DataWindow DateTime datatype stores fractional seconds to microsecond precision; the .NET System.Data.SqlTypes.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemSqlDateTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Date, Time, or DateTime value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>When the DataWindow column has a Date type, the resulting SqlDateTime variable will contain 00:00:00 as its time element.  When the DataWindow column has a Time type, the resulting SqlDateTime variable will contain the current date as its date element.</para>
				<para>In contrast to <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemDateTime(System.Int32,System.Int16)"/>, <b>GetItemSqlDateTime</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlDateTime.IsNull"/> property of the returned SqlDateTime structure.</para>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDate(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <overloads/><summary>Gets a Date, Time, or DateTime value from a DataWindow column given the column name.</summary><returns>The Date, Time, or DateTime value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlDateTime. 				<note>The DataWindow DateTime datatype stores fractional seconds to microsecond precision; the .NET System.Data.SqlTypes.SqlDateTime datatype stores only to millisecond precision. As a result, <b>GetItemSqlDateTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Date, Time, or DateTime value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>When the DataWindow column has a Date type, the resulting SqlDateTime variable will contain 00:00:00 as its time element.  When the DataWindow column has a Time type, the resulting SqlDateTime variable will contain the current date as its date element.</para>
				<para>In contrast to <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemDateTime(System.Int32,System.Int16)"/>, <b>GetItemSqlDateTime</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlDateTime.IsNull"/> property of the returned SqlDateTime structure.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDate(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemDecimal(System.Int32,System.Int16)">
            <overloads>Gets a Decimal value from a DataWindow column.</overloads><summary>Gets the current Decimal value from a DataWindow column within a row of the Primary buffer given the column number.       </summary><returns>The Decimal value located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.Decimal.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Decimal value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Decimal value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDecimal(RowNumber, ColumnNumber, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDecimal</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Decimal value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDecimal(System.Int32,System.Int16,System.Decimal)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemDecimal(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a Decimal value from a DataWindow column given the column number.      </summary><returns>The original or current Decimal value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.Decimal.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Decimal value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Decimal value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDecimal</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Decimal value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDecimal(System.Int32,System.Int16,System.Decimal)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemDecimal(System.Int32,System.String)">
            <summary>Gets the current Decimal value from a DataWindow column within a row of the Primary buffer given the column name.      </summary><returns>The Decimal value located at <i>RowNumber</i> and <i>ColumnName</i> as a System.Decimal.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Decimal value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Decimal value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDecimal(RowNumber, ColumnName, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDecimal</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Decimal value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDecimal(System.Int32,System.Int16,System.Decimal)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a Decimal value from a DataWindow column given the column name.      </summary><returns>The original or current Decimal value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.Decimal.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Decimal value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Decimal value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDecimal</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Decimal value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDecimal(System.Int32,System.Int16,System.Decimal)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <overloads/><summary>Gets a Decimal value from a DataWindow column given the column name.</summary><returns>The Decimal value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlDecimal.		</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Decimal value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In contrast to <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemDecimal(System.Int32,System.Int16)"/>, <b>GetItemSqlDecimal</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlDecimal.IsNull"/> property of the returned SqlDecimal structure.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDecimal(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDecimal(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <overloads>Gets a Decimal value from a DataWindow column.</overloads><summary>Gets a Decimal value from a DataWindow column given the column number.</summary><returns>The Decimal value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlDecimal.			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Decimal value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In contrast to <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemDecimal(System.Int32,System.Int16)"/>, <b>GetItemSqlDecimal</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlDecimal.IsNull"/> property of the returned SqlDecimal structure.</para>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDecimal(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemDouble(System.Int32,System.Int16)">
            <overloads>Gets an integer or floating point value from a DataWindow column.</overloads><summary>Gets the current integer or floating point value from a DataWindow column within a row of the Primary buffer given the column number. </summary><returns>The value located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.Double.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain an integer or floating point value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDouble(RowNumber, ColumnNumber, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDouble</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDouble(System.Int32,System.Int16,System.Double)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemDouble(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets an integer or floating point value from a DataWindow column given the column number.      </summary><returns>The original or current value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.Double.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain an integer or floating point value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDouble</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDouble(System.Int32,System.Int16,System.Double)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemDouble(System.Int32,System.String)">
            <summary>Gets the current integer or floating point value from a DataWindow column within a row of the Primary buffer given the column name.      </summary><returns>The value located at <i>RowNumber</i> and <i>ColumnName</i> as a System.Double.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain an integer or floating point value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemDouble(RowNumber, ColumnName, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDouble</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDouble(System.Int32,System.Int16,System.Double)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets an integer or floating point value from a DataWindow column given the column name.      </summary><returns>The original or current value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.Double.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain an integer or floating point value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemDouble</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDouble(System.Int32,System.Int16,System.Double)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets an integer or floating point value from a DataWindow column given the column name.</summary><returns>The value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlDouble.		</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain an integer or floating point value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In contrast to <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemDouble(System.Int32,System.Int16)"/>, <b>GetItemSqlDouble</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlDouble.IsNull"/> property of the returned SqlDouble structure.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDouble(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDouble(System.Int32,System.String,System.Data.SqlTypes.SqlDouble)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDouble(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <overloads>Gets an integer or floating point value from a DataWindow column.</overloads><summary>Gets an integer or floating point value from a DataWindow column given the column number.
      </summary><returns>The value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlDouble.			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain an integer or floating point value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In contrast to <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemDouble(System.Int32,System.Int16)"/>, <b>GetItemSqlDouble</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlDouble.IsNull"/> property of the returned SqlDouble structure.</para>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDouble(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDouble(System.Int32,System.String,System.Data.SqlTypes.SqlDouble)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer)">
            <overloads>Reports the modification status of a DataWindow column in a specific row.</overloads><summary>Reports the modification status of a DataWindow column in a specific row, given the column number.</summary><returns>The <see cref="T:Sybase.DataWindow.ItemStatus"/>.</returns><param name="RowNumber">The row number containing the column of interest.</param><param name="ColumnNumber">The column number for which you want the modification status.</param><param name="Buffer">The DataWindow buffer containing the row and column for which you want to get the status.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>Use <b>GetItemStatus</b> to understand what SQL statements will be generated for new and changed information when you update 
         the database. <see cref="M:Sybase.DataWindow.DataWindowChild.UpdateData"/> generates a SQL UPDATE statement for rows that have columns with an ItemStatus of Modified. The columns themselves
         are included in the SET clause of the UPDATE statement.
 </remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.ItemStatus)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemStatus(System.Int32,System.String,Sybase.DataWindow.DataBuffer)">
            <summary>Reports the modification status of a DataWindow column in a specific row, given the column name.</summary><returns>The <see cref="T:Sybase.DataWindow.ItemStatus"/>.</returns><param name="RowNumber">The row number containing the column of interest.</param><param name="ColumnName">The name of the column for which you want the modification status.</param><param name="Buffer">The DataWindow buffer containing the row and column for which you want to get the status.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>Use <b>GetItemStatus</b> to understand what SQL statements will be generated for new and changed information when you update 
         the database. <see cref="M:Sybase.DataWindow.DataWindowChild.UpdateData"/> generates a SQL UPDATE statement for rows that have columns with an ItemStatus of Modified. The columns themselves
         are included in the SET clause of the UPDATE statement.
         </remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.ItemStatus)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemString(System.Int32,System.Int16)">
            <overloads>Gets a String value from a DataWindow column.</overloads><summary>Gets the current String value from a DataWindow column within a row of the Primary buffer given the column number. </summary><returns>The value located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.String.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The String value is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemString(RowNumber, ColumnNumber, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>You can use <b>GetItemString</b> for columns of any datatype. If the column type is not a string, the return value is a string representation of the data with the column format applied.  If <i>ColumnNumber</i>'s datatype is string, any assigned format string is not applied and the raw data is returned.</para>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemString</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemString(System.Int32,System.Int16,System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemString(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a String value from a DataWindow column given the column number.      </summary><returns>The original or current value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.String.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The String value is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>You can use <b>GetItemString</b> for columns of any datatype. If the column type is not a string, the return value is a string representation of the data with the column format applied.  If <i>ColumnNumber</i>'s datatype is string, any assigned format string is not applied and the raw data is returned.</para>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemString</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Double value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemString(System.Int32,System.Int16,System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemString(System.Int32,System.String)">
            <summary>Gets the current String value from a DataWindow column within a row of the Primary buffer given the column name.     
      </summary><returns>The value located at <i>RowNumber</i> and <i>ColumnName</i> as a System.String.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The String value is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemString(RowNumber, ColumnName, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>You can use <b>GetItemString</b> for columns of any datatype. If the column type is not a string, the return value is a string representation of the data with the column format applied.  If <i>ColumnName</i>'s type is a string, any assigned format string is not applied and the raw data is returned, unless <i>ColumnName</i> is a computed column, in which case the format is applied.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemString</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemString(System.Int32,System.Int16,System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a String value from a DataWindow column given the column name.      </summary><returns>The original or current value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.String.</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The String value is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>You can use <b>GetItemString</b> for columns of any datatype. If the column type is not a string, the return value is a string representation of the data with the column format applied.  If <i>ColumnName</i>'s type is a string, any assigned format string is not applied and the raw data is returned, unless <i>ColumnName</i> is a computed column, in which case the format is applied.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemString</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemString(System.Int32,System.Int16,System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a String value from a DataWindow column given the column name.</summary><returns>The String value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlString.		</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In contrast to <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemString(System.Int32,System.Int16)"/>, <b>GetItemSqlString</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlString.IsNull"/> property of the returned SqlString structure.</para>
				<para>You can use <b>GetItemSqlString</b> for columns of any datatype. If the column type is not a string, the return value is a string representation of the data with the column format applied.  If <i>ColumnName</i>'s datatype is a string, any assigned format string is not applied and the raw data is returned, unless <i>ColumnName</i> is a computed column, in which case the format is applied.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemString(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemSqlString(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <overloads>Gets a String value from a DataWindow column.</overloads><summary>Gets a String value from a DataWindow column given the column number.
      </summary><returns>The String value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.Data.SqlTypes.SqlString.			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c>	to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In contrast to <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemString(System.Int32,System.Int16)"/>, <b>GetItemSqlString</b> supports the return of null values from DataWindow columns. Whether the returned value is null can be determined by examining the <see cref="P:System.Data.SqlTypes.SqlString.IsNull"/> property of the returned SqlString structure.</para>
				<para>You can use <b>GetItemSqlString</b> for columns of any datatype. If the column type is not a string, the return value is a string representation of the data with the column format applied.  If <i>ColumnNumber</i>'s datatype is a string, any assigned format string is not applied and the raw data is returned.</para>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemString(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemTime(System.Int32,System.Int16)">
            <overloads>Gets a Time value from a DataWindow column. </overloads><summary>Gets the current Time value from a DataWindow column within a row of the Primary buffer given the column number.
      </summary><returns>The Time value located at <i>RowNumber</i> and <i>ColumnNumber</i> as a System.DateTime.<note>The DataWindow Time datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Time value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Time value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemTime(RowNumber, ColumnNumber, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Time value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a Time value from a DataWindow column given the column number.      </summary><returns>The original or current Time value located at <i>RowNumber</i> and <i>ColumnNumber</i> in <i>Buffer</i> as a System.DateTime.<note>The DataWindow Time datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnNumber">The column number containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Time value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not contain a Time value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<i>ColumnNumber</i> reflects the ordering of the DataWindow source columns as seen in the Column Specification pane in DataWindow Designer. 
				If the ordering of the source data
				of the DataWindow changes, the column numbers will also change.  Additionally, computed columns have
				no associated column number, so use the overloaded version of this method that accepts a column name instead.</para>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Time value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemTime(System.Int32,System.String)">
            <summary>Gets the current Time value from a DataWindow column within a row of the Primary buffer given the column name.   
      </summary><returns>The Time value located at <i>RowNumber</i> and <i>ColumnName</i> as a System.DateTime.<note>The DataWindow Time datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Time value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Time value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This version of the method returns the current data in the Primary buffer.  It is equivalent to:</para>
				<code>GetItemTime(RowNumber, ColumnName, Sybase.DataWindow.DataBuffer.Primary, false)</code>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Time value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetItemTime(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Gets a Time value from a DataWindow column given the column name.  
      </summary><returns>The original or current Time value located at <i>RowNumber</i> and <i>ColumnName</i> in <i>Buffer</i> as a System.DateTime.<note>The DataWindow Time datatype stores fractional seconds to microsecond precision; the .NET System.DateTime datatype stores only to millisecond precision. As a result, <b>GetItemTime</b> may result in a loss of data precision.</note>
			</returns><param name="RowNumber">The row number containing the value.</param><param name="ColumnName">The name of the column containing the value.</param><param name="Buffer">The DataWindow buffer from which you want to get the value.</param><param name="OriginalData">
				<c>false</c> to obtain the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to obtain the value before any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.Data.SqlTypes.SqlNullValueException">The Time value is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not contain a Time value.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use the <see cref="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)"/> method to test for null values before executing <b>GetItemTime</b>; otherwise, you may 
				encounter a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>. Alternatively, you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/> method, which
				can accommodate null values.</para>
				<para>In a DataWindowControl, to find out what the user entered in the current column 
				before that data is accepted into the Primary buffer, use <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>. 
				In the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> events, 
				use the Data property of the associated event argument class to determine the Time value of interest.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDateTime(System.Int32,System.Int16)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemTime(System.Int32,System.Int16,System.DateTime)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.FindNextModifiedRow(System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Reports the next row that has been modified in the specified buffer. 
      </summary><returns>The number of the first modified row in <i>Buffer</i> after <i>RowNumber</i>, or 0 if there is no such row.</returns><param name="RowNumber">The number of the row after which to begin the search. Use a value of 0 to search from the beginning.</param><param name="Buffer">The DataWindow buffer in which to search.</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>FindNextModifiedRow</b> reports rows with a <see cref="T:Sybase.DataWindow.RowStatus"/> of 
         NewAndModified and Modified.</para>
				<para>The search begins in the row after the value you specify in <i>RowNumber</i>. 
         This is different from the behavior of <see cref="M:Sybase.DataWindow.DataWindowChild.FindRow(System.String,System.Int32,System.Int32)"/>, <see cref="M:Sybase.DataWindow.DataWindowChild.FindGroupChange(System.Int32,System.Int16)"/>, and <see cref="M:Sybase.DataWindow.DataWindowControl.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)"/>, which begin searching in the row you specify.</para>
			</remarks><example>These C# statements count the number or rows that were modified in the Primary buffer of <c>dwStatus</c>
         and then display a message reporting the number modified (thus reporting the same value as the <see cref="P:Sybase.DataWindow.DataWindowChild.ModifiedCount"/> property):
         <code>
         int NbrRows, rowNum, count;
         
         dwStatus.AcceptText();
         NbrRows = dwStatus.RowCount;
         count = 0;
         rowNum = 0;
         do 
         {
            rowNum = dwStatus.FindNextModifiedRow(rowNum, Sybase.DataWindow.DataBuffer.Primary);
         
            if (rowNum &gt; 0) 
              count = count + 1;
            else
              rowNum = NbrRows;
         }
         while (rowNum &lt; NbrRows);
         
         MessageBox.Show(count.ToString() + " rows were modified.", "Modified Count");	
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.FindRow(System.String,System.Int32,System.Int32)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetObjectByName(System.String)">
            <summary>Returns a named control within the DataWindow object.</summary><returns>An instance of <see cref="T:Sybase.DataWindow.GraphicObject"/> representing the named control.</returns><param name="Name">The name of the control (e.g., column, button, text) within the DataWindow object.</param><exception cref="T:System.ArgumentNullException">
				<i>Name</i> is null.</exception><exception cref="T:System.ArgumentException">
				<i>Name</i> is not a valid control within the DataWindow object.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In most cases, you will need to cast the return value to the specific <see cref="T:Sybase.DataWindow.GraphicObject"/> descendant, namely: </para>
				<list type="bullet">
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectButton"/>
					</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectText"/>
					</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectPicture"/>
					</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectReport"/>
					</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectBlobColumn"/>
					</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectComputedColumn"/>
					</item>
					<item>
						<see cref="T:Sybase.DataWindow.GraphicObjectEditableColumn"/>
					</item>
				</list>
				<para>After narrowing the reference, you can directly modify some of the more common properties of the object
         such as format, border style, X and Y coordinates, and colors.  You can modify other properties not exposed in a <see cref="T:Sybase.DataWindow.GraphicObject"/> class using the <see cref="M:Sybase.DataWindow.DataWindowChild.Modify(System.String)"/> or <see cref="M:Sybase.DataWindow.DataWindowChild.SetProperty(System.String,System.String)"/> methods.</para>
				<para>To obtain a column object by the number of
         the column, use <see cref="M:Sybase.DataWindow.DataWindowChild.GetColumnObjectByNumber(System.Int16)"/>.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetColumnObjectByNumber(System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetProperty(System.String)">
            <summary>Returns a property value for a control within a DataWindow object.</summary><returns>The property value as a string.</returns><param name="Syntax">The DataWindow object property.</param><exception cref="T:System.ArgumentNullException">
				<i>Syntax</i> is null.</exception><exception cref="T:System.ArgumentException">
				<i>Syntax</i> is not a valid property.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>
				<para>This method can be used in lieu of <see cref="M:Sybase.DataWindow.DataWindowChild.Describe(System.String)"/> whenever a single property value is desired. It can also be used to obtain property values not exposed by the <see cref="T:Sybase.DataWindow.GraphicObject"/> classes.</para>
				<para>See the <i>DataWindow .NET Programmer's Guide</i> for a complete list of DataWindow object properties that can be used with <b>GetProperty</b>
				</para>
			</remarks><example>This C# code gets the value of a property in a DataWindow object when the user selects 
         an object type (such as a label or a column) and an attribute (such as <c>color</c> or <c>font.face</c>) from 
         two list boxes:
         <code>
         string strObject, strAttr, strValue;
         
         strObject = (string)lbObjects.SelectedItem;
         strAttr = (string)lbAttributes.SelectedItem;
         
         strValue = DW1.GetProperty(strObject + "." + strAttr);
         
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetProperty(System.String,System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.Describe(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetRowFromRowId(System.Int32)">
            <overloads>Gets a row number given the unique row identifier associated with that row. </overloads><summary>Gets the number of a row in the Primary buffer given the unique row identifier associated with that row. 
      </summary><returns>The row number.</returns><param name="RowId">The row identifier for which you want the associated row number.</param><exception cref="T:System.ArgumentException">
				<i>RowId</i> is not a valid row identifier, or the row is no longer in the Primary buffer.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>This method allows you to use a unique row identifier to obtain the current row number position within the Primary buffer. 
			The row identifier is not affected by operations such as 
         Insert, Delete, Filter, or Sort that may change the original order - and consequently the row numbers.
      </remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetRowIdFromRow(System.Int32)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetRowFromRowId(System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Gets the number of a row in the specified buffer given the unique row identifier associated with that row. 
      </summary><returns>The row number.</returns><param name="RowId">The row identifier for which you want the associated row number.</param><param name="Buffer">The DataWindow buffer containing the row.</param><exception cref="T:System.ArgumentException">
				<i>RowId</i> is not a valid row identifier, or the row is no longer in the <i>Buffer</i>.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>This method allows you to use a unique row identifier to obtain the current row number position within the Primary buffer. 
			The row identifier is not affected by operations such as 
         Insert, Delete, Filter, or Sort that may change the original order - and consequently the row numbers.
      </remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetRowIdFromRow(System.Int32)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetRowIdFromRow(System.Int32)">
            <overloads>Gets a unique row identifier for a given row. </overloads><summary>Gets a unique row identifier for the given row in the Primary buffer.</summary><returns>The unique row identifier.</returns><param name="RowNumber">The number of the row for which you want a unique row identifier.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not a valid row in the Primary buffer.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>The row identifier value is not the same as the row number value used by many DataWindow .NET
         methods. First 
         convert the unique row identifier into a row number by calling <see cref="M:Sybase.DataWindow.DataWindowChild.GetRowFromRowId(System.Int32)"/>.
      </remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetRowFromRowId(System.Int32)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetRowIdFromRow(System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Gets a unique row identifier for the given row in the specified buffer.</summary><returns>The unique row identifier.</returns><param name="RowNumber">The number of the row for which you want a unique row identifier.</param><param name="Buffer">The DataWindow buffer containing the row for which you want the unique identifier.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not a valid row in <i>Buffer</i>.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>The row identifier value is not the same as the row number value used by many DataWindow .NET
         methods. First 
         convert the unique row identifier into a row number by calling <see cref="M:Sybase.DataWindow.DataWindowChild.GetRowFromRowId(System.Int32)"/>.
      </remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetRowFromRowId(System.Int32)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Reports the modification status of a row in a DataWindow.
      </summary><returns>The <see cref="T:Sybase.DataWindow.RowStatus"/>.</returns><param name="RowNumber">The row number for which you want the status.</param><param name="Buffer">The DataWindow buffer containing the row.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>Use <b>GetRowStatus</b> to understand what SQL statements will be generated when you update the database. 
			For rows in the Primary and Filter buffers, <see cref="M:Sybase.DataWindow.DataWindowChild.UpdateData"/>
         generates:
         <list type="bullet">
					<item>an INSERT statement for rows in the Primary and Filter buffers with the NewAndModified status;</item>
					<item>an UPDATE statement for rows in the Primary and Filter buffers with Modified status.  The generated
					SQL statement includes the columns that have an
					<see cref="T:Sybase.DataWindow.ItemStatus"/> of Modified within the SET clause; and</item>
					<item> a DELETE statement for rows in the Delete buffer that have a status of Modified or NotModified. 
					New and NewAndModified rows do not exist yet in the database;
         therefore, there is nothing to actually delete.</item>
				</list>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.RowStatus)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetSqlSelect">
            <summary>Returns the SQL SELECT statement that is the data source of a DataWindow.</summary><returns>A string containing the SQL SELECT statement that is the source of the DataWindow, 
			or an empty string ("") if the data source is not a SELECT statement.</returns><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>
				<para>When you want to change the SQL SELECT statement for a DataWindow or DataStore at runtime
         you can use <b>GetSqlSelect</b> to save the current SELECT statement before making the change.</para>
				<para>When you 
         define a DataWindow object graphically in DataWindow Designer, a special SELECT statement (called a 
         PBSELECT statement) is stored with the DataWindow object.  This database-vendor independent syntax is
         translated to native SQL when a connected <see cref="T:Sybase.DataWindow.Transaction"/> or 
         <see cref="T:Sybase.DataWindow.AdoTransaction"/>
         has been associated with the DataWindowControl or DataStore via the <see cref="M:Sybase.DataWindow.DataWindowChild.SetTransaction(Sybase.DataWindow.AdoTransaction)"/> method.  If there is no
         associated connection when <b>GetSqlSelect</b> is invoked, the PBSELECT syntax is returned.
         </para>
				<para>
					<b>GetSqlSelect</b> is equivalent to the following:
				<list type="bullet">
						<item>GetProperty("datawindow.table.select")</item>
						<item>Describe("datawindow.table.select")</item>
					</list>
				</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetSqlSelect(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.CalculateGroups">
            <summary>Recalculates the breaks in the grouping levels in a DataWindow. 
      </summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>Use <b>CalculateGroups</b> to force the DataWindow object to recalculate the breaks in the 
         grouping levels after you have added or modified rows in a DataWindow. <b>CalculateGroups</b> does not 
         sort the data before it recalculates the breaks; therefore, unless you populated the DataWindow 
         in a sorted order, call the <see cref="M:Sybase.DataWindow.DataWindowChild.Sort"/> method to sort the data before you call <b>CalculateGroups</b>. 
      </remarks><example>This code imports new rows from a file into the DataWindow <c>dwEmp</c> and recalculates 
         the group breaks after applying the default sort ordering stored as part of the DataWindow object:
         <code>
         dwEmp.ImportFile("d:\employee.txt", Sybase.DataWindow.FileSaveAsType.Text)
         dwEmp.Sort()
         dwEmp.CalculateGroups()
         dwEmp.Refresh()
         </code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.ImportClipboard(Sybase.DataWindow.FileSaveAsType)">
            <overloads>Inserts text data from the clipboard into a DataWindow.</overloads><summary>Inserts comma-separated, tab-separated, or XML data from the clipboard into a DataWindow.</summary><returns>The number of rows that were imported.</returns><param name="ImportType">The text format, either Csv, Text, and Xml.</param><exception cref="T:System.ArgumentException">
				<i>ImportType</i> is not Csv, Text or Xml.</exception><exception cref="T:System.InvalidOperationException">Data in one of the columns has an incompatible datatype.</exception><exception cref="T:System.NotSupportedException"><b>ImportClipboard</b> is not supported for crosstab and composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The clipboard data must be formatted in tab-separated (Text) or comma-separated (Csv) columns or as 
         XML. The datatypes and order of the DataWindow object's columns must match the data on the 
         clipboard.</para>
				<para>If an XML or comma-separated column contains a leading double quote, it is assumed to be part of 
         the column value. A leading double quote has to be closed to mark the end of an item.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.ImportString(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.ImportClipboard(Sybase.DataWindow.FileSaveAsType,System.Int32,System.Int32,System.Int16,System.Int16,System.Int16)">
            <summary>Inserts comma-separated, tab-separated, or XML data from the clipboard into a DataWindow.
      </summary><returns>The number of rows that were imported.</returns><param name="ImportType">The text format, either Csv, Text, or Xml.</param><param name="StartRow">The number of the first row in the clipboard that you want to copy.</param><param name="EndRow">The number of the last row in the clipboard that you want to copy. </param><param name="StartCol">The number of the first column in the clipboard that you want to copy. </param><param name="EndCol">The number of the last column in the clipboard that you want to copy. </param><param name="dwStartCol">The number of the first column in the DataWindow that you want to receive data. </param><exception cref="T:System.ArgumentException">
				<i>ImportType</i> is not Csv, Text or Xml.</exception><exception cref="T:System.InvalidOperationException">Data in one of the columns has an incompatible datatype.</exception><exception cref="T:System.NotSupportedException"><b>ImportClipboard</b> is not supported for crosstab and composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The clipboard data must be formatted in tab-separated (Text) or comma-separated (Csv) columns or as 
         XML. The datatypes and order of the DataWindow object's columns must match the data on the 
         clipboard.</para>
				<para>
					<b>StartCol</b> and <b>EndCol</b> control the number of imported columns and the number of 
         columns in the DataWindow that are affected. <b>dwStartCol</b> specifies the first 
         DataWindow column to be affected. The last column to be affected can be calculated as:
         <c>dwStartCol + (EndCol - StartCol)</c>
				</para>
				<para>If an XML or comma-separated column contains a leading double quote, it is assumed to be part of 
         the column value. A leading double quote has to be closed to mark the end of an item.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.ImportString(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)">
            <overloads>Inserts data from a text file into a DataWIndow.</overloads><summary>Inserts comma-separated, tab-separated, or XML data from a file into a DataWindow.</summary><returns>The number of rows that were imported.</returns><param name="FileName">The name of the file from which to import the rows.</param><param name="ImportType">The file format, either Csv, Text, or Xml.</param><exception cref="T:System.ArgumentException">
				<i>ImportType</i> is not Csv, Text or Xml.</exception><exception cref="T:System.InvalidOperationException">Data in one of the columns has an incompatible datatype.</exception><exception cref="T:System.NotSupportedException"><b>ImportFile</b> is not supported for crosstab and composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The file should consist of rows of data. If the file includes column headings or row 
         labels, use the overloaded version of this method which allows you to skip the first row(s).</para>
				<para>The datatypes and order of the DataWindow object's columns must match the columns of data in the file.</para>
				<para>The location and number of double quote marks in a field in a tab-separated file affect how 
         they are handled when the file is imported:</para>
				<list type="bullet">
					<item>If the string is enclosed in one pair of double quotes, the quotes are discarded.</item>
					<item>If the string is enclosed in two pairs of double quotes, the first 
         pair is considered to enclose a null string, and the rest of the string is discarded. </item>
					<item>If the string is enclosed in three pairs of double quotes, one pair is retained 
         when the string is imported. </item>
					<item>If there 
         is a double quote at the beginning of a string, any characters after the second double quote are 
         discarded. If there is no second double quote, the tab or comma character delimiting the fields 
         is not recognized as a field separator and all characters up to the next occurrence of a double 
         quote, including a carriage return, are considered to be part of the string.</item>
					<item>Double quotes after the first character in the string are rendered literally.</item>
				</list>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.ImportClipboard(Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.ImportString(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType,System.Int32,System.Int32,System.Int16,System.Int16,System.Int16)">
            <summary>Inserts comma-separated, tab-separated, or XML data from a file into a DataWindow.</summary><returns>The number of rows that were imported.</returns><param name="FileName">The name of the file from which to import the rows.</param><param name="ImportType">The file format, either Csv, Text, or Xml.</param><param name="StartRow">The number of the first row in the file that you want to copy.</param><param name="EndRow">The number of the last row in the file that you want to copy. </param><param name="StartCol">The number of the first column in the file that you want to copy. </param><param name="EndCol">The number of the last column in the file that you want to copy.</param><param name="dwStartCol">The number of the first column in the DataWindow that you want to receive data. </param><exception cref="T:System.ArgumentException">
				<i>ImportType</i> is not Csv, Text or Xml.</exception><exception cref="T:System.InvalidOperationException">Data in one of the columns has an incompatible datatype.</exception><exception cref="T:System.NotSupportedException"><b>ImportFile</b> is not supported for crosstab and composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The file should consist of rows of data. If the file includes column headings or row 
         labels, use the overloaded version of this method which allows you to skip the first row(s).</para>
				<para>The datatypes and order of the DataWindow object's columns must match the columns of data in the file.</para>
				<para>
					<b>StartCol</b> and <b>EndCol</b> control the number of imported columns and the number of 
         columns in the DataWindow that are affected. <b>dwStartCol</b> specifies the first 
         DataWindow column to be affected. The last column to be affected can be calculated as:
         <c>dwStartCol + (EndCol - StartCol)</c>
				</para>
				<para>The location and number of double quote marks in a field in a tab-separated file affect how 
         they are handled when the file is imported:</para>
				<list type="bullet">
					<item>If the string is enclosed in one pair of double quotes, the quotes are discarded.</item>
					<item>If the string is enclosed in two pairs of double quotes, the first 
         pair is considered to enclose a null string, and the rest of the string is discarded. </item>
					<item>If the string is enclosed in three pairs of double quotes, one pair is retained 
         when the string is imported. </item>
					<item>
         If there 
         is a double quote at the beginning of a string, any characters after the second double quote are 
         discarded. If there is no second double quote, the tab or comma character delimiting the fields 
         is not recognized as a field separator and all characters up to the next occurrence of a double 
         quote, including a carriage return, are considered to be part of the string.</item>
					<item>Double quotes after the first character in the string are rendered literally.</item>
				</list>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.ImportClipboard(Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.ImportString(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.ImportString(System.String,Sybase.DataWindow.FileSaveAsType)">
            <overloads>Insert data from a string into a DataWIndow.</overloads><summary>Inserts data from comma-separated, tab-separated, or XML  string into a DataWindow.</summary><returns>The number of rows that were imported.</returns><param name="ImportString">The string containing the data.</param><param name="ImportType">The text format, either Csv, Text, or Xml.</param><exception cref="T:System.ArgumentException">
				<i>ImportType</i> is not Csv, Text or Xml.</exception><exception cref="T:System.InvalidOperationException">Data in one of the columns has an incompatible datatype.</exception><exception cref="T:System.NotSupportedException"><b>ImportString</b> is not supported for crosstab and composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The string should consist of rows of data. If the string includes column headings or row 
         labels, use the overloaded version of this method which allows you to skip the first row(s).</para>
				<para>The datatypes and order of the DataWindow object's columns must match the columns of data in the string.</para>
				<para>If an XML or comma-separated column contains a leading double quote it is assumed to be 
         part of the column value. A leading double quote has to be closed to mark the end of an item.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.ImportClipboard(Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.ImportString(System.String,Sybase.DataWindow.FileSaveAsType,System.Int32,System.Int32,System.Int16,System.Int16,System.Int16)">
            <summary>Inserts data from comma-separated, tab-separated, or XML  string into a DataWindow.</summary><returns>The number of rows that were imported.</returns><param name="ImportString">The string containing the data.</param><param name="ImportType">The text format, either Csv, Text, or Xml.</param><param name="StartRow">The number of the first row in the string that you want to copy.</param><param name="EndRow">The number of the last row in the string that you want to copy. </param><param name="StartCol">The number of the first column in the string that you want to copy. </param><param name="EndCol">The number of the last column in the string that you want to copy.</param><param name="dwStartCol">The number of the first column in the DataWindow that you want to receive data. </param><exception cref="T:System.ArgumentException">
				<i>ImportType</i> is not Csv, Text or Xml.</exception><exception cref="T:System.InvalidOperationException">Data in one of the columns has an incompatible datatype.</exception><exception cref="T:System.NotSupportedException"><b>ImportString</b> is not supported for crosstab and composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The string should consist of rows of data. If the string includes column headings or row 
         labels, use the overloaded version of this method which allows you to skip the first row(s).</para>
				<para>The datatypes and order of the DataWindow object's columns must match the columns of data in the string.</para>
				<para>
					<b>StartCol</b> and <b>EndCol</b> control the number of imported columns and the number of 
         columns in the DataWindow that are affected. <b>dwStartCol</b> specifies the first 
         DataWindow column to be affected. The last column to be affected can be calculated as:
         <c>dwStartCol + (EndCol - StartCol)</c>
				</para>
				<para>If an XML or comma-separated column contains a leading double quote it is assumed to be 
         part of the column value. A leading double quote has to be closed to mark the end of an item.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.ImportClipboard(Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)">
            <overloads>Tests whether the value of a DataWindow column is null.</overloads><summary>Tests whether the current value of a DataWindow column, specified by number, is null. 
      </summary><returns>
				<c>true</c> if the value at <i>RowNumber</i> and <i>ColumnNumber</i> is null, and <c>false</c> otherwise.</returns><param name="RowNumber">The row number for which you want to test the value.</param><param name="ColumnNumber">The column number for which you want to test the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
			<para>To avoid generating a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>, use <b>IsItemNull</b> to test whether a user-entered value or a value retrieved from the 
         database is null before calling any of the following methods:</para>
				<list type="bullet">
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowChild.GetItemDate(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowChild.GetItemDateTime(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowChild.GetItemDecimal(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowChild.GetItemDouble(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowChild.GetItemString(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowChild.GetItemTime(System.Int32,System.Int16)"/>
					</item>
				</list>
				<para>If one or more columns in a DataWindow are marked as required, that is, they must
         contain data, updating the database will fail if those columns have null values. Before calling <see cref="M:Sybase.DataWindow.DataWindowChild.UpdateData"/>, use         <see cref="M:Sybase.DataWindow.DataWindowControl.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)"/> to find any remaining columns with null values, and either prompt the user for input or provide values programmatically.  This is more efficient than using <b>IsItemNull</b> to evaluate each row and column.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemNull(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Tests whether the value of a DataWindow column, specified by number, is null. 
      </summary><returns>
				<c>true</c> if the value at <i>RowNumber</i> and <i>ColumnNumber</i> is null, and <c>false</c> otherwise.</returns><param name="RowNumber">The row number for which you want to test the value.</param><param name="ColumnNumber">The column number for which you want to test the value.</param><param name="Buffer">The DataWindow buffer for which you want to test the value.</param><param name="OriginalData">
				<c>false</c> to test the current value at <i>RowNumber</i> and <i>ColumnNumber</i>, <c>true</c> to test the value prior to any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>To avoid generating a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>, use <b>IsItemNull</b> to test whether a user-entered value or a value retrieved from the 
         database is null before calling any of the following methods:</para>
				<list type="bullet">
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowChild.GetItemDate(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowChild.GetItemDateTime(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowChild.GetItemDecimal(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowChild.GetItemDouble(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowChild.GetItemString(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowChild.GetItemTime(System.Int32,System.Int16)"/>
					</item>
				</list>
				<para>If one or more columns in a DataWindow are marked as required, that is, they must
         contain data, updating the database will fail if those columns have null values. Before calling <see cref="M:Sybase.DataWindow.DataWindowChild.UpdateData"/>, use         <see cref="M:Sybase.DataWindow.DataWindowControl.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)"/> to find any remaining columns with null values, and either prompt the user for input or provide values programmatically.  This is more efficient than using <b>IsItemNull</b> to evaluate each row and column.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemNull(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.String)">
            <summary>Tests whether the current value of a DataWindow column, specified by name, is null. 
      </summary><returns>
				<c>true</c> if the value at <i>RowNumber</i> and <i>ColumnName</i> is null, and <c>false</c> otherwise.</returns><param name="RowNumber">The row number for which you want to test the value.</param><param name="ColumnName">The name of the column for which you want to test the value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>To avoid generating a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>, use <b>IsItemNull</b> to test whether a user-entered value or a value retrieved from the 
         database is null before calling any of the following methods:</para>
				<list type="bullet">
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowChild.GetItemDate(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowChild.GetItemDateTime(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowChild.GetItemDecimal(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowChild.GetItemDouble(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowChild.GetItemString(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowChild.GetItemTime(System.Int32,System.Int16)"/>
					</item>
				</list>
				<para>If one or more columns in a DataWindow are marked as required, that is, they must
         contain data, updating the database will fail if those columns have null values. Before calling <see cref="M:Sybase.DataWindow.DataWindowChild.UpdateData"/>, use         <see cref="M:Sybase.DataWindow.DataWindowControl.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)"/> to find any remaining columns with null values, and either prompt the user for input or provide values programmatically.  This is more efficient than using <b>IsItemNull</b> to evaluate each row and column.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemNull(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)">
            <summary>Tests whether the value of a DataWindow column, specified by name, is null. 
      </summary><returns>
				<c>true</c> if the value at <i>RowNumber</i> and <i>ColumnName</i> is null, and <c>false</c> otherwise.</returns><param name="RowNumber">The row number for which you want to test the value.</param><param name="ColumnName">The name of the column for which you want to test the value.</param><param name="Buffer">The DataWindow buffer for which you want to test the value.</param><param name="OriginalData">
				<c>false</c> to test the current value at <i>RowNumber</i> and <i>ColumnName</i>, <c>true</c> to test the value prior to any user modification.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>To avoid generating a <see cref="T:System.Data.SqlTypes.SqlNullValueException"/>, use <b>IsItemNull</b> to test whether a user-entered value or a value retrieved from the 
         database is null before calling any of the following methods:</para>
				<list type="bullet">
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowChild.GetItemDate(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowChild.GetItemDateTime(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowChild.GetItemDecimal(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowChild.GetItemDouble(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowChild.GetItemString(System.Int32,System.Int16)"/>
					</item>
					<item>
						<see cref="M:Sybase.DataWindow.DataWindowChild.GetItemTime(System.Int32,System.Int16)"/>
					</item>
				</list>
				<para>If one or more columns in a DataWindow are marked as required, that is, they must
         contain data, updating the database will fail if those columns have null values. Before calling <see cref="M:Sybase.DataWindow.DataWindowChild.UpdateData"/>, use         <see cref="M:Sybase.DataWindow.DataWindowControl.FindNextRequiredColumn(System.Int32@,System.Int16@,Sybase.DataWindow.DataBuffer,System.Boolean)"/> to find any remaining columns with null values, and either prompt the user for input or provide values programmatically.  This is more efficient than using <b>IsItemNull</b> to evaluate each row and column.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemNull(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.InsertRow(System.Int32)">
            <summary>Inserts a row into a DataWindow. 
      </summary><returns>The number of the row that was added. </returns><param name="RowNumber">The row number before which to insert the new row. Specify 0 to insert a row at the end.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:System.NotSupportedException">Crosstab and composite DataWindow styles do not support <i>InsertRow</i>.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>InsertRow</b> simply inserts a row without changing the display or the current row. If any of the DataWindow columns have 
			default values, these values are added to the Primary buffer before the row is displayed.</para>
				<para>To make the new row the current row, call the <see cref="M:Sybase.DataWindow.DataWindowChild.SetRow(System.Int32)"/> method. For a DataWindowControl, you can
			invoke <see cref="M:Sybase.DataWindow.DataWindowControl.ScrollToRow(System.Int32)"/> instead if you also want the new row to be visible in the 
			DataWindowControl.</para>
				<para>A newly inserted row (with a <see cref="T:Sybase.DataWindow.RowStatus"/> value of New) is not 
         included in <see cref="P:Sybase.DataWindow.DataWindowChild.ModifiedCount"/> until data is entered in the row (and its <see cref="T:Sybase.DataWindow.RowStatus"/> changes
         to NewAndModified). </para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.DeleteRow(System.Int32)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.UpdateData"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.Modify(System.String)">
            <summary>Modifies a DataWindow object by applying specifications that
         change the object's definition. 
      </summary><param name="Syntax">A string whose value is the specification for the modification.  See the Remarks section for appropriate formats.</param><exception cref="T:System.ArgumentNullException">
				<i>Syntax</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">
				<i>Syntax</i> is invalid, or an unexpected error has occurred.</exception><remarks>
				<para>
					<b>Modify</b> lets you make many of the same settings in code that you can make when designing the 
         DataWindow. DataWindow Designer automatically gives names to all controls so that you can refer to them in <i>Syntax</i>. 
         See the <i>DataWindow .NET Programmer's Guide</i> for the exhaustive list of control properties that can be used.</para>
				<para>You can use three types of statements in <i>Syntax</i> to create, remove, and modify controls within a DataWindow object.
         <list type="bullet">
						<item>
							<b>CREATE </b>
							<i>control (settings)	</i>
							<para>
         Adds a control to the DataWindow object (such as text, computed fields, and bitmaps). 
         <i>Settings</i> is a list of properties and values using the format you see in exported DataWindow 
         syntax. To create a control, you must supply enough information to define it.</para>
						</item>
						<item>
							<b>DESTROY [COLUMN] </b>
							<i> control</i>
							<para>
         Removes <i>control</i> from the DataWindow object. When <i>control</i> is a column, specify the keyword COLUMN 
         to remove both the column and the column's data from the buffer.</para>
						</item>
						<item>
							<i>controlname.property=value</i>
							<para>Changes the value of <i>property</i> to <i>value</i>. Properties control the location, color, 
         size, font, and other settings for <i>controlname</i>. When <i>controlname</i> is <c>DataWindow</c>, you
         can also set properties for database access. Depending on the specific property, <i>value</i> can
         be a constant, a quoted constant, an expression that consists of a default value followed by a 
         valid DataWindow expression that returns the appropriate datatype for the property. </para>
							<para>If you are changing a single property, you can also use the <see cref="M:Sybase.DataWindow.DataWindowChild.SetProperty(System.String,System.String)"/> method, or use a property of one of the 
         <see cref="T:Sybase.DataWindow.GraphicObject"/> classes, if the desired property is exposed.</para>
						</item>
					</list>
				</para>
				<para>When you specify an expression for a DataWindow property, the expression has the format:<c> 
         defaultvalue~tDataWindowexpression</c> where:
				</para>
				<list type="bullet">
					<item>
						<c>Defaultvalue</c> is a value that can be converted to the appropriate datatype for the property. It must be followed by a tab character.</item>
					<item>
						<c>DataWindowexpression</c> is an expression that can use any 
         DataWindow expression function. The expression must also evaluate to the appropriate datatype 
         for the property. When you are setting a column's property, the expression is evaluated for each 
         row in the DataWindow, allowing the display to vary based on the data.
         </item>
				</list>
				<para>A typical expression uses the <c>If</c> function: <c>0~tIf(emp_status='T', 255, 0)</c>.  The following Visual Basic .NET statements would equivalently
         change the text color of the <c>emp_id</c> column to red for those employees with a status of 'T' (terminated) in <c>dwEmp</c>:
				</para>
				<list type="bullet">
					<item>
						<c>dwEmp.Modify("emp_id.color='0~tIf(emp_status=~'T~',255,0)'")</c>
					</item>
					<item>
						<c>dwEmp.SetProperty("emp_id.color", "0~tIf(emp_status=~'T~',255,0)")</c>
					</item>
					<item>
						<c>Dim gobEditColumn as Sybase.DataWindow.GraphicObjectEditableColumn</c>
        				<c>gobEditColumn = CObj(dwEmp.GetObjectByName("emp_id"))</c>
        				<c>gobEditColumn.TextColorExpression = "If(emp_status='T',255,0)"</c>
					</item>
				</list>
				<note>DataWindow expressions expect the tilde (~) as an escape character, as can be seen by the examples above.  ~t is a tab character and ~' indicates a nested single quote.</note>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetProperty(System.String,System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.Describe(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.Print">
            <overloads>Prints the DataWindow to the current printer. </overloads><summary>Prints the DataWindow to the current printer.</summary><exception cref="T:System.NotSupportedException">
				<b>Print</b> is not supported for a DataWindowChild that is nested in a composite DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>For a DataStore and DataWindowControl, <b>Print</b> triggers the <see cref="E:Sybase.DataWindow.IDataStore.BeginPrint"/>
			 event just before data is sent to the printer (or 
         spooler), a <see cref="E:Sybase.DataWindow.IDataStore.PagePrinting"/> for each page break, 
         and an <see cref="E:Sybase.DataWindow.IDataStore.EndPrint"/> event when printing is 
         complete.</para>
				<para>Use the overloaded version of <b>Print</b> to display a dialog box allowing the user to cancel the print job.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.PrintCancel"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.Print(System.Boolean)">
            <summary>Prints the DataWindow to the current printer, with the option to display a Cancel dialog box. 
      </summary><param name="ShowCancelDialog">
				<c>true</c> if a dialog box allowing the print job to be canceled is to be displayed, otherwise <c>false</c>.
			</param><exception cref="T:System.NotSupportedException">
				<b>Print</b> is not supported for a DataWindowChild that is nested in a composite DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>For a DataStore and DataWindowControl, <b>Print</b> triggers the <see cref="E:Sybase.DataWindow.IDataStore.BeginPrint"/>
			 event just before data is sent to the printer (or 
         spooler), a <see cref="E:Sybase.DataWindow.IDataStore.PagePrinting"/> for each page break, 
         and an <see cref="E:Sybase.DataWindow.IDataStore.EndPrint"/> event when printing is 
         complete.</para>
				<para>Since a DataStore is non-visual, <i>ShowCancelDialog</i> is always treated as <c>false</c>
         when invoked on a DataStore, and is therefore semantically equivalent to the overload of <b>Print</b> that has no arguments.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.PrintCancel"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.Print(System.Boolean,System.Boolean)">
            <summary>Prints the DataWindow to the current printer, with the option to display a Cancel dialog box
			and an option to display the Print Dialog box.
	        </summary><param name="ShowCancelDialog">
				<c>true</c> if a dialog box allowing the print job to be canceled is to be displayed, otherwise <c>false</c>.
			</param><param name="ShowPrintDialog">
				<c>true</c> if the Print Dialog box is to be displayed, otherwise <c>false</c>.
			</param><exception cref="T:System.NotSupportedException">
				<b>Print</b> is not supported for a DataWindowChild that is nested in a composite DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>For a DataStore and DataWindowControl, <b>Print</b> triggers the <see cref="E:Sybase.DataWindow.IDataStore.BeginPrint"/>
			 event just before data is sent to the printer (or 
         spooler), a <see cref="E:Sybase.DataWindow.IDataStore.PagePrinting"/> for each page break, 
         and an <see cref="E:Sybase.DataWindow.IDataStore.EndPrint"/> event when printing is 
         complete.</para>
				<para>Since a DataStore is non-visual, <i>ShowCancelDialog</i> is always treated as <c>false</c>
         when invoked on a DataStore, and is therefore semantically equivalent to the overload of <b>Print</b> that has no arguments.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.PrintCancel"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.PrintCancel">
            <summary>Cancels printing and deletes the spool file, if any. 
      </summary><returns>
				<c>true</c> if the print job was canceled, <c>false</c> otherwise (including when there is no pending print job).</returns><exception cref="T:System.NotSupportedException">
				<b>PrintCancel</b> is not supported for a DataWindowChild that is nested in a composite DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>PrintCancel cancels the printing of the specified DataWindowChild, DataStore, or DataWindowControl by deleting the spool file, if any, and closing the job. 
      </remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.Print"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.ReselectRow(System.Int32)">
            <summary>Refreshes data for a specific row by reretrieving from the database.</summary><param name="RowNumber">The row to be refreshed.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<see cref="M:Sybase.DataWindow.DataWindowChild.SetTransaction(Sybase.DataWindow.AdoTransaction)"/> was not called before <b>ReselectRow</b> for a DataWindowChild.</exception><exception cref="T:Sybase.DataWindow.DbErrorException">A database error has occurred.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<b>ReselectRow</b> is supported for SQL Select DataWindows and can be used to discard values 
         the user has changed and replace them with values from the database after an update fails (due to a 
         concurrent access error, for example).  
      </remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.Retrieve(System.Data.DataTable)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.UpdateData"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.Reset">
            <summary>Clears all the data from a DataWindow. 
      </summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>Reset</b> is not the same as deleting rows from the DataWindow since it does not move the rows to Delete buffer.  Use
			<b>Reset</b> only to completely discard any data and changes that have been made.</para>
				<para>Use <see cref="M:Sybase.DataWindow.DataWindowChild.RowsDiscard(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer)"/> to clear the data from a specific buffer.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.DeleteRow(System.Int32)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.RowsDiscard(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.ResetUpdateStatus">
            <summary>Clears the status flags in the Primary and Filter buffers and empties the Delete buffer of a
         DataWindow. 
      </summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>When a column is modified, its <see cref="T:Sybase.DataWindow.ItemStatus"/> flag is set, 
				marking it for update. Likewise, when a row is added or deleted, its <see cref="T:Sybase.DataWindow.RowStatus"/> flag is set.
				By default 
         the <see cref="M:Sybase.DataWindow.DataWindowChild.UpdateData"/> method clears these flags; however, if you want to coordinate updates of more than one DataWindow, 
         you can defer clearing the status by setting the <i>ResetUpdateFlags</i> argument to 
         <c>false</c>. Then after you verify that all the updates succeeded, you can call <b>ResetUpdateStatus</b>
          for each DataWindow to clear
         the status flags. If one of the updates fails, you can retain the update statuses, prompt the user to fix the problem, and try the
         updates again.</para>
				<para>You can find out which rows are marked for update with the <see cref="M:Sybase.DataWindow.DataWindowChild.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)"/> method.</para>
			</remarks><example>This C# code updates the data without resetting flags and commits it before resetting status flags:
         <code>
         try
         {
            dwEmployee.UpdateData(true, false);
            myTrans.Commit();
            
            // If no exception has been caught, update succeeded
            dwEmployee.ResetUpdateStatus();
         }
         catch (Sybase.DataWindow.DbErrorException dbError)
         {
         	// update failed prompt user to fix the problem
         }
         
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowChild.UpdateData"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.Retrieve(System.Object[])">
            <summary>Retrieves rows from the database into the DataWindow</summary><returns>The number of rows retrieved.</returns><param name="ArgsList">A list of retrieval arguments to be passed to the SQL statement that is the source of the DataWindow.
			<note>You must use .NET datatypes, 
         such as System.DateTime, in the argument list.</note>
			</param><exception cref="T:Sybase.DataWindow.DbErrorException">A database error has occurred.</exception><exception cref="T:System.InvalidOperationException">
				<see cref="M:Sybase.DataWindow.DataWindowChild.SetTransaction(Sybase.DataWindow.AdoTransaction)"/> has not been called.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>After rows are retrieved, the DataWindow object's filter is applied. Any retrieved rows that do not 
         meet the filter criteria are immediately moved to the Filter buffer and are not included in the return count.</para>
				<para>Before you can retrieve rows, you must specify a transaction object with 
         <see cref="M:Sybase.DataWindow.DataWindowChild.SetTransaction(Sybase.DataWindow.AdoTransaction)"/> and connect to the database. Normally, when you call <b>Retrieve</b>, any rows that are already in the 
         DataWindow are discarded and replaced with the newly retrieved rows. You can set the <i>Action</i> property of the 
         <see cref="T:Sybase.DataWindow.BeginRetrieveEventArgs"/> to <c>AppendRows</c> 
         in the <see cref="E:Sybase.DataWindow.DataWindowControl.BeginRetrieve"/> event to add any 
         retrieved rows to the ones that already exist in the buffers.</para>
				<para>If arguments are expected but not specified, the user is prompted for the retrieval arguments.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.ReselectRow(System.Int32)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetTransaction(Sybase.DataWindow.AdoTransaction)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.UpdateData"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.RowsCopy(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Copies a range of rows from one DataWindow to another,
         or from one buffer to another within a single DataWindow. 
      </summary><param name="StartRow">The number of the first row you want to copy.</param><param name="EndRow">The number of the last row you want to copy.</param><param name="FromBuffer">The DataWindow buffer from which you want to copy rows.</param><param name="ToDW">The DataWindow to which you want to copy the rows.</param><param name="BeforeRow">The number of the row in <i>ToDW</i> before which you want to insert the copied rows. <note>To insert after the last row, use any value that is greater than the number of existing rows.</note>
			</param><param name="ToBuffer">The DataWindow buffer in <i>ToDW</i> to which the rows should be copied. </param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>StartRow</i> or <i>EndRow</i> is less than 1, or <i>BeforeRow</i> is less than 0.</exception><exception cref="T:System.ArgumentException">
				<list type="bullet">
					<item>
						<i>StartRow</i> &lt; <i>EndRow</i>, or</item>
					<item>Source DataWindow and <i>ToDW</i> are incompatible.</item>
				</list>
			</exception><exception cref="T:System.ArgumentNullException">
				<i>ToDW</i> is null.</exception><exception cref="T:System.NotSupportedException">Source DataWindow or <i>ToDW</i> is a crosstab.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>When you use the <b>RowsCopy</b> method, the status of the rows that are copied to the <i>ToBuffer</i> is set to
         NewAndModified. If you issue an update request, the DataWindow server sends SQL INSERT statements to the database for any 
         new rows in the Primary buffer.</para>
				<para>Data is not automatically retrieved for drop-down DataWindows in <i>ToDW</i>, as it 
         is when you call <see cref="M:Sybase.DataWindow.DataWindowChild.InsertRow(System.Int32)"/>. You must explicitly call <see cref="M:Sybase.DataWindow.DataWindowChild.Retrieve(System.Data.DataTable)"/> for child DataWindows in <i>ToDW</i>.</para>
				<para>When you use <b>RowsCopy</b> to populate another DataWindow, the copied data is not automatically processed 
         by filters or sort criteria in effect on the target DataWindow. You may need to call the <see cref="M:Sybase.DataWindow.DataWindowChild.Filter"/>, 
         <see cref="M:Sybase.DataWindow.DataWindowChild.CalculateGroups"/>, or <see cref="M:Sybase.DataWindow.DataWindowChild.Sort"/> methods to properly process the data.</para>
				<para>A DataWindow cannot be in query mode when you call <b>RowsCopy</b>. </para>
			</remarks><example>This Visual Basic subroutine copies rows from the Delete buffer in a DataWindow into the Primary buffer 
			of a DataWindow called <c>dwDelete</c>:
         <code>
         Public Sub RefreshData()
            Dim primary As DataWindowControl
            Dim filterCount As Integer
         
            Try
               dwDelete.Reset()
               primary = buffersForm.GetPrimaryControl
               filterCount = primary.DeletedCount
               
               'Use the RowsCopy function to copy the rows from the
               'deleted buffer in the primary DataWindow into the DataWindow
               'on this window.
               If filterCount &gt; 0 Then
                  primary.RowsCopy(1, filterCount, DataBuffer.Delete, dwDelete, 1, DataBuffer.Primary)
               End If
            Catch ex As Exception
               ErrorHandler.HandleException(ex)
            End Try
         End Sub
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowChild.RowsDiscard(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.RowsMove(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.RowsDiscard(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Discards a range of rows in a DataWindow control.</summary><param name="StartRow">The number of the first row you want to discard.</param><param name="EndRow">The number of the last row you want to discard.</param><param name="Buffer">The DataWindow buffer from which you want to discard the rows.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>StartRow</i> or <i>EndRow</i> is less than 1.</exception><exception cref="T:System.ArgumentException">
				<i>StartRow</i> is less than <i>EndRow</i>.</exception><exception cref="T:System.NotSupportedException">
				<b>RowsDiscard</b> is not supported for crosstab DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Once a row has been discarded using <b>RowsDiscard</b>, you cannot restore the row. 
			You have to retrieve it again from the database.</para>
				<para>Use <b>RowsDiscard</b> when your application has finished with rows in a DataWindow, and you do not
         want an update to affect the database. For example, you can discard rows in the Delete buffer to 
         prevent the associated rows from being removed from the database when you call <see cref="M:Sybase.DataWindow.DataWindowChild.UpdateData"/>. </para>
				<para>Use <see cref="M:Sybase.DataWindow.DataWindowChild.Reset"/> to clear all the rows 
         from all three buffers of a DataWindow.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.RowsCopy(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.RowsMove(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.Reset"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.RowsMove(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)">
            <summary>Removes a range of rows from one DataWindow and inserts them into another, or moves them from one buffer to another within a single DataWindow. 
      </summary><param name="StartRow">The number of the first row you want to move.</param><param name="EndRow">The number of the last row you want to move.</param><param name="FromBuffer">The DataWindow buffer from which you want to move rows.</param><param name="ToDW">The DataWindow to which you want to move the rows.</param><param name="BeforeRow">The number of the row in <i>ToDW</i> before which you want to insert the relocated rows. <note>To insert after the last row, use any value that is greater than the number of existing rows.</note>
			</param><param name="ToBuffer">The DataWindow buffer in <i>ToDW</i> to which the rows should be moved.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>StartRow</i> or <i>EndRow</i> is less than 1, or <i>BeforeRow</i> is less than 0.</exception><exception cref="T:System.ArgumentException">
				<list type="bullet">
					<item>
						<i>StartRow</i> &lt; <i>EndRow</i>, or</item>
					<item>Source DataWindow and <i>ToDW</i> are incompatible.</item>
				</list>
			</exception><exception cref="T:System.ArgumentNullException">
				<i>ToDW</i> is null.</exception><exception cref="T:System.NotSupportedException">Source DataWindow or <i>ToDW</i> is a crosstab.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>When you use <b>RowsMove</b>, the rows have the status NewAndModified in <i>ToDW</i>. If you move rows 
         between buffers within a single DataWindow, knowledge of the rows' origin is taken into account to change their 
         status. For example, if you move unmodified rows from the Primary buffer to 
         the Delete buffer, they are marked for deletion. If you move the rows back to the Primary buffer, their status returns 
         to NotModified; however, if you move a row from one DataWindow control (or DataStore) to another and back 
         again, the <see cref="T:Sybase.DataWindow.RowStatus"/> changes to NewAndModified because it came from a different DataWindow.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.RowsCopy(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.IDataWindowBase,System.Int32,Sybase.DataWindow.DataBuffer)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.RowsDiscard(System.Int32,System.Int32,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)">
            <overloads>Saves the contents of a DataWindow in the specified format. </overloads><summary>Saves the contents, including column headers, of a DataWindow in the format specified.</summary><param name="FileName">The name of the file in which to save the DataWindow contents.</param><param name="SaveAsType">The format in which to save the DataWindow contents.</param><exception cref="T:System.ArgumentNullException">
				<i>FileName</i> is null or an empty string ("").</exception><exception cref="T:System.IO.PathTooLongException">
				<i>FileName</i> contains more than 248 characters. </exception><exception cref="T:System.NotSupportedException"><b>SaveAs</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The file is saved with UTF-16LE encoding. To specify a different encoding, use the overloaded version of <b>SaveAs</b> that
			accepts a parameter of type <see cref="T:Sybase.DataWindow.FileSaveAsEncoding"/>
				</para>
				<para>Report format (PSReport value of <see cref="T:Sybase.DataWindow.FileSaveAsType"/>) is the best choice if the DataWindow is a composite report.</para>
				<para>For Xml, the XML logical structure used is based on the current XML export template for the DataWindow object. You can 
         change the export template by setting the <c>Export.XML.UseTemplate</c> DataWindow object property. If no export 
         template is specified, the default template is used.</para>
				<para>When you save the contents of a DataWindow to a text file, double quotes are handled in a way that enables the 
         <see cref="M:Sybase.DataWindow.DataWindowChild.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/> function to produce the same DataWindow when the text file is imported back into the application. 
         Any field 
         that is enclosed in a pair of double quotes is wrapped with three pairs of double quotes in the saved text file. 
         Double quotes at the beginning of a text field that have no matching double quotes at the end of the field are also 
         replaced by three double quotes in the saved text file. A double quote elsewhere in the field is saved as 
         one double quote. </para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SaveAsFormattedText(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType,System.Boolean)">
            <summary>Saves the contents, optionally including column headers, of a DataWindow in the format specified.
      </summary><param name="FileName">The name of the file in which to save the DataWindow contents.</param><param name="SaveAsType">The format in which to save the DataWindow contents.</param><param name="IncludeColumnHeaders">
				<c>true</c> if DataWindow column headings should be included, <c>false</c> otherwise.
			<note>This value is ignored (and treated as <c>true</c>) for formats other than Clipboard, CSV, Excel, and Text.</note>
			</param><exception cref="T:System.ArgumentNullException">
				<i>FileName</i> is null or an empty string ("").</exception><exception cref="T:System.IO.PathTooLongException">
				<i>FileName</i> contains more than 248 characters. </exception><exception cref="T:System.NotSupportedException"><b>SaveAs</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The file is saved with UTF-16LE encoding. To specify a different encoding, use the overloaded version of <b>SaveAs</b> that
			accepts a parameter of type <see cref="T:Sybase.DataWindow.FileSaveAsEncoding"/>
				</para>
				<para>Report format (PSReport value of <see cref="T:Sybase.DataWindow.FileSaveAsType"/>) is the best choice if the DataWindow is a composite report.</para>
				<para>For Xml, the XML logical structure used is based on the current XML export template for the DataWindow object. You can 
         change the export template by setting the <c>Export.XML.UseTemplate</c> DataWindow object property. If no export 
         template is specified, the default template is used.</para>
				<para>When you save the contents of a DataWindow to a text file, double quotes are handled in a way that enables the 
         <see cref="M:Sybase.DataWindow.DataWindowChild.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/> function to produce the same DataWindow when the text file is imported back into the application. 
         Any field 
         that is enclosed in a pair of double quotes is wrapped with three pairs of double quotes in the saved text file. 
         Double quotes at the beginning of a text field that have no matching double quotes at the end of the field are also 
         replaced by three double quotes in the saved text file. A double quote elsewhere in the field is saved as 
         one double quote. </para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SaveAsFormattedText(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType,System.Boolean,Sybase.DataWindow.FileSaveAsEncoding)">
            <summary>Saves the contents, optionally including column headers, of a DataWindow with the specified format and encoding.</summary><param name="FileName">The name of the file in which to save the DataWindow contents.</param><param name="SaveAsType">The format in which to save the DataWindow contents.</param><param name="IncludeColumnHeaders">
				<c>true</c> if DataWindow column headings should be included, <c>false</c> otherwise.
			<note>This value is ignored (and treated as <c>true</c>) for formats other than Clipboard, CSV, Excel, and Text.</note>
			</param><param name="Encoding">The character encoding used for the file.</param><exception cref="T:System.ArgumentNullException">
				<i>FileName</i> is null or an empty string ("").</exception><exception cref="T:System.IO.PathTooLongException">
				<i>FileName</i> contains more than 248 characters. </exception><exception cref="T:System.NotSupportedException"><b>SaveAs</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Report format (PSReport value of <see cref="T:Sybase.DataWindow.FileSaveAsType"/>) is the best choice if the DataWindow is a composite report.</para>
				<para>For Xml, the XML logical structure used is based on the current XML export template for the DataWindow object. You can 
         change the export template by setting the <c>Export.XML.UseTemplate</c> DataWindow object property. If no export 
         template is specified, the default template is used.</para>
				<para>When you save the contents of a DataWindow to a text file, double quotes are handled in a way that enables the 
         <see cref="M:Sybase.DataWindow.DataWindowChild.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/> function to produce the same DataWindow when the text file is imported back into the application. 
         Any field 
         that is enclosed in a pair of double quotes is wrapped with three pairs of double quotes in the saved text file. 
         Double quotes at the beginning of a text field that have no matching double quotes at the end of the field are also 
         replaced by three double quotes in the saved text file. A double quote elsewhere in the field is saved as 
         one double quote. </para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.ImportFile(System.String,Sybase.DataWindow.FileSaveAsType)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SaveAsFormattedText(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SaveAsFormattedText(System.String)">
            <overloads>Saves the contents of a DataWindow as a Unicode text file.</overloads><summary>Saves the contents of a DataWindow as a Unicode text file using default formatting. 
      </summary><param name="FileName">The name of the file in which to save the DataWindow contents.</param><exception cref="T:System.ArgumentNullException">
				<i>FileName</i> is null or an empty string ("").</exception><exception cref="T:System.IO.PathTooLongException">
				<i>FileName</i> contains more than 248 characters. </exception><exception cref="T:System.NotSupportedException"><b>SaveAsFormattedText</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>SaveAsFormattedText</b> is similar to <see cref="M:Sybase.DataWindow.DataWindowChild.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/> with the Text <see cref="T:Sybase.DataWindow.FileSaveAsType"/>;
				however, <b>SaveAsFormattedText</b>
         formats the text and saves column headers as they are displayed in the DataWindow instead of as the 
         column name. For example, if the heading for the <c>cust_id</c> column is "Customer ID", <b>SaveAsFormattedText</b> saves 
         "Customer ID" to the text file, whereas <see cref="M:Sybase.DataWindow.DataWindowChild.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/> saves "cust_id". 
         <b>SaveAsFormattedText</b> also saves computed fields, and the overloaded 
         version of the method 
         allows you to customize formats in the file and specify the file encoding.</para>
				<para>In the default formatting implemented by this method, values are wrapped in double quotes and separated by tabs. 
         A newline character is placed at the end of each line. 
         Line feed and carriage return characters within each row are converted to white space. 
         The file is saved with UFT-16LE encoding.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SaveAsFormattedText(System.String,System.String,System.String,System.String,System.Boolean,Sybase.DataWindow.FileSaveAsEncoding)">
            <summary>Saves the contents of a DataWindow as a Unicode text file with user-specified formatting. 
      </summary><param name="FileName">The name of the file in which to save the DataWindow contents.</param><param name="Separator">The character to be used to delimit values. </param><param name="Quote">The character to be used to wrap values. </param><param name="LineEnd">The character to be use as an end-of-line marker.</param><param name="RetainDataNewLineChar">
				<c>true</c> if line feed and carriage return characters should be retained, <c>false</c> if
			they should be converted to white space</param><param name="Encoding">The character encoding used for the file.</param><exception cref="T:System.ArgumentNullException">
				<i>FileName</i> is null or an empty string ("").</exception><exception cref="T:System.IO.PathTooLongException">
				<i>FileName</i> contains more than 248 characters. </exception><exception cref="T:System.NotSupportedException"><b>SaveAsFormattedText</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>SaveAsFormattedText</b> is similar to <see cref="M:Sybase.DataWindow.DataWindowChild.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/> with the Text <see cref="T:Sybase.DataWindow.FileSaveAsType"/>;
				however, <b>SaveAsFormattedText</b>
         formats the text and saves column headers as they are displayed in the DataWindow instead of as the 
         column name. For example, if the heading for the <c>cust_id</c> column is "Customer ID", <b>SaveAsFormattedText</b> saves 
         "Customer ID" to the text file, whereas <see cref="M:Sybase.DataWindow.DataWindowChild.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/> saves "cust_id". 
         <b>SaveAsFormattedText</b> also saves computed fields, and the overloaded 
         version of the method 
         allows you to customize formats in the file and specify the file encoding.</para>
			</remarks><example>This statement saves the contents of <c>dwQuarter</c> to the file <c>H:\Q2\results.txt</c>. The saved file has 
         ANSI encoding with the hash mark (#) as the separator character, single quote (') as the value delimiter, 
         and the default line ending. Computed columns are included with the saved information, and line 
         feed and carriage return characters within column data are converted to white space.
         <code>dwQuarter.SaveAsFormattedText("H:\Q2\results.txt","#","'","\n", false, Sybase.FileSaveAsEncoding.Ansi)</code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowChild.SaveAs(System.String,Sybase.DataWindow.FileSaveAsType)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SelectTreeNode(System.Int32,System.Int32,System.Boolean)">
            <summary>
				Selects or deselects a TreeView node in a TreeView DataWindow, which has the specified group level and includes the specified row.
			</summary><param name="RowNumber">
				The number of the row that belongs to the group of the TreeView node that will be selected or deselected.
			</param><param name="GroupLevel">
				The level of the group of the TreeView node that will be selected or deselected.
			</param><param name="Selected">
				<c>true</c> if the node should be selected, <c>false</c>
				if selection of the node should be deselected.
			</param><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><exception cref="T:System.ArgumentException">An invalid argument was detected.</exception>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetColumnValidation(System.Int16,System.String)">
            <overloads>Changes the validation rule for a column in a DataWindow. </overloads><summary>Changes the validation rule for a DataWindow column identified by number. 
      </summary><param name="ColumnNumber">The column number for which you want to set the validation rule.</param><param name="ValidationRule">The new validation rule for the column.</param><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is not valid.</exception><exception cref="T:Sybase.DataWindow.InvalidExpressionException">
				<i>ValidationRule</i> is not a valid boolean DataWindow expression.</exception><exception cref="T:System.ArgumentNullException">
				<i>ValidationRule</i> is null.</exception><exception cref="T:System.NotSupportedException">
				<b>SetColumnValidation</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Validation rules are boolean expressions that usually compare the value in the column's 
         edit control (obtained using <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>) to some other value. 
         When data the user enters fails to meet the criteria 
         established by the validation rule, an <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> event occurs. 
         You can specify validation rules at design time in DataWindow Designer, and you can change the rules in code using 
         <b>SetColumnValidation</b>. A validation rule can include any DataWindow expression function.</para>
				<para>For information about DataWindow expression functions and validation rules, see the 
         DataWindow Designer <i>User's Guide</i>.</para>
			</remarks><example>The following assigns a validation rule to the current column in <c>dwEmployee</c>. The rule ensures 
         that the data entered is greater than zero:
         <code>dwEmployee.SetColumnValidation(dwEmployee.GetColumnNumber(), "Number(GetText( )) &gt; 0")</code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetColumnValidation(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetColumnValidation(System.String,System.String)">
            <summary>Changes the validation rule for a DataWindow column identified by name. 
      </summary><param name="ColumnName">The column name for which you want to set the validation rule.</param><param name="ValidationRule">The new validation rule for the column.</param><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is not valid.</exception><exception cref="T:Sybase.DataWindow.InvalidExpressionException">
				<i>ValidationRule</i> is not a valid boolean DataWindow expression.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> or <i>ValidationRule</i> is null.</exception><exception cref="T:System.NotSupportedException">
				<b>SetColumnValidation</b> is not supported for composite DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Validation rules are boolean expressions that usually compare the value in the column's 
         edit control (obtained using <see cref="M:Sybase.DataWindow.DataWindowControl.GetText"/>) to some other value. 
         When data the user enters fails to meet the criteria 
         established by the validation rule, an <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> event occurs. 
         You can specify validation rules at design time in DataWindow Designer, and you can change the rules in code using 
         <b>SetColumnValidation</b>. A validation rule can include any DataWindow expression function.</para>
				<para>For information about DataWindow expression functions and validation rules, see the 
         DataWindow Designer <i>User's Guide</i>.</para>
			</remarks><example>The following assigns a validation rule to the current column in <c>dwEmployee</c>. The rule ensures 
         that the data entered is greater than zero:
         <code>dwEmployee.SetColumnValidation(dwEmployee.GetColumnName(), "Number(GetText( )) &gt; 0")</code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetColumnValidation(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetDetailHeight(System.Int32,System.Int32,System.Int32)">
            <summary>Sets the height of each row in the specified range to the specified value. 
      </summary><param name="StartRow">The first row in the range of rows for which you want to set the height.</param><param name="EndRow">The last row in the range of rows for which you want to set the height.</param><param name="NewHeight">The height of the detail area for the specified rows in the <see cref="T:Sybase.DataWindow.Units"/> specified for the DataWindow object.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>StartRow</i> or <i>EndRow</i> is less than 1.</exception><exception cref="T:System.ArgumentException">
				<i>EndRow</i> &lt; <i>StartRow</i>.</exception><exception cref="T:System.ArgumentOutOfRangeException">
				<i>NewHeight</i> is less than 0.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Call <b>SetDetailHeight</b> in code to vary the amount of space assigned to rows in a DataWindow.
			 You cannot specifically set the height for different rows when you define a 
         DataWindow object in DataWindow Designer; however, you can turn on the Autosize Height property 
         for the detail band so that the height of each row is determined by the data.</para>
				<para>You can set the detail 
         height of one or more rows to zero, which hides them from view.</para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetFilter(System.String)">
            <summary>Sets the filter criteria for a DataWindow.</summary><param name="FilterExpression">A string whose value is a boolean expression.</param><exception cref="T:Sybase.DataWindow.InvalidExpressionException">
				<i>FilterExpression</i> is not a valid boolean DataWindow expression.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><remarks>
				<para>A DataWindow object can have a filter criteria specified as part of its definition. After data is 
         retrieved, rows that do not meet the criteria are immediately transferred from the Primary buffer to the 
         Filter buffer. The <b>SetFilter</b> method replaces any existing filter criteria.</para>
				<para>Rows for which <i>FilterExpression</i> evaluates to <c>false</c> will be moved to the Filter buffer when the <see cref="M:Sybase.DataWindow.DataWindowChild.Filter"/>
			method is subsequently invoked.</para>
				<para>
					<i>FilterExpression</i> can consist of columns (identified by name or number), relational operators, 
				and values against which column values 
         are compared. Boolean expressions can be connected with logical operators AND and OR. You can also use NOT, 
         the negation operator. Use parentheses to control the order of evaluation.</para>
				<para>Sample expressions include:</para>
				<list type="bullet">
					<item>
						<c>item_id &gt; 5</c>
					</item>
					<item>
						<c>NOT item_id = 5</c>
					</item>
					<item>
						<c>(NOT item_id = 5) AND customer &gt; "Mabson"</c>
					</item>
					<item>
						<c>item_id &gt; 5 AND customer = "Smith"</c>
					</item>
					<item>
						<c>#1 &gt; 5 AND #2 = "Smith"</c>
					</item>
				</list>
				<para>If you build a <i>FilterExpression</i> in code, enclose string constants in quotation marks, and
				 format numbers using U.S. format (period as decimal separator). </para>
				<para>To remove a filter, call <b>SetFilter</b> with the empty string ("") for format and then call <see cref="M:Sybase.DataWindow.DataWindowChild.Filter"/>.
				 The rows 
         in the filter buffer will be restored to the Primary buffer and positioned after the rows that already exist 
         there.</para>
				<para>To allow users to specify their own filter expression for a DataWindowControl, 
				call <see cref="M:Sybase.DataWindow.DataWindowControl.FilterDialog"/> to display a dialog box allowing for the constructon of a filter expression. 
         Then you can call <see cref="M:Sybase.DataWindow.DataWindowChild.Filter"/> to apply the dynamically constructed expression to the DataWindowControl.
				</para>
			</remarks><example>The following code defines a filter so that rows within <c>dwEmployee</c> display only if the <c>emp_state</c> field
			matches the current value of <c>var1</c>, in this case "ME" for Maine.
         <code>
         [C#]
         string strState;
         strState = "ME";
         dwEmployee.SetFilter("emp_state = '"+ strState +" '");
         dwEmployee.Filter();
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetFilter(System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.Filter"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetItemDate(System.Int32,System.Int16,System.DateTime)">
            <overloads>Sets the value of a DataWindow Date column. </overloads><summary>Sets the Date value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="DateValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store Date values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDate</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDate</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDate</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDate(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetItemDate(System.Int32,System.String,System.DateTime)">
            <summary>Sets the Date value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="DateValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store Date values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDate</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDate</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDate</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDate(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetItemDateTime(System.Int32,System.Int16,System.DateTime)">
            <overloads>Sets the value of a DataWindow DateTime column. </overloads><summary>Sets the DateTime value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="DateTimeValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store DateTime values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDateTime</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDateTime</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDateTime</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDate(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDateTime(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetItemDateTime(System.Int32,System.String,System.DateTime)">
            <summary>Sets the DateTime value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="DateTimeValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store DateTime values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDateTime</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDateTime</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDateTime</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDate(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDateTime(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)">
            <overloads>Sets the value of a DataWindow DateTime column. </overloads><summary>Sets the DateTime value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="DateTimeValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store DateTime values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlDateTime</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlDateTime</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlDateTime</b> to override the user's erroneous entry with valid data.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDate(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDateTime(System.Int32,System.String,System.Data.SqlTypes.SqlDateTime)">
            <summary>Sets the Decimal value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="DateTimeValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store DateTime values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlDateTime</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlDateTime</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlDateTime</b> to override the user's erroneous entry with valid data.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDate(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDateTime(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetItemDecimal(System.Int32,System.Int16,System.Decimal)">
            <overloads>Sets the value of a DataWindow Decimal column. </overloads><summary>Sets the Decimal value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="DecimalValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store Decimal values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDecimal</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDecimal</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDecimal</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDecimal(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetItemDecimal(System.Int32,System.String,System.Decimal)">
            <summary>Sets the Decimal value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="DecimalValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store Decimal values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDecimal</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDecimal</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDecimal</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDecimal(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)">
            <overloads>Sets the value of a DataWindow Decimal column. </overloads><summary>Sets the Decimal value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="DecimalValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store Decimal values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlDecimal</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlDecimal</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlDecimal</b> to override the user's erroneous entry with valid data.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDecimal(System.Int32,System.Int16,System.Decimal)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDecimal(System.Int32,System.String,System.Data.SqlTypes.SqlDecimal)">
            <summary>Sets the Decimal value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="DecimalValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store Decimal values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlDecimal</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlDecimal</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlDecimal</b> to override the user's erroneous entry with valid data.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDecimal(System.Int32,System.Int16,System.Decimal)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDecimal(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetItemDouble(System.Int32,System.Int16,System.Double)">
            <overloads>Sets the value of a DataWindow integer or floating point column. </overloads><summary>Sets the value of an integer or floating point column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number for which you want to set the value.</param><param name="ColumnNumber">The column number for which you want to set the value.</param><param name="DoubleValue">The value to which you want to set the data at the row and column location.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store numeric values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDouble</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDouble</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDouble</b> to override the user's erroneous entry with valid data.</para>
				<para>If the underlying DataWindow column type is long or ulong, <i>DoubleValue</i> is truncated before being stored in the DataWindow.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDouble(System.Int32,System.String,System.Data.SqlTypes.SqlDouble)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDouble(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetItemDouble(System.Int32,System.String,System.Double)">
            <summary>Sets the value of an integer or floating point column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number for which you want to set the value.</param><param name="ColumnName">The column name for which you want to set the value.</param><param name="DoubleValue">The value to which you want to set the data at the row and column location.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store numeric values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemDouble</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemDouble</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemDouble</b> to override the user's erroneous entry with valid data.</para>
				<para>If the underlying DataWindow column type is long or ulong, <i>DoubleValue</i> is truncated before being stored in the DataWindow.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDouble(System.Int32,System.String,System.Data.SqlTypes.SqlDouble)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemDouble(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDouble(System.Int32,System.String,System.Data.SqlTypes.SqlDouble)">
            <summary>Sets the value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="DoubleValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store numeric values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlDouble</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlDouble</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlDouble</b> to override the user's erroneous entry with valid data.</para>
				<para>If the underlying DataWindow column type is long or ulong, <i>DoubleValue</i> is truncated before being stored in the DataWindow.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDouble(System.Int32,System.Int16,System.Double)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDouble(System.Int32,System.Int16,System.Data.SqlTypes.SqlDouble)">
            <overloads>Sets the value of a DataWindow integer or floating point column. </overloads><summary>Sets the value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="DoubleValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store numeric values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlDouble</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlDouble</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlDouble</b> to override the user's erroneous entry with valid data.</para>
				<para>If the underlying DataWindow column type is long or ulong, <i>DoubleValue</i> is truncated before being stored in the DataWindow.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDouble(System.Int32,System.Int16,System.Double)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlDouble(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetItemNull(System.Int32,System.Int16)">
            <overloads>Sets the value of a column to null. </overloads><summary>Sets to null  the value of the column, identified by number, in the specified row of the Primary buffer.
      </summary><param name="RowNumber">The row number containing the column.</param><param name="ColumnNumber">The number of the column to be set to null.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.NotSupportedException"><b>SetItemNull</b> is not supported for crosstab DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemNull</b> to set a column value to null before writing it to the database. Alternatively, 
         you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDouble(System.Int32,System.String,System.Data.SqlTypes.SqlDouble)"/>, <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)"/>, <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/>, or
         <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)"/> method, since they accept System.Data.SqlTypes datatypes, which support the direct assignment of a null
         value.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetItemNull(System.Int32,System.String)">
            <summary>Sets to null  the value of the column, identified by number, in the specified row of the Primary buffer.
      </summary><param name="RowNumber">The row number containing the column.</param><param name="ColumnName">The name of the column to be set to null.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.NotSupportedException"><b>SetItemNull</b> is not supported for crosstab DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemNull</b> to set a column value to null before writing it to the database. Alternatively, 
         you can use the <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDouble(System.Int32,System.String,System.Data.SqlTypes.SqlDouble)"/>, <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDecimal(System.Int32,System.Int16,System.Data.SqlTypes.SqlDecimal)"/>, <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/>, or
         <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)"/> method, since they accept System.Data.SqlTypes datatypes, which support the direct assignment of a null
         value.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.IsItemNull(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.ItemStatus)">
            <overloads>Changes the modification status of a column within a row. </overloads><summary>Changes the modification status of the column, specified by number, within a row. 
      </summary><param name="RowNumber">The row number containing the column.</param><param name="ColumnNumber">The number of the column for which you want to set the status.</param><param name="Buffer">The DataWindow buffer that contains the row.</param><param name="Status">The new <see cref="T:Sybase.DataWindow.ItemStatus"/>.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not a valid row in <i>Buffer</i>.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> in not valid.</exception><exception cref="T:System.NotSupportedException"><b>SetItemStatus</b> is not supported for crosstab DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<see cref="M:Sybase.DataWindow.DataWindowChild.SetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.RowStatus)"/> changes the modification status of a row; <b>SetItemStatus</b> changes 
         the modification status of an item within a row.</para>
				<para>When data is retrieved into a DataWindow, all rows and columns initially have a status of NotModified. After 
         data has changed in a column in a particular row, either because the user changed the data or the data was changed 
         programmatically, the item status for that column changes to Modified. Once the status for any column in a row changes to Modified,
          the row status also changes to Modified.</para>
				<para>When a row is inserted into a DataWindow, it initially has a row status of New, and all columns in that 
         row initially have an item status of NotModified. After data has changed in a column in the row, either because 
         the user changed the data or the data was changed programmatically, the item status changes to Modified. Once 
         the status for any column in the inserted row changes to Modified, the row status changes to NewAndModified.
         When a DataWindow column has a default value, the column's item status does not change to Modified until the 
         user makes at least one actual change to a column in that row.</para>
				<para>Use <b>SetItemStatus</b> to change the column's status from Modified to NotModified or vice versa. A column marked as NotModified
				will not be included in any UPDATE statements issued by <see cref="M:Sybase.DataWindow.DataWindowChild.UpdateData"/>.</para>
				<para>For more information about setting the status of rows and columns, see the section on updating the 
         database in the <i>DataWindow .NET Programmer's Guide</i>.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.RowStatus)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetItemStatus(System.Int32,System.String,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.ItemStatus)">
            <summary>Changes the modification status of the column, specified by name, within a row. 
      </summary><param name="RowNumber">The row number containing the column.</param><param name="ColumnName">The name of the column for which you want to set the status.</param><param name="Buffer">The DataWindow buffer that contains the row.</param><param name="Status">The new <see cref="T:Sybase.DataWindow.ItemStatus"/>.
			</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not a valid row in <i>Buffer</i>.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> in not valid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.NotSupportedException"><b>SetItemStatus</b> is not supported for crosstab DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<see cref="M:Sybase.DataWindow.DataWindowChild.SetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.RowStatus)"/> changes the modification status of a row; <b>SetItemStatus</b> changes 
         the modification status of an item within a row.</para>
				<para>When data is retrieved into a DataWindow, all rows and columns initially have a status of NotModified. After 
         data has changed in a column in a particular row, either because the user changed the data or the data was changed 
         programmatically, the item status for that column changes to Modified. Once the status for any column in a row changes to Modified,
          the row status also changes to Modified.</para>
				<para>When a row is inserted into a DataWindow, it initially has a row status of New, and all columns in that 
         row initially have an item status of NotModified. After data has changed in a column in the row, either because 
         the user changed the data or the data was changed programmatically, the item status changes to Modified. Once 
         the status for any column in the inserted row changes to Modified, the row status changes to NewAndModified.
         When a DataWindow column has a default value, the column's item status does not change to Modified until the 
         user makes at least one actual change to a column in that row.</para>
				<para>Use <b>SetItemStatus</b> to change the column's status from Modified to NotModified or vice versa. A column marked as NotModified
				will not be included in any UPDATE statements issued by <see cref="M:Sybase.DataWindow.DataWindowChild.UpdateData"/>.</para>
				<para>For more information about setting the status of rows and columns, see the section on updating the 
         database in the <i>DataWindow .NET Programmer's Guide</i>.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.RowStatus)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetItemString(System.Int32,System.Int16,System.String)">
            <overloads>Sets the value of a DataWindow String column. </overloads><summary>Sets the String value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="StringValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store String values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemString</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemString</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemString</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemString(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetItemString(System.Int32,System.String,System.String)">
            <summary>Sets the String value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="StringValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store String values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemString</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemString</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemString</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemString(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetItemSqlString(System.Int32,System.String,System.Data.SqlTypes.SqlString)">
            <summary>Sets the String value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="StringValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store String values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlString</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlString</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlString</b> to override the user's erroneous entry with valid data.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemString(System.Int32,System.Int16,System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetItemSqlString(System.Int32,System.Int16,System.Data.SqlTypes.SqlString)">
            <overloads>Sets the value of a DataWindow String column. </overloads><summary>Sets the String value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="StringValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store String values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemSqlString</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemSqlString</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemSqlString</b> to override the user's erroneous entry with valid data.</para>
				<para>Since SqlTypes support null values, you can set null values directly in lieu of the <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemString(System.Int32,System.Int16,System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemSqlString(System.Int32,System.String,Sybase.DataWindow.DataBuffer,System.Boolean)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetItemTime(System.Int32,System.Int16,System.DateTime)">
            <overloads>Sets the value of a DataWindow Time column. </overloads><summary>Sets the Time value of a column, identified by number, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnNumber">The number of the column whose value is to be changed.</param><param name="TimeValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnNumber</i> is invalid.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnNumber</i> does not store Time values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemTime</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemTime</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemTime</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemTime(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetItemTime(System.Int32,System.String,System.DateTime)">
            <summary>Sets the Time value of a column, identified by name, in the specified row of the Primary buffer. 
      </summary><param name="RowNumber">The row number containing the value to be changed.</param><param name="ColumnName">The name of the column whose value is to be changed.</param><param name="TimeValue">The new value.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is invalid.</exception><exception cref="T:Sybase.DataWindow.InvalidColumnException">
				<i>ColumnName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>ColumnName</i> is null.</exception><exception cref="T:System.InvalidOperationException">
				<i>ColumnName</i> does not store Time values.</exception><exception cref="T:System.NotSupportedException">
				<b>SetItemTime</b> is not supported for a crosstab DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Use <b>SetItemTime</b> when you want to set the value of an item in a DataWindow programmatically rather than by user interaction.
			You might do this when the data the user entered fails validation due to datatype or some business rule. 
			Within the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> and <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> events, 
         you can call <b>SetItemTime</b> to override the user's erroneous entry with valid data.</para>
				<para>You cannot set a value to null using this method; use <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemNull(System.Int32,System.Int16)"/> instead.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemDateTime(System.Int32,System.Int16,System.DateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemSqlDateTime(System.Int32,System.Int16,System.Data.SqlTypes.SqlDateTime)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetItemTime(System.Int32,System.Int16)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetProperty(System.String,System.String)">
            <summary>Sets the value of a DataWindow object property.</summary><param name="Property">The property you want to modify.</param><param name="Value">The value to which you want to set the property, converted to a string.</param><exception cref="T:System.ArgumentNullException">
				<i>Property</i> or <i>Value</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">
				<i>Property</i> or <i>Value</i> is invalid, or an unexpected error has occurred.</exception><remarks>
				<para>You can only set one property at a time with the <b>SetProperty</b> method, while the <see cref="M:Sybase.DataWindow.DataWindowChild.Modify(System.String)"/> method 
         lets you supply multiple properties in a single invocation. Some commonly used properties are also exposed on various descendants
         of the <see cref="T:Sybase.DataWindow.GraphicObject"/> classes and can be set directly.  For example, the following code fragments are 
         semantically equivalent:</para>
				<list type="bullet">
					<item>
						<c>dwReport.SetProperty("t_1.background.color", "0~tRGB(0,255,0)")</c>
					</item>
					<item>
						<c>dwReport.Modify("t_1.background.color='0~tRGB(0,255,0)'")</c>
					</item>
					<item>
						<c>Dim gobText as Sybase.DataWindow.GraphicObjectText</c>
        				<c>gobText = CObj(dwEmp.GetObjectByName("t_1"))</c>
        				<c>gobText.BackgroundColor = System.Drawing.Color.Lime</c>
					</item>
				</list>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.Modify(System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetProperty(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetRow(System.Int32)">
            <summary>Sets the current row in a DataWindow. 
      </summary><param name="RowNumber">The row you want to make current.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not valid.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>SetRow</b> sets the <see cref="P:Sybase.DataWindow.DataWindowChild.CurrentRow"/> property. For a DataWindowControl, the cursor moves to the
			current column at <i>RowNumber</i>, but the DataWindow is not scrolled automatically.  Use <see cref="M:Sybase.DataWindow.DataWindowControl.ScrollToRow(System.Int32)"/> 
			passing <i>RowNumber</i> to ensure the row is visible to the user.</para>
				<para>
					<b>SetRow</b> can trigger the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/>, 
         <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/>,
         <see cref="E:Sybase.DataWindow.DataWindowControl.ItemFocusChanged"/>,
         <see cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanging"/>, and
         <see cref="E:Sybase.DataWindow.DataWindowControl.RowFocusChanged"/> event. Do not call <b>SetRow</b> 
         in any of these events, because a recursive call can cause a stack fault.</para>
			</remarks><seealso cref="P:Sybase.DataWindow.DataWindowChild.CurrentRow"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.RowStatus)">
            <summary>Changes the modification status of a row. 
      </summary><param name="RowNumber">The row number for which you want to set the status.</param><param name="Buffer">The DataWindow buffer that contains the row.</param><param name="Status">The new <see cref="T:Sybase.DataWindow.RowStatus"/>.</param><exception cref="T:Sybase.DataWindow.InvalidRowNumberException">
				<i>RowNumber</i> is not a valid row in <i>Buffer</i>.</exception><exception cref="T:System.NotSupportedException"><b>SetRowStatus</b> is not supported for crosstab DataWindows.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>SetRowStatus</b> changes the modification status of a row; <see cref="M:Sybase.DataWindow.DataWindowChild.SetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.ItemStatus)"/> changes 
         the modification status of an item within a row.</para>
				<para>When data is retrieved into a DataWindow, all rows and columns initially have a status of NotModified. After 
         data has changed in a column in a particular row, either because the user changed the data or the data was changed 
         programmatically, the item status for that column changes to Modified. Once the status for any column in a row changes to Modified,
          the row status also changes to Modified.</para>
				<para>When a row is inserted into a DataWindow, it initially has a row status of New, and all columns in that 
         row initially have an item status of NotModified. After data has changed in a column in the row, either because 
         the user changed the data or the data was changed programmatically 
         (not including the assignment of a default value), the item status changes to Modified. 
          Once 
         the status for any column in an inserted row changes to Modified, the row status changes to NewAndModified.
</para>
				<para>Changing the row status to NotModified will change the item status of all columns in that row to NotModified.</para>
				<para>Use <b>SetRowStatus</b> when you want to change the way a row will be updated. Typically, you do this to 
         prevent the default behavior from taking place. For example, you might copy a row from one DataWindow 
         to another. After the user modifies the row, you would want to issue an UPDATE statement instead of an 
         INSERT statement, since the row already exists in the database. To do so, you would change the row status of the copied row from NewAndModified to just Modified, signalling <see cref="M:Sybase.DataWindow.DataWindowChild.UpdateData"/>
         to generate an UPDATE rather than an INSERT statement.</para>
				<para>For more information about setting the status of rows and columns, see the section on updating the 
         database in the <i>DataWindow .NET Programmer's Guide</i>.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetItemStatus(System.Int32,System.Int16,Sybase.DataWindow.DataBuffer,Sybase.DataWindow.ItemStatus)"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetRowStatus(System.Int32,Sybase.DataWindow.DataBuffer)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetSort(System.String)">
            <summary>Specifies the sort criteria for a DataWindow control or DataStore. 
      </summary><param name="SortExpression">A string whose value is valid sort expression for the DataWindow.</param><exception cref="T:Sybase.DataWindow.InvalidExpressionException">
				<i>SortExpression</i> is not valid</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>A DataWindow object can have sort criteria specified as part of its definition. <b>SetSort</b> overrides 
         the definition, providing new sort criteria for the DataWindow; however, it does not actually sort the rows. 
         Call the <see cref="M:Sybase.DataWindow.DataWindowChild.Sort"/> method to perform the actual sorting.</para>
				<para>
					<i>SortExpression</i> can have one of the forms shown below, depending on whether 
         you specify the column by name or number. (Column numbers must be prefaced by #). <c>Order</c> is either <c>A</c> for ascending or <c>D</c> for descending order. You can 
         specify secondary sorting by specifying criteria for additional columns in the format string. Separate each 
         column specification with a comma.</para>
				<list type="bullet">
					<item>
						<c>columnname order</c>, for instance: <c>"emp_lname A"</c> or <c>"emp_lname A, dept_id D"</c>
					</item>
					<item>
						<c>#columnnumber order</c>, for instance: <c>"#3 A"</c>
					</item>
				</list>
				<para>To allow users to specify their own sort expression for a DataWindowControl, 
				call <see cref="M:Sybase.DataWindow.DataWindowControl.SortDialog"/> to display a dialog box allowing for the construction of the expression. 
         Then you can call <see cref="M:Sybase.DataWindow.DataWindowChild.Sort"/> to apply the dynamically constructed expression to the DataWindowControl.
				</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowControl.SortDialog"/><seealso cref="M:Sybase.DataWindow.DataWindowChild.Sort"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetSqlSelect(System.String)">
            <summary>Specifies the SQL SELECT statement for a DataWindowControl or DataStore.</summary><param name="SqlSyntax">The SQL SELECT syntax</param><exception cref="T:System.InvalidOperationException">
				<see cref="M:Sybase.DataWindow.DataWindowChild.SetTransaction(Sybase.DataWindow.AdoTransaction)"/> has not been executed.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>You must <see cref="M:Sybase.DataWindow.DataWindowChild.SetTransaction(Sybase.DataWindow.AdoTransaction)"/> method to set the transaction object before invoking <b>SetSqlSelect</b>, or
				an exception will result.</para>
				<para>Use <b>SetSqlSelect</b> to dynamically change the SQL SELECT statement for a DataWindow.
         If the DataWindow is updatable, the SELECT statement is validated against the database 
         and the DataWindow column specifications. Each column in the SQL SELECT 
         statement must match the column type in the DataWindow object.</para>
				<para>Use <b>SetSqlSelect</b> only if the data source for the DataWindow object is a SQL SELECT statement without 
         retrieval arguments.  You can use <see cref="M:Sybase.DataWindow.DataWindowChild.Modify(System.String)"/> or <see cref="M:Sybase.DataWindow.DataWindowChild.SetProperty(System.String,System.String)"/> 
         with the <c>DataWindow.Table.Select</c> property
          when retrieval arguments are involved; however, no validation of the SQL statement will occur, making this technique more
          error prone.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.GetSqlSelect"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SetSqlUpdate(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetTransaction(Sybase.DataWindow.AdoTransaction)">
            <summary>Associates a DataWindow with an ADO.NET database connection.
      </summary><param name="AdoTransaction">The <see cref="T:Sybase.DataWindow.AdoTransaction"/> instance referencing the database connection.</param><exception cref="T:System.InvalidOperationException">
				<i>AdoTransaction</i> has not been bound to an ADO.NET connection.</exception><exception cref="T:System.ArgumentNullException">
				<i>AdoTransaction</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In a DataWindow database connection, <i>AdoTransaction</i> is an object that functions 
         as the communications area between the DataWindow and the database. <i>AdoTransaction</i> specifies the 
         parameters for connecting to a database and is a prerequisite for accessing a 
         database via DataWindow .NET using ADO.NET.</para>
				<para>To connect to a database using an ADO.NET connection, you perform the following general steps:
         <list type="number">
						<item>Create a new ADO.NET IDbConnection reference and set its properties. In the initial release of DataWindow .NET, only 
         			<see cref="T:System.Data.OleDb.OleDbConnection"/> is supported.</item>
						<item>Open the connection.</item>
						<item>Create an <see cref="T:Sybase.DataWindow.AdoTransaction"/> object passing the IDBConnection
						reference to its constructor.</item>
						<item>
							<see cref="M:Sybase.DataWindow.AdoTransaction.BindConnection"/> the ADO.NET connection to the internal DataWindow .NET
         database interaction layer.</item>
						<item>Call <b>SetTransaction</b> to associate the transaction with a DataWindow.</item>
						<item>Perform various database operations, such as <see cref="M:Sybase.DataWindow.DataWindowChild.Retrieve(System.Data.DataTable)"/> and <see cref="M:Sybase.DataWindow.DataWindowChild.UpdateData"/>.</item>
						<item>Close the ADO.NET connection.</item>
					</list>
				</para>
			</remarks><example>This C# example retrieves and updates a simple DataStore using an ADO.NET connection to Adaptive Server Anywhere 
			(exception handling has been omitted for brevity) :
         <code>
         System.Data.OleDbConnection oleDbConn = new System.Data.OleDb.OleDbConnection();
         oleDbConn.ConnectionString="User ID=dba;Password=sql;Data Source=mydb;Provider=ASAProv.90";
         oleDbConn.Open();
         
         Sybase.DataWindow.AdoTransaction adoTrans = new Sybase.DataWindow.AdoTransaction(oleDbConn);
         adoTrans.BindConnection();
         
         Sybase.DataWindow.DataStore ds = new Sybase.DataWindow.DataStore("hr.pbl","employees");
         ds.SetTransaction(adoTrans);
         ds.Retrieve();
         
         adoTrans.Transaction = adoTrans.Connection.BeginTransaction();
         ds.SetItemString(1,2,"New Hire");
         ds.UpdateData();
         adoTrans.Transaction.Commit();
         
         adoTrans.Connection.Close();
         </code>
			</example><seealso cref="M:Sybase.DataWindow.AdoTransaction.BindConnection"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetTransaction(Sybase.DataWindow.Transaction)">
            <overloads>Associates a DataWindow with a physical database connection.</overloads><summary>Associates a DataWindow with a database connection made via a native DataWindow .NET database connection.
      </summary><param name="Transaction">The <see cref="T:Sybase.DataWindow.Transaction"/> instance referencing the database connection.</param><exception cref="T:System.ArgumentNullException">
				<i>Transaction</i> is null.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>In a DataWindow database connection, <i>Transaction</i> is an object that functions 
         as the communications area between the DataWindow and the database. <i>Transaction</i> specifies the 
         parameters for connecting to a database and is a prerequisite for accessing a 
         database via DataWindow .NET when using Sybase-provided database interfaces. <note>You cannot use a
         <see cref="T:Sybase.DataWindow.Transaction"/> to access the database outside of a DataWindow .NET method.  You can do this using
         the <see cref="T:Sybase.DataWindow.AdoTransaction"/> class, however.</note>
				</para>
				<para>The following general steps apply: 
         <list type="number">
						<item>Create a <see cref="T:Sybase.DataWindow.Transaction"/> object instance. </item>
						<item>Set its properties.</item>
						<item>
							<see cref="M:Sybase.DataWindow.Transaction.Connect"/> to the database.</item>
						<item>Call <b>SetTransaction</b> to associate object to a DataWindow.</item>
						<item>Perform various database operations, such as <see cref="M:Sybase.DataWindow.DataWindowChild.Retrieve(System.Data.DataTable)"/> and <see cref="M:Sybase.DataWindow.DataWindowChild.UpdateData"/>.</item>
						<item>
							<see cref="M:Sybase.DataWindow.Transaction.Disconnect"/> from the database. </item>
					</list>
				</para>
			</remarks><example>This example connects to the database using the Sybase-provided ODBC interface and uses that connection to 
			retrieve the <c>dwDepartment</c> DataWindowControl:
         <code>
         sqlca = new Sybase.DataWindow.Transaction;
         sqlca.Dbms = Sybase.DataWindow.DbmsType.Odbc;
         sqlca.DbParameter = "ConnectString='DSN=EAS Demo DB V10;UID=dba;PWD=sql'";
         try
         {
         	sqlca.Connect();
         	dwDepartment.SetTransaction(sqlca);
        		dwDepartment.Retrieve();
         } catch (System.Exception ex) {
         	HandleException(ex);
         }
         </code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.SetWSConnection(Sybase.DataWindow.WebServiceConnection)">
            <summary>Specifies overrides for a DataWindow or DataStore's web service connection</summary><param name="wsObject">The <see cref="T:Sybase.DataWindow.WebServiceConnection"/> containing the override values.</param>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.ShareData(Sybase.DataWindow.IDataWindowBase)">
            <summary>Shares data retrieved by one DataWindow which is referred with another DataWindow</summary><param name="TargetDW">The (secondary) DataWindow that will share the primary DataWindow's data.</param><exception cref="T:System.ArgumentException">Primary DataWindow cannot be shared with <i>TargetDW</i> due to 
			incompatible formats.</exception><exception cref="T:System.ArgumentNullException">
				<i>TargetDW</i> is null.</exception><exception cref="T:System.NotSupportedException">Crosstab and composite DataWindows cannot be shared, nor can the initiator of <b>ShareData</b>
			be a DataWindowChild nested in composite DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>The primary and secondary DataWindows do not share formatting; only the data is shared, including data in the
         Primary, Delete buffer, and Filter buffer, as well as the sort criteria. The columns must be the same for the 
         DataWindow objects, but the SELECT statements can be different. For example, you could share data among DataWindow objects with 
         these SELECT statements:</para>
				<list type="bullet">
					<item>
						<c>SELECT dept_id from dept</c>
					</item>
					<item>
						<c>SELECT dept_id from dept where dept_id = 200</c>
					</item>
					<item>
						<c>SELECT dept_id from employee</c>
					</item>
				</list>
				<para>The WHERE clause in the DataWindow object of <i>TargetDW</i> has no effect on the 
         number of rows returned. The number of rows returned to both DataWindow controls is determined by the 
         WHERE clause in the DataWindow which invoked <b>ShareData</b>.</para>
				<para>When you call methods in either the primary or secondary DataWindow that change the data, 
         messages normally associated with the method are routed to the primary DataWindow 
          and all secondary DataWindows are affected. Such methods include:
         DeleteRow, Filter, FilterDialog, GetSqlSelect, ImportFile, ImportString, ImportClipboard, InsertRow, ReselectRow,
         Reset, Retrieve, SetFilter, SetSort, SetSqlSelect, Sort, SortrDialog, and UpdateData.</para>
				<para>
					<b>ShareData</b> does not automatically share data among DropDownDataWindows
				 in the primary or secondary DataWindows. You must do this explicitly by getting a handle to the DropDownDataWindow 
         using <see cref="M:Sybase.DataWindow.DataWindowChild.GetChild(System.String)"/> and either retrieving the DropDownDataWindow or using <b>ShareData</b>
         to share data from an appropriate data source with the DropDownDataWindow.</para>
				<para>To turn off sharing in a primary or secondary DataWindow, call the <see cref="M:Sybase.DataWindow.DataWindowChild.ShareDataOff"/> method. When 
         sharing is turned off for the primary DataWindow, the secondary DataWindows are disconnected and 
         the data disappears. However, turning off sharing for a secondary DataWindow does not affect the 
         data in the primary DataWindow or other secondary DataWindows.</para>
				<para>You cannot use <b>ShareData</b> to share data among application boundaries, <see cref="M:Sybase.DataWindow.IDataStore.GetFullState"/>
				for information on how to manage DataWindows in .NET remoting applications.</para>
				<para>Trying to set 
         the QueryMode or QuerySort DataWindow object properties on a secondary DataWindow is not supported and
         results in an exception.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.ShareDataOff"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.ShareDataOff">
            <summary>Turns off the sharing of data buffers for a DataWindow.</summary><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>When you call <b>ShareDataOff</b> for a secondary 
         DataWindow, that control no longer contains data, but the primary DataWindow and other secondary controls 
         are not affected. When you call <b>ShareDataOff</b> for the primary DataWindow, all secondary DataWindows are 
         disconnected and no longer contain data. 
      </remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.ShareData(Sybase.DataWindow.IDataWindowBase)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.Sort">
            <summary>Sorts the rows in a DataWindow using the current sort criteria. 
      </summary><exception cref="T:System.NotSupportedException">
				<b>Sort</b> is not supported for a composite DataWindow.</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>To change the sort criteria from the default specified in DataWindow Designer, use
         <see cref="M:Sybase.DataWindow.DataWindowChild.SetSort(System.String)"/> or <see cref="M:Sybase.DataWindow.DataWindowControl.SortDialog"/> (the latter
         for DataWindowControls only).</para>
				<para>When the <see cref="M:Sybase.DataWindow.DataWindowChild.Retrieve(System.Data.DataTable)"/> method retrieves data for the DataWindow, it automatically applies the current
				sort criteria. You only need to call <b>Sort</b> after you 
         change the criteria or if the data have changed because of processing or user input.</para>
				<para>After sorting a DataWindow object that includes groups, 
         call <see cref="M:Sybase.DataWindow.DataWindowChild.CalculateGroups"/> to ensure the groupings take into account changes in the sort order.</para>
				<para>When the Retrieve As Needed DataWindow object property is set, <b>Sort</b> method cancels its effect, because 
         all rows must be retrieved to be sorted correctly.</para>
				<para>When you sort a DataWindow on a specified column, rows with null data remain at the top, regardless of 
         whether you choose ascending or descending order for your sort criteria.</para>
				<para>The sort order is performed 
         on a result set returned from a database, but is not necessarily the same sort order used by the database 
          when an ORDER BY clause is used in a SQL query.</para>
				<para>
					<b>Sort</b> method uses a typical 
         lexical sort, with symbols, such as a hyphen or underline, ranked higher than alphanumeric characters.</para>
			</remarks><example>This example sort <c>dwEmployee</c> by column 1 in ascending order.  Rows with identical values in the first column
			are further sorted by column 2 in descending order:
         <code>
         dwEmployee.SetSort("#1 A, #2 D")
         dwEmployee.Sort()
         </code>
			</example><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetSort(System.String)"/><seealso cref="M:Sybase.DataWindow.DataWindowControl.SortDialog"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.UpdateData">
            <overloads>Updates the database with the changes made in a DataWindow.</overloads><summary>Updates the database with the changes made in a DataWindow and automatically clears the status flags.</summary><exception cref="T:Sybase.DataWindow.DbErrorException">A database error has occurred.</exception><exception cref="T:System.InvalidOperationException">
				<list type="bullet">
					<item>The DataWindow is not updatable, or</item>
					<item>the associated <see cref="T:Sybase.DataWindow.Transaction"/> or <see cref="T:Sybase.DataWindow.AdoTransaction"/> is not 
				connected to the database.</item>
				</list>
			</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>This overload of <b>UpdateData</b> resets the row and item status flags after successfully completing the update. 
				However, you 
         can prevent the flags from being reset until you perform other validations and commit the changes by
         calling one of the overloaded versions of <b>UpdateData</b> and setting the <i>ResetUpdateFlags</i> argument to <c>false</c>. You would then
         later call <see cref="M:Sybase.DataWindow.DataWindowChild.ResetUpdateStatus"/> to explicitly refresh the status flags. 
         </para>
				<para>
         For DataWindowControls, this version of <b>UpdateData</b> performs an implicit
          <see cref="M:Sybase.DataWindow.DataWindowControl.AcceptText"/> operation on the data within the edit control when the method is 
          invoked.  This ensures that pending data is moved from the edit control to the Primary buffer before the database 
          update occurs. Overloaded versions of this method allow you to change that behavior.</para>
				<para>Do not call this version of <b>UpdateData</b> in the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/> event.
         The implicit <see cref="M:Sybase.DataWindow.DataWindowControl.AcceptText"/> will trigger another ItemChanged event leading to
         a recursive loop and likely a stack fault.</para>
				<!-- CHECK ON THIS - SEEMS LIKE A BUG?
				<para>If a DataWindowControl or DataStore is populated using SetChanges or SetFullState, and an UpdateData is done that 
         includes deleted rows, the deleted rows remain in the delete buffer until a subsequent GetChanges is applied 
         to the DataWindow or DataStore.</para>
         -->
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetTransaction(Sybase.DataWindow.AdoTransaction)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.UpdateData(System.Boolean)">
            <summary>Updates the database with the changes made in a DataWindow, optionally accepting a pending change in the edit control.</summary><param name="AcceptData">
				<c>true</c> if an <see cref="M:Sybase.DataWindow.DataWindowControl.AcceptText"/> should be 
			performed prior to the update, false otherwise.</param><exception cref="T:Sybase.DataWindow.DbErrorException">A database error has occurred.</exception><exception cref="T:System.InvalidOperationException">
				<list type="bullet">
					<item>The DataWindow is not updatable, or</item>
					<item>the associated <see cref="T:Sybase.DataWindow.Transaction"/> or <see cref="T:Sybase.DataWindow.AdoTransaction"/> is not 
				connected to the database.</item>
				</list>
			</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Since <see cref="M:Sybase.DataWindow.DataWindowControl.AcceptText"/> applies only to DataWindowControls, this overload is 
				identical to the parameterless version of <b>UpdateData</b> when invoked on a DataStore or DataWindowChild.</para>
				<para>Use this version of <b>UpdateData</b> to ignore any pending changes in the DataWindowControl's edit control
				before performing the update. Changes in the edit control are automatically validated when the user moves from 
				column to column within the control;
				however, if focus leaves the DataWindowControl completely (for instance, a command button is pressed) the last changes made
				in the edit control are not automatically applied to the Primary buffer.  If you want that data to be included in the update, 
				set <i>AcceptData</i> to <c>true</c> (or use the parameterless version of <b>UpdateData</b>).</para>
				<para>If you call <b>UpdateData</b> in the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/>
				event, be sure to set the <i>AcceptData</i> argument to <c>false</c> to 
         avoid an endless loop and a stack fault. If you call <b>UpdateData</b> in that event, the item's old value will be applied
         , not the newly entered value; the new value is not in place until the event completes.
           If you want to include the new value, use an appropriate SetItem method within the event script.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetTransaction(Sybase.DataWindow.AdoTransaction)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.UpdateData(System.Boolean,System.Boolean)">
            <summary>Updates the database with the changes made in a DataWindow, optionally accepting a pending change in the edit control and
			resetting status flags.</summary><param name="AcceptData">
				<c>true</c> if an <see cref="M:Sybase.DataWindow.DataWindowControl.AcceptText"/> should be 
			performed prior to the update, false otherwise.</param><param name="ResetUpdateFlags">
				<c>true</c> if an row and item status flags should be automatically reset, <c>false</c> if they should
			be retained.</param><exception cref="T:Sybase.DataWindow.DbErrorException">A database error has occurred.</exception><exception cref="T:System.InvalidOperationException">
				<list type="bullet">
					<item>The DataWindow is not updatable, or</item>
					<item>the associated <see cref="T:Sybase.DataWindow.Transaction"/> or <see cref="T:Sybase.DataWindow.AdoTransaction"/> is not 
				connected to the database.</item>
				</list>
			</exception><exception cref="T:Sybase.DataWindow.DataWindowNotCreatedException">There is no DataWindow object associated with this DataWindow.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>You can use this version of <b>UpdateData</b> to ignore any pending changes in the DataWindowControl's edit control
				before performing the update. Changes in the edit control are automatically validated when the user moves from 
				column to column within the control;
				however, if focus leaves the DataWindowControl completely (for instance, a command button is pressed) the last changes made
				in the edit control are not automatically applied to the Primary buffer.  If you want that data to be included in the update, 
				set <i>AcceptData</i> to <c>true</c> (or use the parameterless version of <b>UpdateData</b>).</para>
				<para>If you call <b>UpdateData</b> in the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemChanged"/>
				event, be sure to set the <i>AcceptData</i> argument to <c>false</c> to 
         avoid an endless loop and a stack fault. If you call <b>UpdateData</b> in that event, the item's old value will be applied
         , not the newly entered value; the new value is not in place until the event completes.
           If you want to include the new value, use an appropriate SetItem method within the event script.</para>
				<para>If you want to update several tables in one DataWindow, you can use <see cref="M:Sybase.DataWindow.DataWindowChild.Modify(System.String)"/> or <see cref="M:Sybase.DataWindow.DataWindowChild.SetProperty(System.String,System.String)"/>
				to change the Update property of columns in each table. To preserve the status flags of the rows and columns, set 
         <i>ResetUpdateFlags</i> argument to <c>false</c>. Because the updates all occur in the same DataWindow control or DataStore, 
         you cannot allow the flags to be cleared until all the tables have used them. When all the updates are 
         successfully completed and committed, call <see cref="M:Sybase.DataWindow.DataWindowChild.ResetUpdateStatus"/> to clear the status flags and return the DataWindow to 
         an unmodified state.</para>
				<para>Likewise, if you are updating multiple DataWindows as part of one transaction, set the <i>ResetUpdateFlags</i>
         argument to <c>false</c>. This will prevent each DataWindow from "forgetting" which rows to update in case one of 
         the updates fails. You can roll back, try to correct the situation, and attempt to update again. Once all of the 
         DataWindows have been updated successfully, commit the changes to finalize the 
         transaction and call <see cref="M:Sybase.DataWindow.DataWindowChild.ResetUpdateStatus"/> to reset the status flags.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.DataWindowChild.SetTransaction(Sybase.DataWindow.AdoTransaction)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowChild.GetObjectHandle">
            <summary>
            This method is designed for DataWindow .NET internal usage only and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowChild.DeletedCount">
            <summary>Gets the number of rows that have been marked for deletion in the database. 
      </summary><value>The number of rows currently in the Delete buffer.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowChild.FilteredCount">
            <summary>Gets the number of rows not included in the Primary buffer
         because of the application of a filter criteria. 
      </summary><value>The number of rows currently in the Filter buffer.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowChild.ModifiedCount">
            <summary>Get number of rows that have been modified. 
      </summary><value>The number of modified rows in the DataWindow.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowChild.RowCount">
            <summary>Gets the number of rows in the Primary buffer.</summary><value>The number of rows currently in the Primary buffer.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowChild.ColumnCount">
            <summary>Returns the number of columns in the DataWindow or DataStore. Computed columns are not included in this value.</summary><value>A short read-only value indicating the number of columns.</value><remarks>This property can also be evaluated using a DataWindow object property.  See the <i>DataWindow Object Reference</i> for more information.	</remarks><example>
		<code>
		short ColCount;
		ColCount = dwEmp.ColumnCount;
		</code>
		</example>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowChild.CurrentRow">
            <summary>Gets the number of the current row in a DataWindow.
      </summary><value>The number of the current row in the DataWindow.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowChild.Style">
            <summary>Gets the style of the DataWindow.</summary><value>The style of the DataWindow (e.g., Tabular, Grid, Crosstab).</value><remarks>The Tabular, FreeForm, and Group styles are internally identical; the <b>Style</b> will always be reported as Tabular.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowChild.TypeOfChild">
            <summary>Gets or sets the type of DataWindowChild.</summary><value>The type of DataWindowChild.</value><remarks><para>A DataWindowChild is either a DropDownDataWindow or a report nested in a composite DataWindow. This property
		indicates which of those applies to the current DataWindowChild reference.
		</para>
		</remarks>       
        </member>
        <member name="P:Sybase.DataWindow.DataWindowChild.DataSourceType">
            <!-- No matching elements were found for the following include tag --><include file="DataWindowComments.xml" path="doc/members/member[@name=&quot;P:DataSourceType&quot;]/*"/>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowChild.Syntax">
            <summary>
        Returns the syntax that describes the DataWindow object.
       </summary><value>A string that contains the complete syntax for the DataWindow object.</value><remarks>This property can also be evaluated using a DataWindow object property. See the <i>DataWindow Object Reference</i> for more information.	</remarks><example>
		<code>
String dwSyntax;
dwSyntax = dw_1.Syntax;
		</code>
		</example>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowChild.PrintProperties">
            <summary>
        Gets print properties. For a complete list of properties, see the <see cref="T:Sybase.DataWindow.PrintProperties"/> class.
       </summary>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowChild.ContainsNestedReport">
            <summary>
		Whether the DataWindow contains a nested report.
		</summary><value>A boolean value that is true if the DataWindow contains a nested reported and false otherwise.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowChild.TreeViewProperties">
            <summary>
        Gets properties for a TreeView style DataWindow. For a complete list of properties, see the <see cref="T:Sybase.DataWindow.TreeViewProperties"/> class.
       </summary>
        </member>
        <member name="T:Sybase.DataWindow.TransactionDesigner">
            <summary>
            Summary description for TransactionDesigner.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.Transaction">
            <summary>Associates a DataWindow with a database using Sybase-provided native driver interfaces.</summary>
        </member>
        <member name="M:Sybase.DataWindow.Transaction.#ctor(System.ComponentModel.IContainer)">
            <overloads>Initializes a new instance of the <b>Transaction</b> class.</overloads><summary>Initializes a new instance of the <b>Transaction</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.Transaction.#ctor">
            <overloads>Initializes a new instance of the <b>Transaction</b> class.</overloads><summary>Initializes a new instance of the <b>Transaction</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.Transaction.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of the <b>Transaction</b> class.</summary><param name="ExternalDbiBlock">Pointer to internal structure.</param><remarks>This constructor is for internal use only and should not be explicitly called within applications
			that use DataWindow .NET.</remarks>		
        </member>
        <member name="M:Sybase.DataWindow.Transaction.Connect">
            <summary>Connects to the database specified by the properties of the <b>Transaction</b>.</summary><exception cref="T:System.InvalidOperationException">Transaction is already connected to the database.</exception><exception cref="T:Sybase.DataWindow.TransactionException">Connection has failed.</exception><example>The following code examples shows a connection to Adaptive Server Enterprise.  The ServerName property
			   refers to a logical server defined on the client machine via the Sybase DSEdit utility that accompanies
			   OpenClient.
			<code lang="Visual Basic">
				Dim SQLCA As New Transaction
				
				SQLCA.Dbms = DbmsType.SybaseAse
				SQLCA.ServerName = "ase125"
				SQLCA.UserId = "john"
				SQLCA.Password = "fuzzies"
				SQLCA.Database = "pubs2"
				SQLCA.DbParameter = "Release='12.5'"
				
				Try
				    SQLCA.Connect()
				Catch ex As TransactionException
				    MsgBox("Connection Failed: " + ex.SqlErrorText, MsgBoxStyle.Critical)
				End Try
        </code>
        <code lang="C#">
				Transaction SQLCA;
				
				SQLCA = new Transaction();
				SQLCA.Dbms = DbmsType.SybaseAse;
				SQLCA.ServerName = "ase125";
				SQLCA.UserId = "john";
				SQLCA.Password = "fuzzies";
				SQLCA.Database = "pubs2";
				SQLCA.DbParameter = "Release='12.5'";
				try 
				{
					SQLCA.Connect();
				} 
				catch (TransactionException ex)
				{
					MessageBox.Show("Connection Failed: " + ex.SqlErrorText, "Application Error", 
						MessageBoxButtons.OK, MessageBoxIcon.Error );
				}
        </code>
        </example><seealso cref="M:Sybase.DataWindow.Transaction.Disconnect"/>
        </member>
        <member name="M:Sybase.DataWindow.Transaction.Disconnect">
            <summary>Disconnects from the database.</summary><seealso cref="M:Sybase.DataWindow.Transaction.Connect"/>
        </member>
        <member name="M:Sybase.DataWindow.Transaction.Commit">
            <summary>Commits all database changes since the last commit or rollback.</summary><exception cref="T:System.InvalidOperationException"><b>Transaction</b> is not connected to the database.</exception><exception cref="T:Sybase.DataWindow.TransactionException">An error occurred during the operation.</exception><seealso cref="M:Sybase.DataWindow.Transaction.Rollback"/>
        </member>
        <member name="M:Sybase.DataWindow.Transaction.Rollback">
            <summary>Rolls back all database changes since the last commit or rollback.</summary><exception cref="T:System.InvalidOperationException">Transaction is not connected to the database.</exception><exception cref="T:Sybase.DataWindow.TransactionException">An error occurred during the operation.</exception><seealso cref="M:Sybase.DataWindow.Transaction.Commit"/>
        </member>
        <member name="M:Sybase.DataWindow.Transaction.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.Transaction.Dbms">
            <summary>Gets or sets the database vendor identifier.</summary><value>The database vendor identifier.</value>
            
        </member>
        <member name="P:Sybase.DataWindow.Transaction.Database">
            <summary>Gets or sets name of the database to which you are connecting.</summary><value>The name of the database.</value>
            
        </member>
        <member name="P:Sybase.DataWindow.Transaction.UserId">
            <summary>Gets or sets the ID of the user logging in to the database.</summary><value>The user ID.</value>
            
        </member>
        <member name="P:Sybase.DataWindow.Transaction.Password">
            <summary>Gets or sets the password used to log in to the database.</summary><value>The database password.</value>
            
        </member>
        <member name="P:Sybase.DataWindow.Transaction.ServerName">
            <summary>Gets or sets the name of the server on which the database resides.</summary><value>The server name.</value><remarks><para>This value corresponds to a vendor-specific server name configured using a tool 
			    accompanying that vendor's client software.  For instance, Oracle connections require that the
			    server name be configured in the <c>tnsnames.ora</c> file via the Net Configuration Assistant.
			    Connections to Sybase Adaptive Server Enterprise require that the server name be defined in the
			    <c>sql.ini</c> file that is configured using the tool DSEdit.</para>
			    <para>Consult the <i>Connection Reference</i> for additional guidelines.</para>
			</remarks>
            
        </member>
        <member name="P:Sybase.DataWindow.Transaction.Lock">
            <summary>Gets or sets the isolation level.</summary><value>The isolation level.</value><remarks>The isolation level is a string whose value varies depending on the <see cref="P:Sybase.DataWindow.Transaction.Dbms"/> being used. 
			   Consult the <i>Connection Reference</i> for more information on the valid options for your database.</remarks>
            
        </member>
        <member name="P:Sybase.DataWindow.Transaction.DbParameter">
            <summary>Gets or sets additional connection parameters.</summary><value>Comma-delimited string of additional connection parameters.</value><remarks>
				<para>The parameter values vary depending on the <see cref="P:Sybase.DataWindow.Transaction.Dbms"/> used.  As an example, for ODBC connections, 
				      you specify the Data Source Name (DSN) in a <c>ConnectionString</c> parameter within this property.</para>
				<para>Consult the <i>Connection Reference</i> for more information on specific parameter values.</para>
			</remarks><example>The following code sets the information for a connection to a Microsoft SQLServer identified by the
			  ODBC data source name 'finance' and establishes that connection using the credentials of the current user (versus SQLServer 
			  specific authentication).
			<code lang="Visual Basic">
				Dim SQLCA As New Transaction
				
				SQLCA.Dbms = DbmsType.Odbc
				SQLCA.DbParameter = "ConnectString='DSN=finance;database=fy2003',ConnectOption='SQL_INTEGRATED_SECURITY,SQL_IS_ON'"				
        </code>
        <code lang="C#">
				Transaction SQLCA;
				
				SQLCA = new Transaction();
				SQLCA.Dbms = DbmsType.Odbc;
				SQLCA.DbParameter = "ConnectString='DSN=finance;database=fy2004',ConnectOption='SQL_INTEGRATED_SECURITY,SQL_IS_ON'";
        </code>		
        </example>
            
        </member>
        <member name="P:Sybase.DataWindow.Transaction.AutoCommit">
            <summary>Gets or sets the auto commit mode.</summary><value>The auto commit mode.</value><remarks><para>If <c>false</c>, changes are not automatically committed, and it is up to the user to provide transactional logic using
            the <see cref="M:Sybase.DataWindow.Transaction.Commit"/> and <see cref="M:Sybase.DataWindow.Transaction.Rollback"/> methods.  
            If <c>true</c>, then each statement issued to the database is irreversible.</para>
            <para>When you change <b>AutoCommit</b> from <c>true</c> to <c>false</c>, DataWindow .NET initiates a 
            transaction on the target database (via an explicit BEGIN TRAN statement, for instance).  When you change <b>AutoCommit</b>
            from <c>false</c> to <c>true</c>, DataWindow .NET issues an explicit COMMIT statement against the database.</para>
        </remarks>
            
        </member>
        <member name="P:Sybase.DataWindow.Transaction.RowsAffected">
            <summary>Gets the number of rows affected by the last database operation.</summary><value>The number of rows affected.</value><remarks>
			<para>This value is not meaningful for DataWindow operations. Use the following constructs depending on the information desired:</para>
			<list type="bullet">
				<item>For the current number of rows, use the <see cref="P:Sybase.DataWindow.IDataWindowBase.RowCount"/> property.</item>
				<item>For the number of rows after a call to <see cref="M:Sybase.DataWindow.IDataWindowBase.Retrieve(System.Data.DataTable)"/>, use the <see cref="P:Sybase.DataWindow.EndRetrieveEventArgs.RowCount"/> property of <see cref="T:Sybase.DataWindow.EndRetrieveEventArgs"/> in the <see cref="E:Sybase.DataWindow.IDataStore.EndRetrieve"/>.</item>
				<item>For the number of rows updated, inserted or deleted after a call to <see cref="M:Sybase.DataWindow.IDataWindowBase.UpdateData"/>, use the properties of <see cref="T:Sybase.DataWindow.EndUpdateEventArgs"/> in the <see cref="E:Sybase.DataWindow.IDataStore.EndUpdate"/>.</item>
			</list>
			</remarks>
        </member>
        <member name="P:Sybase.DataWindow.Transaction.ReturnData">
            <summary>Gets vendor-specific information regarding the database.</summary><value>The vendor-specific database information.</value><remarks><para> 
			   For ODBC connections, <b>ReturnData</b> contains the <b>SQL_DBMS_NAME</b> returned by the ODBC API call <c>SQLGetInfo</c>.  This string is used
			   when consulting the PBODB INI file for vendor-specific ODBC extensions and behaviors.</para>
			   <para>For other database interfaces, this property contains the empty string ("").</para>
			</remarks>
        </member>
        <member name="P:Sybase.DataWindow.Transaction.DbHandle">
            <summary>Gets the native handle for the database connection.</summary><value>The native handle.</value><remarks>
				<b>DbHandle</b> can be used to invoke native API calls on the underlying database interface layer, such as ODBC, 
				Oracle OCI, or Sybase OpenClient.
			</remarks>
        </member>
        <member name="P:Sybase.DataWindow.Transaction.IsConnected">
            <summary>Tests whether the Transaction is connected.</summary><value>The connection status.</value><remarks>
				<c>true</c> is returned if the Transaction was successfully connected (and not explicitly disconnected) within the application.
				  If the backend database were subsequently taken off line, <b>IsConnected</b> would still return <c>true</c>.  
				  The only way to determine if the connection is valid
             at any given time is to issue a request over the connection and see if there is a response.
         </remarks>
        </member>
        <member name="T:Sybase.DataWindow.DbmsType">
            <summary>Database vendor identifier.</summary><remarks>This enumeration is used to assign values to the <see cref="P:Sybase.DataWindow.Transaction.Dbms"/> property of a 
			<see cref="T:Sybase.DataWindow.Transaction"/> to identify the
			database targeted by the connection.  Each database interface makes use of an interface DLL and requires vendor-specific
			client software in order to work correctly.  The interface DLL must be found in the path in order for the connection to 
			succeed.  Requirements on location and configuration of vendor-specific software are further detailed in the <i>Connecting To Your Database</i> manual.			</remarks>
        </member>
        <member name="F:Sybase.DataWindow.DbmsType.DirectConnect">
            <summary><table class="dtTABLE" cellspacing="0" style="border-style: none">
			   <tr valign="top"><td style="border-style: none" width="100"><i>Target:</i></td><td style="border-style: none">Sybase DirectConnect for OS/390 and Sybase MainframeConnect</td></tr>
				<tr valign="top"><td style="border-style: none" width="100"><i>Interface DLL:</i></td><td style="border-style: none"><c>PBDIR110.dll</c></td></tr>
				<tr valign="top"><td style="border-style: none" width="100"><i>Client Software:</i></td><td style="border-style: none">Sybase OpenClient</td></tr>
				</table>
			</summary>
        </member>
        <member name="F:Sybase.DataWindow.DbmsType.Informix9">
            <summary><table class="dtTABLE" cellspacing="0" style="border-style: none">
			   <tr valign="top"><td style="border-style: none" width="100"><i>Target:</i></td><td style="border-style: none">IBM-Informix Dynamic Server, Informix-OnLine, and Informix-SE</td></tr>
				<tr valign="top"><td style="border-style: none" width="100"><i>Interface DLL:</i></td><td style="border-style: none"><c>PBIN9110.dll</c></td></tr>
				<tr valign="top"><td style="border-style: none" width="100"><i>Client Software:</i></td><td style="border-style: none">Informix-Connect version 9.x</td></tr>
				</table>
			</summary>
        </member>
        <member name="F:Sybase.DataWindow.DbmsType.Oracle8i">
            <summary><table class="dtTABLE" cellspacing="0" style="border-style: none">
			   <tr valign="top"><td style="border-style: none" width="100"><i>Target:</i></td><td style="border-style: none">Oracle 8.0.x and Oracle 8i</td></tr>
				<tr valign="top"><td style="border-style: none" width="100"><i>Interface DLL:</i></td><td style="border-style: none"><c>PBO84110.dll</c></td></tr>
				<tr valign="top"><td style="border-style: none" width="100"><i>Client Software:</i></td><td style="border-style: none">Oracle 8i Database Client</td></tr>
				</table>
			</summary>
        </member>
        <member name="F:Sybase.DataWindow.DbmsType.Oracle9i">
            <summary><table class="dtTABLE" cellspacing="0" style="border-style: none">
			   <tr valign="top"><td style="border-style: none" width="100"><i>Target:</i></td><td style="border-style: none">Oracle 9i and later</td></tr>
				<tr valign="top"><td style="border-style: none" width="100"><i>Interface DLL:</i></td><td style="border-style: none"><c>PBO90110.dll</c></td></tr>
				<tr valign="top"><td style="border-style: none" width="100"><i>Client Software:</i></td><td style="border-style: none">Oracle 9i Database Client</td></tr>
				</table>
			</summary>
        </member>
        <member name="F:Sybase.DataWindow.DbmsType.Oracle10g">
            <summary><table class="dtTABLE" cellspacing="0" style="border-style: none">
			   <tr valign="top"><td style="border-style: none" width="100"><i>Target:</i></td><td style="border-style: none">Oracle 10g and later</td></tr>
				<tr valign="top"><td style="border-style: none" width="100"><i>Interface DLL:</i></td><td style="border-style: none"><c>PBO10110.dll</c></td></tr>
				<tr valign="top"><td style="border-style: none" width="100"><i>Client Software:</i></td><td style="border-style: none">Oracle 10g Database Client</td></tr>
				</table>
			</summary>
        </member>
        <member name="F:Sybase.DataWindow.DbmsType.Odbc">
            <summary><table class="dtTABLE" cellspacing="0" style="border-style: none">
			   <tr valign="top"><td style="border-style: none" width="100"><i>Target:</i></td><td style="border-style: none">Any ODBC data source</td></tr>
				<tr valign="top"><td style="border-style: none" width="100"><i>Interface DLL:</i></td><td style="border-style: none"><c>PBODB110.dll</c></td></tr>
				<tr valign="top"><td style="border-style: none" width="100"><i>Client Software:</i></td><td style="border-style: none">MDAC 2.6</td></tr>
				</table>
			</summary>
        </member>
        <member name="F:Sybase.DataWindow.DbmsType.OleDb">
            <summary><table class="dtTABLE" cellspacing="0" style="border-style: none">
			   <tr valign="top"><td style="border-style: none" width="100"><i>Target:</i></td><td style="border-style: none">Any OLE-DB provider</td></tr>
				<tr valign="top"><td style="border-style: none" width="100"><i>Interface DLL:</i></td><td style="border-style: none"><c>PBOLE110.dll</c></td></tr>
				<tr valign="top"><td style="border-style: none" width="100"><i>Client Software:</i></td><td style="border-style: none">MDAC 2.6</td></tr>
				</table>
			</summary>
        </member>
        <member name="F:Sybase.DataWindow.DbmsType.SybaseAse">
            <summary><table class="dtTABLE" cellspacing="0" style="border-style: none">
			   <tr valign="top"><td style="border-style: none" width="100"><i>Target:</i></td><td style="border-style: none">Sybase Adaptive Server Enterprise versions 11 through 12.5.x</td></tr>
				<tr valign="top"><td style="border-style: none" width="100"><i>Interface DLL:</i></td><td style="border-style: none"><c>PBSYC110.dll</c></td></tr>
				<tr valign="top"><td style="border-style: none" width="100"><i>Client Software:</i></td><td style="border-style: none">Sybase OpenClient (version 12.5 or later is needed to access some features introduced in ASE 12.5.)</td></tr>
				</table>
			</summary>
        </member>
        <member name="F:Sybase.DataWindow.DbmsType.SybaseAse15">
            <summary><table class="dtTABLE" cellspacing="0" style="border-style: none">
			   <tr valign="top"><td style="border-style: none" width="100"><i>Target:</i></td><td style="border-style: none">Sybase Adaptive Server Enterprise versions 15.x</td></tr>
				<tr valign="top"><td style="border-style: none" width="100"><i>Interface DLL:</i></td><td style="border-style: none"><c>PBASE110.dll</c></td></tr>
				<tr valign="top"><td style="border-style: none" width="100"><i>Client Software:</i></td><td style="border-style: none">Sybase OpenClient (version 15.x is needed to access some features introduced in ASE 15.x.)</td></tr>
				</table>
			</summary>
        </member>
        <member name="T:Sybase.DataWindow.LibraryListForm">
            <summary>
            Summary description for LibraryList.
            </summary>
        </member>
        <member name="F:Sybase.DataWindow.LibraryListForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.LibraryListForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.LibraryListForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.DataStoreDesigner">
            <summary>
            Summary description for DataStoreDesigner.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.Data">
            <summary>
            Represents the data rows and columns in a DataWindow data buffer. There are Data objects for the
            PrimaryData buffer, the FilteredData buffer and the DeletedData buffer. The rows and column
            values are typically accessed with indexers. Row and column number values in the indexers must be
            greater than 0. Data values are returned as an Object for a single item or as an array of Objects 
            for multiple items.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.Data.GetRow(System.Int32)">
            <summary>
            Returns an instance of the DataWindowRow class, representing a row in a DataBuffer.
            </summary>
            <param name="rowNumber">The number of the row to be returned.</param>
            <returns>An instance of the DataWindowRow class corresponding to the rowNumber argument.</returns>
        </member>
        <member name="P:Sybase.DataWindow.Data.Rows">
            <summary>
            Access to current data values in all rows in this Data buffer (PrimaryData, FilteredData, or DeletedData).
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.Data.OriginalValues">
            <summary>
            Access to original data values in all rows in this Data buffer (PrimaryData, FilteredData, or DeletedData).
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.Data.Item(System.Int32,System.Int32)">
            <overloads>
            Access to  current or original data values in one or more rows.
            </overloads>
            <summary>
            Access to current data values in a range of data rows.
            </summary>
            <value>
            An array of row objects, each of which is an array of column value objects.
            </value>
            <remarks>
            Specify two integer arguments, startRow and endRow, to indicate the first and last rows in the 
            range of data rows to be returned. Each item in the array returned is a row object. 
            Each row object is itself an array of column values. The size of each row object array is the 
            number of columns in the DataWindow object.
            </remarks>
            <example> 
            The following code returns an array of 41 row objects in the Object array O. Each of these row 
            objects is an array of objects containing data values in the primary buffer.
            <code> 
            Object [] O = dw_1.PrimaryData [ 10, 50 ]; 
            </code>
            </example>
        </member>
        <member name="P:Sybase.DataWindow.Data.Item(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Access to data values in a range of data rows, specifying whether you want original or
            current data.
            </summary>
            <value>
            An array of row objects, each of which is an array of column value objects.
            </value>
            <remarks>
            Specify two integer arguments, startRow and endRow, to indicate the first and last rows in the 
            range of data rows to be returned and a boolean argument to indicate whether you want original
            values (true) or current values (false). Each item in the array returned is a row object. 
            Each row object is itself an array of column values. The size of each row object array is the 
            number of columns in the DataWindow object.
            </remarks>
            <example> 
            The following code returns an array of 41 row objects in the Object array O. Each of these row 
            objects is an array of objects containing original data values in the primary buffer.
            <code> 
            Object [] O = dw_1.PrimaryData [ 10, 50, true ]; 
            </code>
            </example>
        </member>
        <member name="P:Sybase.DataWindow.Data.Item(System.Int32)">
            <summary>
            Access to current data values in a single row of data.
            </summary>
            <value>
            An array of objects containing the data values for all columns in the row.
            </value>
            <remarks>
            Specify one integer rowNumber to indicate the row data to be returned. Each item returned
            in the array is a row object. Each row object is itself an array of column values.
            The size of each row object array is the number of columns in the DataWindow object.
            </remarks>
            <example>
            The following code returns an array of column values for the indicated row number.
            <code>
            Object [] O = dw_1.PrimaryData [ 5 ];
            </code>
            </example>
        </member>
        <member name="P:Sybase.DataWindow.Data.Item(System.Int32,System.Boolean)">
            <summary>
            Access to data values in a single row of data, specifying whether you want original or
            current data.
            </summary>
            <value>
            An array of objects containing the data values for all columns in the row.
            </value>
            <remarks>
            Specify one integer rowNumber to indicate the row data to be returned and a boolean to
            indicate if original data is returned (true) or not (false. Each item returned
            in the array is a row object. Each row object is itself an array of column values.
            The size of each row object array is the number of columns in the DataWindow object.
            </remarks>
            <example>
            The following code returns an array of column original values for the indicated row number.
            <code>
            Object [] O = dw_1.PrimaryData [ 5, true ];
            </code>
            </example>
        </member>
        <member name="P:Sybase.DataWindow.Data.Item(System.Int32,System.Int16)">
            <summary>
            Access to the current data value of a single column in a single row.
            </summary>
            <remarks>
            Specify one integer argument, rowNumber and one short integer argument, columnNumber to indicate
            the row and column data value to be returned. A single bbject is returned with the data value.
            </remarks>
            <example>
            The folowing code returns a single object containing the data value of the indicated row and column.
            <code>
            Object O = dw_1.PrimaryData [ 5, (short) 3 ];
            </code>
            </example>
        </member>
        <member name="P:Sybase.DataWindow.Data.Item(System.Int32,System.Int16,System.Boolean)">
            <summary>
            Access to the data value of a single column in a single row, specifying whether you want original or
            current data.
            </summary>
            <remarks>
            Specify one integer argument, rowNumber, one short integer argument, columnNumber and one boolean
            argument to indicate the row and column data value to be returned and whether or not to return
            original data (true) or not (false).
            A single object is returned with the data value.
            </remarks>
            <example>
            The following code returns a single object containing the original data value of the indicated row and column.
            <code>
            Object O = dw_1.PrimaryData [ 5, (short) 3, true ];
            </code>
            </example>
        </member>
        <member name="P:Sybase.DataWindow.Data.Item(System.Int32,System.String)">
            <summary>
            Access to the current data value of a single column in a single row.
            </summary>
            <remarks>
            Specify one integer argument, rowNumber and one string argument, columnName to indicate
            the row and column data value to be returned. A single object is returned with the data value.
            </remarks>
            <example>
            The folowing code returns a single object containing the data value of the indicated row and column.
            <code>
            Object O = dw_1.PrimaryData [ 5, "emp_lname" ];
            </code>
            </example>
        </member>
        <member name="P:Sybase.DataWindow.Data.Item(System.Int32,System.String,System.Boolean)">
            <summary>
            Access to the data value of a single column in a single row, specifying whether you want original or
            current data.
            </summary>
            <remarks>
            Specify one integer argument, rowNumber and one string argument, columnName and one boolean argument 
            to indicate the row and column data value to be returned and whether original data is to be returned
            (true) or not (false). A single object is returned with the data value.
            </remarks>
            <example>
            The folowing code returns a single object containing the original data value of the indicated row and column.
            <code>
            Object O = dw_1.PrimaryData [ 5, "emp_lname", true ];
            </code>
            </example>
        </member>
        <member name="P:Sybase.DataWindow.Data.Item(System.Int32,System.Int16,System.Int32,System.Int16)">
            <summary>
            Access to the current data values of a block of row/columns.
            </summary>
            <remarks>
            Specify an integer argument, startRow, a short argument, startCol, an integer argument
            endRow and a short argument endCol to define the data values to return.
            </remarks>
            <example>
            The following code returns an array of objects, the subset of rows from startRow to endRow that
            are themselves arrays of objects, the subset of column values from startCol to endCol.
            <code>
            Object O = dw_1.PrimaryData [ 5, 3, 25, 6 ];
            </code>
            </example>
        </member>
        <member name="P:Sybase.DataWindow.Data.Item(System.Int32,System.Int16,System.Int32,System.Int16,System.Boolean)">
            <summary>
            Access to the data values of a block of row/columns, specifying whether you want original or
            current data.
            </summary>
            <remarks>
            Specify an integer argument, startRow, a short argument, startCol, an integer argument
            endRow a short argument, endCol and boolean argument to define the data values to return.
            </remarks>
            <example>
            The following code returns an array of objects, the subset of rows from startRow to endRow that
            are themselves arrays of objects, the subset of column original values from startCol to endCol.
            <code>
            Object O = dw_1.PrimaryData [ 5, 3, 25, 6, true ];
            </code>
            </example>
        </member>
        <member name="T:Sybase.DataWindow.DataWindowRow">
            <summary>
            Represents a row in a DataBuffer.
            </summary>
            <remarks>
            A DataWindowRow object is obtained using the GetRow ( Int32 rowNumber ) method of the 
            PrimaryData, FilteredData or DeletedData objects. The rowNumber is an index to a row in
            the data buffer. Row numbers in the data buffer can change due to sorts, filters
            row insertions, row deletions etc. When row numbers change due to these reasons the 
            DataRow object can become invalid or it can index to a different set of values in 
            the data buffer.
            </remarks>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowRow.ItemStatus(System.Int16)">
            <summary>
            Returns the status of a data item in the row.
            </summary>
            <param name="columnNumber">The column number for which you want ItemStatus returned.</param>
            <returns>A member of the ItemStatus enumeration.</returns>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowRow.ItemStatus(System.String)">
            <summary>
            Returns the status of a data item in the row.
            </summary>
            <param name="columnName">The column name for which you want ItemStatus returned.</param>
            <returns>A member of the ItemStatus enumeration.</returns>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowRow.ItemStatus(System.Int16,Sybase.DataWindow.ItemStatus)">
            <summary>
            Sets the status of a data item in the row.
            </summary>
            <param name="columnNumber">The column number for which you want to set the ItemStatus.</param>
            <param name="newStatus">The new status to be set, a member of the ItemStatus enumeration.</param>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowRow.ItemStatus(System.String,Sybase.DataWindow.ItemStatus)">
            <summary>
            Sets the status of a data item in the row.
            </summary>
            <param name="columnName">The column name for which you want to set the ItemStatus.</param>
            <param name="newStatus">The new status to be set, a member of the ItemStatus enumeration.</param>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowRow.Status">
             <summary>
             Gets or sets the status of the row.
             </summary>
            <value>A member of the RowStatus enumeration. </value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowRow.Items">
            <summary>
            Returns or sets all the data values for the row.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowRow.OriginalItems">
            <summary>
            Returns original data items in the row.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowRow.Item(System.Int16)">
            <summary>
            Accesses a data value in the row.
            </summary>
            <remarks>
            Specify a single short argument to indicate the column number whose value is to be returned.
            </remarks>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowRow.Item(System.Int16,System.Boolean)">
            <summary>
            Accesses a data value in the row, specifying whether current or original data is returned.
            </summary>
            <remarks>
            Specify a single short argument to indicate the column number whose value is to be returned
            and a boolean indicating whether original data (true) is returned or not (false).
            </remarks>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowRow.Item(System.String)">
            <summary>
            Accesses a data value in the row.
            </summary>
            <remarks>
            Specify a single string argument to indicate the column name whose value is to be returned.
            </remarks>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowRow.Item(System.String,System.Boolean)">
            <summary>
            Accesses a data value in the row, specifying whether current or original data is returned.
            </summary>
            <remarks>
            Specify a single string argument to indicate the column name whose value is to be returned
            and a boolean indicating whether original data (true) is returned or not (false).
            </remarks>
        </member>
        <member name="T:Sybase.DataWindow.SelectedData">
            <summary>
            Represents the selected (highlighted) data rows in a DataWindowControl.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.SelectedData.Rows">
            <summary>
            Access to the current data values in the selected rows.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.SelectedData.OriginalValues">
            <summary>
            Access to the original data values in the selected rows.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.ExpressionBasedProperty">
            <summary>
            An ExpressionBasedProperty is a DataWindow object property that can use a DataWindow 
            expression to produce its value. The expression is a combination of data, operators, and 
            functions that, when evaluated, produce a value. The expression can include DataWindow functions,
            column names, operators, and constants such as numbers or text strings.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.ExpressionBasedProperty.ValueInRow(System.Int32)">
            <summary>
            Computes the evaluated result of an ExpressionBasedProperty for an item in a row.
            </summary>
            <param name="rowNumber"></param>
            <returns>The evaluated result as a String</returns>
        </member>
        <member name="P:Sybase.DataWindow.ExpressionBasedProperty.Expression">
            <summary>
            The DataWindow expression that is used to compute a property's value. 
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.ExpressionBasedProperty.Value">
            <summary>
            The default value for the property as a string. If the Value is set it will replace any
            existing Expression. This is like setting the Expression to a constant.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.StringProperty">
            <summary>
            An ExpressionBasedProperty whose Value is a String.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.FileNameProperty">
            <summary>
            An ExpressionBasedProperty whose value is a FileName
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.FileNameProperty.Value">
            <summary>
            The default value for the property as an FileName. If the Value is set it will replace any
            existing Expression. This is like setting the Expression to a constant. If the file does not
            exist a FileNotFoundException will be thrown. 
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.Int32Property">
            <summary>
            An ExpressionBasedProperty whose Value is an Int32.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.Int32Property.ValueInRow(System.Int32)">
            <summary>
            Computes the evaluated result of an ExpressionBasedProperty for an item in a row.
            </summary>
            <param name="rowNumber"></param>
            <returns>The evaluated result as an Int32</returns>
        </member>
        <member name="P:Sybase.DataWindow.Int32Property.Value">
            <summary>
            The default value for the property as an Int32. If the Value is set it will replace any
            existing Expression. This is like setting the Expression to a constant.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.Int16Property">
            <summary>
            An ExpressionBasedProperty whose Value is an Int16.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.Int16Property.ValueInRow(System.Int32)">
            <summary>
            Computes the evaluated result of an ExpressionBasedProperty for an item in a row.
            </summary>
            <param name="rowNumber"></param>
            <returns>The evaluated result as an Int16</returns>
        </member>
        <member name="P:Sybase.DataWindow.Int16Property.Value">
            <summary>
            The default value for the property as an Int16. If the Value is set it will replace any
            existing Expression. This is like setting the Expression to a constant.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.ColorProperty">
            <summary>
            An ExpressionBasedProperty whose Value is a System.Drawing.Color.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.ColorProperty.ValueInRow(System.Int32)">
            <summary>
            Computes the evaluated result of an ExpressionBasedProperty for an item in a row.
            </summary>
            <param name="rowNumber"></param>
            <returns>The evaluated result as a System.Drawing.Color</returns>
        </member>
        <member name="P:Sybase.DataWindow.ColorProperty.Value">
            <summary>
            The default value for the property as a System.Drawing.Color. If the Value is set it will replace any
            existing Expression. This is like setting the Expression to a constant.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.BooleanProperty">
            <summary>
            An ExpressionBaseProperty whose Value is a Boolean.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.BooleanProperty.ValueInRow(System.Int32)">
            <summary>
            Computes the evaluated result of an ExpressionBasedProperty for an item in a row.
            </summary>
            <param name="rowNumber"></param>
            <returns>The evaluated result as a Boolean</returns>
        </member>
        <member name="P:Sybase.DataWindow.BooleanProperty.Value">
            <summary>
            The default value for the property as a Boolean. If the Value is set it will replace any
            existing Expression. This is like setting the Expression to a constant.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.BorderStyleProperty">
            <summary>
            An ExpressionBaseProperty whose Value is a ColumnBorderStyle.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.BorderStyleProperty.ValueInRow(System.Int32)">
            <summary>
            Computes the evaluated result of an ExpressionBasedProperty for an item in a row.
            </summary>
            <param name="rowNumber"></param>
            <returns>The evaluated result as a ColumnBorderStyle</returns>
        </member>
        <member name="P:Sybase.DataWindow.BorderStyleProperty.Value">
            <summary>
            The default value for the property as a Boolean. If the Value is set it will replace any
            existing Expression. This is like setting the Expression to a constant.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.AlignmentProperty">
            <summary>
            An ExpressionBaseProperty whose Value is Alignment.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.AlignmentProperty.ValueInRow(System.Int32)">
            <summary>
            Computes the evaluated result of an ExpressionBasedProperty for an item in a row.
            </summary>
            <param name="rowNumber"></param>
            <returns>The evaluated result as Alignment</returns>
        </member>
        <member name="P:Sybase.DataWindow.AlignmentProperty.Value">
            <summary>
            The default value for the property as Alignment. If the Value is set it will replace any
            existing Expression. This is like setting the Expression to a constant.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.DataWindowDesigner">
            <summary>
            Summary description for DataWindowDesigner.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.LibraryListControl">
            <summary>
            Summary description for LibraryListControl.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.LibraryListControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Sybase.DataWindow.LibraryListControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.WebServiceConnection">
            <summary>Defines override values for a DataWindow web service connection.</summary>
        </member>
        <member name="P:Sybase.DataWindow.WebServiceConnection.EndPoint">
            <summary>A URL specifying the remote web service location.</summary>
        </member>
        <member name="P:Sybase.DataWindow.WebServiceConnection.UseWindowsIntegratedAuthentication">
            <summary>Whether or not to use the integrated Windows authentication.</summary>
        </member>
        <member name="P:Sybase.DataWindow.WebServiceConnection.AuthenticationMode">
            <summary>"Basic" or "Digest".</summary>
        </member>
        <member name="P:Sybase.DataWindow.WebServiceConnection.UserDomain">
            <summary>The domain the user is working in. Combined with userid and password, this provides a fully qualified user identification.</summary>
        </member>
        <member name="P:Sybase.DataWindow.WebServiceConnection.UserName">
            <summary>The name of the user.</summary>
        </member>
        <member name="P:Sybase.DataWindow.WebServiceConnection.Password">
            <summary>The password of the user.</summary>
        </member>
        <member name="P:Sybase.DataWindow.WebServiceConnection.ClientCertificateFile">
            <summary>
        This property is used to set the certificate file name if required by the Web Service. More than one certificate file may be set.
        Multiple files must be separate by a semicolon (“;”). 
      </summary>
        </member>
        <member name="P:Sybase.DataWindow.WebServiceConnection.ProxyServerHostName">
            <summary>The host name of the proxy server if behind a firewall.</summary>
        </member>
        <member name="P:Sybase.DataWindow.WebServiceConnection.ProxyServerPort">
            <summary>The port number of the proxy server if behind a firewall.</summary>
        </member>
        <member name="P:Sybase.DataWindow.WebServiceConnection.ProxyServerUserName">
            <summary>The username if using a proxy server.</summary>
        </member>
        <member name="P:Sybase.DataWindow.WebServiceConnection.ProxyServerPassword">
            <summary>The username if using a proxy server.</summary>
        </member>
        <member name="P:Sybase.DataWindow.WebServiceConnection.Timeout">
            <summary>The amount of time in seconds to wait for a web service operation to complete.</summary>
        </member>
        <member name="T:Sybase.DataWindow.DataBuffer">
            <summary>Values for specifying the DataWindow buffer containing the rows you want to access.
         Used in many DataWindow methods that access data. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataBuffer.Primary">
            <summary>The Primary buffer containing the current data being manipulated. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataBuffer.Delete">
            <summary>The Delete buffer containing row that have been marked for deletion in the database. 
      </summary><remarks>Rows are not actually deleted from the database until <see cref="M:Sybase.DataWindow.IDataWindowBase.UpdateData"/> is invoked.
      </remarks>
        </member>
        <member name="F:Sybase.DataWindow.DataBuffer.Filter">
            <summary>The Filter buffer containing data that does not meet the current filter criteria and that has been removed from view. 
      </summary><remarks>Use <see cref="M:Sybase.DataWindow.IDataWindowBase.SetFilter(System.String)"/> in conjunction with
      <see cref="M:Sybase.DataWindow.IDataWindowBase.Filter"/> to control what rows are in the Filter buffer.</remarks>
        </member>
        <member name="T:Sybase.DataWindow.DataWindowScrollBars">
            <summary>Values for specifying the appearance of scroll bars in a DataWindowControl. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowScrollBars.None">
            <summary>No scroll bars are shown. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowScrollBars.Horizontal">
            <summary>A horizontal scroll bar is shown. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowScrollBars.HorizontalSplit">
            <summary>A split horizontal scroll bar is shown. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowScrollBars.Vertical">
            <summary>A vertical scroll bars is shown. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowScrollBars.Both">
            <summary>Both horizontal and vertical scroll bars are shown. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowScrollBars.VerticalAndHorizontalSplit">
            <summary>A vertical scroll bar and split horizontal scroll bar are shown. 
      </summary>
        </member>
        <member name="T:Sybase.DataWindow.DataWindowBorderStyle">
            <summary>Values for specifying the appearance of the border of a DataWindowControl. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowBorderStyle.None">
            <summary>No border. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowBorderStyle.FixedSingle">
            <summary>A fixed, single-line border. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowBorderStyle.Fixed3D">
            <summary>A three-dimensional border. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowBorderStyle.Sizable">
            <summary>A resizable border. 
      </summary>
        </member>
        <member name="T:Sybase.DataWindow.ColumnBorderStyle">
            <summary>Values identifying the border style for a column in a DataWindow.</summary>
        </member>
        <member name="F:Sybase.DataWindow.ColumnBorderStyle.None">
            <summary>The data value is not enclosed by a border.</summary>
        </member>
        <member name="F:Sybase.DataWindow.ColumnBorderStyle.ShadowBox">
            <summary>The data value is in a box that has a drop shadow.</summary>
        </member>
        <member name="F:Sybase.DataWindow.ColumnBorderStyle.Box">
            <summary>The data value is surrounded by a rectangular border with no shading.</summary>
        </member>
        <member name="F:Sybase.DataWindow.ColumnBorderStyle.ResizeBorder">
            <summary>The column is resizable; the user can grab the border and drag it.</summary>
        </member>
        <member name="F:Sybase.DataWindow.ColumnBorderStyle.Underline">
            <summary>The data value in the column is underlined.</summary>
        </member>
        <member name="F:Sybase.DataWindow.ColumnBorderStyle.Lowered">
            <summary>The data value has a 3D border with shading to make it appear lowered.</summary>
        </member>
        <member name="F:Sybase.DataWindow.ColumnBorderStyle.Raised">
            <summary>The data value has a 3D border with shading to make it appear raised.</summary>
        </member>
        <member name="T:Sybase.DataWindow.ItemStatus">
            <summary>The modification status of an item (column) in a DataWindow.
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.ItemStatus.NotModified">
            <summary>The information in the column is unchanged. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.ItemStatus.Modified">
            <summary>The information in the column has changed. 
      </summary>
        </member>
        <member name="T:Sybase.DataWindow.RowStatus">
            <summary>The modification status of a row in a DataWindow.
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.RowStatus.NotModified">
            <summary>The information in the row has not changed. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.RowStatus.Modified">
            <summary>The information in at least one of the columns in the row has changed. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.RowStatus.New">
            <summary>The row is new, but no values have been specified for its columns. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.RowStatus.NewAndModified">
            <summary>The row is new, and values have been assigned to its columns. </summary><remarks>In addition to changes caused by user entry or SetItem methods, 
			a new row gets this status when one of its columns has a default value. 
      </remarks>
        </member>
        <member name="T:Sybase.DataWindow.FileSaveAsType">
            <summary>Formats in which DataWindow contents can be saved, and in some cases imported. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.FileSaveAsType.Text">
            <summary> Tab-separated columns with a return at the end of each row (for saving and importing)
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.FileSaveAsType.Csv">
            <summary> Comma-separated values (for saving and importing)
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.FileSaveAsType.SqlInsert">
            <summary> SQL syntax (for saving only)
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.FileSaveAsType.Clipboard">
            <summary>An image of the graph to the system clipboard (for saving only)
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.FileSaveAsType.PSReport">
            <summary>Powersoft Report (PSR) format (for saving only)
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.FileSaveAsType.HtmlTable">
            <summary> HTML TABLE, TR, and TD elements (for saving only)
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.FileSaveAsType.Xml">
            <summary>Extensible Markup Language (for saving and importing)
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.FileSaveAsType.Pdf">
            <summary> Adobe Portable Document Format (for saving only)
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.FileSaveAsType.Excel">
            <summary> Microsoft Excel Version 8, 9, 10, 11 format (for saving only)

      </summary>
        </member>
        <member name="F:Sybase.DataWindow.FileSaveAsType.EnhancedMetaFile">
            <summary> Microsoft Windows enhanced metafile format (for saving only)

      </summary>
        </member>
        <member name="T:Sybase.DataWindow.FileSaveAsEncoding">
            <summary>The encoding of the file being saved via the <see cref="M:Sybase.DataWindow.IDataWindowBase.SaveAs"/> or <see cref="M:Sybase.DataWindow.IDataWindowbase.SaveAsFormattedText"/> methods. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.FileSaveAsEncoding.Ansi">
            <summary>ANSI encoding</summary>
        </member>
        <member name="F:Sybase.DataWindow.FileSaveAsEncoding.Utf16LE">
            <summary>UTF-16 Little-endian</summary>
        </member>
        <member name="F:Sybase.DataWindow.FileSaveAsEncoding.Utf16BE">
            <summary>UTF-16 Big-endian</summary>
        </member>
        <member name="F:Sybase.DataWindow.FileSaveAsEncoding.Utf8">
            <summary>UTF-8</summary>
        </member>
        <member name="T:Sybase.DataWindow.ScrollAction">
            <summary>Scrolling actions for the <see cref="M:Sybase.DataWindow.DataWindowControl.Scroll(Sybase.DataWindow.ScrollAction)"/> method.      </summary>
        </member>
        <member name="F:Sybase.DataWindow.ScrollAction.ScrollNextRow">
            <summary>Scroll to next row 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.ScrollAction.ScrollPriorRow">
            <summary>Scroll to prior row 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.ScrollAction.ScrollNextPage">
            <summary>Scroll to next page 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.ScrollAction.ScrollPriorPage">
            <summary>Scroll to prior page 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.ScrollAction.ScrollHome">
            <summary>Scroll to first row 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.ScrollAction.ScrollEnd">
            <summary>Scroll to last row 
      </summary>
        </member>
        <member name="T:Sybase.DataWindow.RowFocusIndicator">
            <summary>Stock indicators used with <see cref="M:Sybase.DataWindow.DataWindowControl.SetRowFocusIndicator(Sybase.DataWindow.RowFocusIndicator)"/>
			</summary>
        </member>
        <member name="F:Sybase.DataWindow.RowFocusIndicator.None">
            <summary>There is no indicator for the current row. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.RowFocusIndicator.Rectangle">
            <summary>The row with focus has a dotted rectangle around it. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.RowFocusIndicator.Hand">
            <summary>A pointing hand appears in the left margin of the DataWindow beside the row with focus. 
      </summary>
        </member>
        <member name="T:Sybase.DataWindow.SqlVerb">
            <summary>Type of SQL statement sent to database.</summary>
        </member>
        <member name="F:Sybase.DataWindow.SqlVerb.Select">
            <summary>A SELECT statement.</summary>
        </member>
        <member name="F:Sybase.DataWindow.SqlVerb.Insert">
            <summary>An INSERT statement.</summary>
        </member>
        <member name="F:Sybase.DataWindow.SqlVerb.Delete">
            <summary>A DELETE statement.</summary>
        </member>
        <member name="F:Sybase.DataWindow.SqlVerb.Update">
            <summary>An UPDATE statement.</summary>
        </member>
        <member name="T:Sybase.DataWindow.SqlPreviewMethod">
            <summary>Specification of the DataWindow .NET method that spawned the current database request.</summary>
        </member>
        <member name="F:Sybase.DataWindow.SqlPreviewMethod.Retrieve">
            <summary>The <see cref="M:Sybase.DataWindow.DataWindowControl.Retrieve(System.Data.DataTable)"/> method was called.</summary>
        </member>
        <member name="F:Sybase.DataWindow.SqlPreviewMethod.ReselectRow">
            <summary>The <see cref="M:Sybase.DataWindow.DataWindowControl.ReselectRow(System.Int32)"/> method was called.</summary>
        </member>
        <member name="F:Sybase.DataWindow.SqlPreviewMethod.UpdateData">
            <summary>The <see cref="M:Sybase.DataWindow.DataWindowControl.UpdateData"/> method was called.</summary>
        </member>
        <member name="T:Sybase.DataWindow.SqlPreviewAction">
            <summary>Action to be take regarding a SQL statement processed within the <see cref="E:Sybase.DataWindow.DataWindowControl.SqlPreview"/> event.</summary>
        </member>
        <member name="F:Sybase.DataWindow.SqlPreviewAction.Continue">
            <summary>Forward the SQL statement (possibly modified) to the database; this is the default action.</summary>
        </member>
        <member name="F:Sybase.DataWindow.SqlPreviewAction.Cancel">
            <summary>Cancel the remainder of the database activity initiated the requesting DataWindow .NET method.</summary>
        </member>
        <member name="F:Sybase.DataWindow.SqlPreviewAction.Skip">
            <summary>Do not forward the current SQL statement to the database, but continue processing other rows that result in SQL requests to the database.</summary>
        </member>
        <member name="T:Sybase.DataWindow.HorizontalScrollPane">
            <summary>Identifer of the pane when a split horizontal scroll bar is used.</summary>
        </member>
        <member name="F:Sybase.DataWindow.HorizontalScrollPane.Left">
            <summary>The pane to the left of the horizontal split.</summary>
        </member>
        <member name="F:Sybase.DataWindow.HorizontalScrollPane.Right">
            <summary>The pane to the right of the horizontal split.</summary>
        </member>
        <member name="T:Sybase.DataWindow.DataWindowStyle">
            <summary>The presentation style of the DataWindow object. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowStyle.None">
            <summary>No DataWindow object is currently assigned. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowStyle.Tabular">
            <summary>The Tabular style. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowStyle.Grid">
            <summary>The Grid style. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowStyle.FreeForm">
            <summary>The FreeForm style. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowStyle.Graph">
            <summary>The Graph style. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowStyle.Group">
            <summary>The Group style. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowStyle.Label">
            <summary>The Label style. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowStyle.Nup">
            <summary>The N-Up style. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowStyle.Crosstab">
            <summary>The Crosstab style. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowStyle.Composite">
            <summary>The Composite style. 
      </summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowStyle.TreeView">
            <summary>
				The TreeView style.
			</summary>
        </member>
        <member name="F:Sybase.DataWindow.DataWindowStyle.GridTreeView">
            <summary>
				The Grid TreeView style.
			</summary>
        </member>
        <member name="T:Sybase.DataWindow.ItemErrorAction">
            <summary>Defines the action to take in response to an ItemError event.</summary>
        </member>
        <member name="F:Sybase.DataWindow.ItemErrorAction.Reject">
            <summary>Reject the change; this is the default action.</summary>
        </member>
        <member name="F:Sybase.DataWindow.ItemErrorAction.RejectWithNoMessage">
            <summary>Reject the entry, but do no display the validation error message.</summary>
        </member>
        <member name="F:Sybase.DataWindow.ItemErrorAction.Accept">
            <summary>Accept the entry.</summary>
        </member>
        <member name="F:Sybase.DataWindow.ItemErrorAction.RejectAndAllowFocusChange">
            <summary>Reject the entry, and allow the focus to change.</summary>
        </member>
        <member name="T:Sybase.DataWindow.ItemChangedAction">
            <summary>Defines the action to take in response to an ItemChanged event.</summary><remarks>If an item is rejected, the <see cref="E:Sybase.DataWindow.DataWindowControl.ItemError"/> will fire next.
			</remarks>
        </member>
        <member name="F:Sybase.DataWindow.ItemChangedAction.Accept">
            <summary>Accept the entry; this is the default action.</summary>
        </member>
        <member name="F:Sybase.DataWindow.ItemChangedAction.Reject">
            <summary>Reject the change.</summary>
        </member>
        <member name="F:Sybase.DataWindow.ItemChangedAction.RejectAndAllowFocusChange">
            <summary>Reject the entry, and allow the focus to change.</summary>
        </member>
        <member name="T:Sybase.DataWindow.BeginRetrieveAction">
            <summary>Defines the action to take in response to an BeginRetrieve event.</summary>
        </member>
        <member name="F:Sybase.DataWindow.BeginRetrieveAction.Continue">
            <summary>Proceed with the retrieval after clearing existing rows from the buffers.</summary>
        </member>
        <member name="F:Sybase.DataWindow.BeginRetrieveAction.Cancel">
            <summary>Cancel the retrieval.</summary>
        </member>
        <member name="F:Sybase.DataWindow.BeginRetrieveAction.AppendRows">
            <summary>Proceed with the retrieval, but do not delete existing data from the buffers.</summary>
        </member>
        <member name="T:Sybase.DataWindow.GraphicObjectType">
            <summary/>
        </member>
        <member name="F:Sybase.DataWindow.GraphicObjectType.Bitmap">
            <summary/>
        </member>
        <member name="F:Sybase.DataWindow.GraphicObjectType.Column">
            <summary/>
        </member>
        <member name="F:Sybase.DataWindow.GraphicObjectType.ComputedColumn">
            <summary/>
        </member>
        <member name="F:Sybase.DataWindow.GraphicObjectType.Ellipse">
            <summary/>
        </member>
        <member name="F:Sybase.DataWindow.GraphicObjectType.Line">
            <summary/>
        </member>
        <member name="F:Sybase.DataWindow.GraphicObjectType.Rectangle">
            <summary/>
        </member>
        <member name="F:Sybase.DataWindow.GraphicObjectType.RoundedRectangle">
            <summary/>
        </member>
        <member name="F:Sybase.DataWindow.GraphicObjectType.Text">
            <summary/>
        </member>
        <member name="F:Sybase.DataWindow.GraphicObjectType.BlobColumn">
            <summary/>
        </member>
        <member name="F:Sybase.DataWindow.GraphicObjectType.Graph">
            <summary/>
        </member>
        <member name="F:Sybase.DataWindow.GraphicObjectType.Crosstab">
            <summary/>
        </member>
        <member name="F:Sybase.DataWindow.GraphicObjectType.Report">
            <summary/>
        </member>
        <member name="F:Sybase.DataWindow.GraphicObjectType.OleObject">
            <summary/>
        </member>
        <member name="F:Sybase.DataWindow.GraphicObjectType.Button">
            <summary/>
        </member>
        <member name="F:Sybase.DataWindow.GraphicObjectType.GroupBox">
            <summary/>
        </member>
        <member name="F:Sybase.DataWindow.GraphicObjectType.InkPicture">
            <summary/>
        </member>
        <member name="F:Sybase.DataWindow.GraphicObjectType.None">
            <summary/>
        </member>
        <member name="T:Sybase.DataWindow.DataType">
            <summary>The type of a column within a DataWindow object. This data type is mapped to the corresponding .NET Framework type.</summary>
        </member>
        <member name="F:Sybase.DataWindow.DataType.String">
            <summary>A string - equivalent to System.String.</summary>
        </member>
        <member name="F:Sybase.DataWindow.DataType.Double">
            <summary>A double precision value - equivalent to System.Double.</summary>
        </member>
        <member name="F:Sybase.DataWindow.DataType.DateTime">
            <summary>A datetime - equivalent to System.DateTime.</summary>
        </member>
        <member name="F:Sybase.DataWindow.DataType.Date">
            <summary>A date - equivalent to System.DateTime.</summary>
        </member>
        <member name="F:Sybase.DataWindow.DataType.Time">
            <summary>A time - equivalent to System.DateTime.</summary>
        </member>
        <member name="F:Sybase.DataWindow.DataType.TimeStamp">
            <summary>A timestamp - equivalent to System.DateTime.</summary>
        </member>
        <member name="F:Sybase.DataWindow.DataType.Blob">
            <summary>A binary large object - equivalent to an array of System.Byte.</summary>
        </member>
        <member name="F:Sybase.DataWindow.DataType.Decimal">
            <summary>A decimal value - equivalent to System.Decimal.</summary>
        </member>
        <member name="F:Sybase.DataWindow.DataType.Real">
            <summary>A single precision floating point value - equivalent to System.Single.</summary>
        </member>
        <member name="F:Sybase.DataWindow.DataType.Int">
            <summary>A signed integer value - equivalent to System.Int32.</summary>
        </member>
        <member name="F:Sybase.DataWindow.DataType.UnsignedInt">
            <summary>An unsigned integer value - equivalent to System.UInt32.</summary>
        </member>
        <member name="T:Sybase.DataWindow.Axis">
            <summary>The specifcation of an axis with a graph.</summary><remarks>
				<b>Axis</b> is also used in calls to <see cref="M:Sybase.DataWindow.Utility.PixelsToUnits(System.Int32,Sybase.DataWindow.Axis)"/> and <see cref="M:Sybase.DataWindow.Utility.UnitsToPixels(System.Int32,Sybase.DataWindow.Axis)"/> to convert 
			positions and dimensions of DataWindow controls between <c>Normalized</c> and <c>Pixel</c>	DataWindow <see cref="T:Sybase.DataWindow.Units"/>.</remarks>
        </member>
        <member name="F:Sybase.DataWindow.Axis.X">
            <summary>The X axis in a graph.</summary>
        </member>
        <member name="F:Sybase.DataWindow.Axis.Y">
            <summary>The Y axis in a graph.</summary>
        </member>
        <member name="T:Sybase.DataWindow.Units">
            <summary>The units of measurement used in positioning and sizing objects within the DataWindow object.
      </summary><seealso cref="M:Sybase.DataWindow.Utility.PixelsToUnits"/><seealso cref="M:Sybase.DataWindow.Utility.UnitsToPixels"/>
        </member>
        <member name="F:Sybase.DataWindow.Units.Normalized">
            <summary>Measurement is normalized to 1/32 the width of an average character horizontally and
        1/64 the height of an average character vertically. This value corresponds to the 
        "PowerBuilder Units" in DataWindow Designer.
			</summary>
        </member>
        <member name="F:Sybase.DataWindow.Units.Pixels">
            <summary>
			Measurement is in pixels.
			</summary>
        </member>
        <member name="F:Sybase.DataWindow.Units.English">
            <summary>
			Measurement is 1/1000 of a logical inch.
			</summary>
        </member>
        <member name="F:Sybase.DataWindow.Units.Metric">
            <summary>
			Measurement is 1/1000 of a logical centimeter.
			</summary>
        </member>
        <member name="T:Sybase.DataWindow.BandType">
            <summary>The type of band or layer within the DataWindow object.</summary><remarks>
				<para>To differentiate the header for a DataWindow from a group header, use the <see cref="P:Sybase.DataWindow.DataWindowBand.Level"/> property.</para>
				<para>There are no distinct bands (summary versus detail, for instance) in the foreground or background layer.</para>
			</remarks>
        </member>
        <member name="F:Sybase.DataWindow.BandType.None">
            <summary>An area of the DataWindow not containing a band. </summary>
        </member>
        <member name="F:Sybase.DataWindow.BandType.Detail">
            <summary>The detail band of a DataWindow.</summary>
        </member>
        <member name="F:Sybase.DataWindow.BandType.Header">
            <summary>A header band, which appears at the beginning of each page of a DataWindow or at the beginning of each group.</summary>
        </member>
        <member name="F:Sybase.DataWindow.BandType.Footer">
            <summary>The footer band, which appears at the bottom of each page of a DataWindow.</summary>
        </member>
        <member name="F:Sybase.DataWindow.BandType.Summary">
            <summary>The summary band, which appears at the end of the DataWindow.</summary>
        </member>
        <member name="F:Sybase.DataWindow.BandType.Trailer">
            <summary>A trailer band, which appears at the end of each group. </summary>
        </member>
        <member name="F:Sybase.DataWindow.BandType.Background">
            <summary>The background layer of a DataWindow. </summary>
        </member>
        <member name="F:Sybase.DataWindow.BandType.Foreground">
            <summary>The foreground layer of a DataWindow.</summary>
        </member>
        <member name="F:Sybase.DataWindow.BandType.TreeLevel">
            <!-- No matching elements were found for the following include tag --><include file="GobComments.xml" path="doc/members/member[@name=&quot;F:BandType.TreeLevel&quot;]/*"/>
        </member>
        <member name="T:Sybase.DataWindow.DataSourceType">
            <!-- No matching elements were found for the following include tag --><include file="DataWindowComments.xml" path="doc/members/member[@name=&quot;T:DataSourceType&quot;]/*"/>
        </member>
        <member name="F:Sybase.DataWindow.DataSourceType.ExternalData">
            <!-- No matching elements were found for the following include tag --><include file="DataWindowComments.xml" path="doc/members/member[@name=&quot;F:DataSourceType.ExternalData&quot;]/*"/>
        </member>
        <member name="F:Sybase.DataWindow.DataSourceType.SqlSelect">
            <!-- No matching elements were found for the following include tag --><include file="DataWindowComments.xml" path="doc/members/member[@name=&quot;F:DataSourceType.SqlSelect&quot;]/*"/>
        </member>
        <member name="F:Sybase.DataWindow.DataSourceType.StoredProcedure">
            <!-- No matching elements were found for the following include tag --><include file="DataWindowComments.xml" path="doc/members/member[@name=&quot;F:DataSourceType.StoredProcedure&quot;]/*"/>
        </member>
        <member name="F:Sybase.DataWindow.DataSourceType.Unbound">
            <!-- No matching elements were found for the following include tag --><include file="DataWindowComments.xml" path="doc/members/member[@name=&quot;F:DataSourceType.Unbound&quot;]/*"/>
        </member>
        <member name="T:Sybase.DataWindow.CodeTableValue">
            <summary>An entry in a code table for a <see cref="T:Sybase.DataWindow.GraphicObjectEditableColumn"/>.</summary>
        </member>
        <member name="F:Sybase.DataWindow.CodeTableValue.DisplayValue">
            <summary>Gets or sets the value that is displayed in a <see cref="T:Sybase.DataWindow.GraphicObjectEditableColumn"/> when the underlying data has a value of <i>DataValue</i>.</summary><value>A display value for a DataWindow column that has a code table.</value>
        </member>
        <member name="F:Sybase.DataWindow.CodeTableValue.DataValue">
            <summary>Gets or sets the underlying data associated with a <i>DisplayValue</i> within a code table for a <see cref="T:Sybase.DataWindow.GraphicObjectEditableColumn"/>.</summary><value>A data value for a DataWindow column that has a code table.</value>
        </member>
        <member name="M:Sybase.DataWindow.CodeTableValue.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <b>CodeTableValue</b> structure.</summary><param name="DataValue">A discrete value (converted to <see cref="T:System.String"/>) for the specified DataWindow column.</param><param name="DisplayValue">The value that should display within the DataWindowControl when the underlying column has the value specified by <i>DataValue</i>.</param><seealso cref="M:Sybase.DataWindow.GraphicObjectEditableColumn.GetCodeTableValue(System.Int32)"/><seealso cref="M:Sybase.DataWindow.GraphicObjectEditableColumn.ResetCodeTable"/><seealso cref="M:Sybase.DataWindow.GraphicObjectEditableColumn.SetCodeTableValue(System.Int32,Sybase.DataWindow.CodeTableValue)"/>
        </member>
        <member name="M:Sybase.DataWindow.CodeTableValue.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="T:Sybase.DataWindow.DataWindowBand">
            <summary>Information regarding a specific band within the DataWindow object.</summary>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowBand.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowBand.Type">
            <summary>Gets the <see cref="T:Sybase.DataWindow.BandType"/> of the current band.</summary><value>The <see cref="T:Sybase.DataWindow.BandType"/> of the current band.</value><remarks>To move a control on a DataWindow from one band to another, use <see cref="M:Sybase.DataWindow.GraphicObject.SetBand(Sybase.DataWindow.BandType)"/>.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowBand.Level">
            <summary>Gets the grouping level of the current band.</summary><value>The grouping level of the current band.</value><remarks>If the <see cref="P:Sybase.DataWindow.DataWindowBand.Type"/> is not a Header or Trailer, <b>Level</b> is <c>0</c>.  A <b>Level</b> value of <c>0</c> for a band of type Header indicates the band is the header of the DataWindow itself versus being a specific group header.</remarks>
        </member>
        <member name="T:Sybase.DataWindow.ObjectAtPointer">
            <summary>Details regarding the DataWindow control directly under the mouse pointer.
		    </summary>
        </member>
        <member name="M:Sybase.DataWindow.ObjectAtPointer.#ctor(Sybase.DataWindow.GraphicObject)">
            <overloads>Initializes a new instance of the <b>ObjectAtPointer</b> structure.</overloads>
        </member>
        <member name="M:Sybase.DataWindow.ObjectAtPointer.#ctor(Sybase.DataWindow.GraphicObject,Sybase.DataWindow.DataWindowBand,System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="GobComments.xml" path="doc/members/member[@name=&quot;M:ObjectAtPointer(GraphicObject, DataWindowBand, Int32)&quot;]/*"/>
        </member>
        <member name="M:Sybase.DataWindow.ObjectAtPointer.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.ObjectAtPointer.Gob">
            <summary>Gets the <see cref="T:Sybase.DataWindow.GraphicObject"/> that represents the control under the mouse pointer. </summary><value>The <see cref="T:Sybase.DataWindow.GraphicObject"/> under the mouse pointer.</value><example>This example provides an implementation of the <see cref="E:System.Windows.Forms.Control.MouseMove"/> event for a <see cref="T:Sybase.DataWindow.DataWindowControl"/> in which a <see cref="T:System.Windows.Forms.ToolTip"/>
			displays the information regarding the <see cref="T:Sybase.DataWindow.GraphicObject"/> (as well as the <see cref="T:Sybase.DataWindow.DataWindowBand"/> and row number) under the mouse:
			<code lang="Visual Basic">
Dim dw As Sybase.DataWindow.DataWindowControl
Dim dwObj As Sybase.DataWindow.ObjectAtPointer
Dim ObjName As String
Dim ObjType As String
Dim RowNo As String
Dim ObjBand As String
Dim ObjLevel As String

If sender.GetType.ToString() = "Sybase.DataWindow.DataWindowControl" Then

    dw = System.Convert.ChangeType(sender, sender.GetType())

    dwObj = dw.ObjectUnderMouse

    ObjName = dwObj.Gob.Name
    ObjType = dwObj.Gob.GetType.Name
    RowNo = dwObj.RowNumber.ToString()
    ObjBand = dwObj.Band.Type.ToString()
    ObjLevel = dwObj.Band.Level.ToString()
    
    ttdwToolTip.SetToolTip(dw, "Name: " + ObjName + vbCr + _
       "Row : " + RowNo + vbCr + "Band: " + ObjBand + vbCr + _
       "Type: " + ObjType + vbCr + "Group: " + ObjLevel)
End If			
			</code>
				<code lang="C#">
Sybase.DataWindow.DataWindowControl dw;
Sybase.DataWindow.ObjectAtPointer dwObj;
String strToolTip;
String ObjName;
String ObjType;
String RowNo;
String ObjBand;
String ObjLevel;

try 
{
	dw = sender as Sybase.DataWindow.DataWindowControl;

	dwObj = dw.ObjectUnderMouse;

	ObjName = dwObj.Gob.Name;
	ObjType = dwObj.Gob.GetType().Name;
	RowNo = dwObj.RowNumber.ToString();
	ObjBand = dwObj.Band.Type.ToString();
	ObjLevel = dwObj.Band.Level.ToString();
	
	strToolTip = "Name: " + ObjName 
		+ "\nRow : " + RowNo + "\nBand: " + ObjBand 
		+ "\nType: " + ObjType + "\nGroup: " + ObjLevel;

	ttdwToolTip.SetToolTip(dw, strToolTip);
} 
catch (Exception) {}
			</code>
			</example>
        </member>
        <member name="P:Sybase.DataWindow.ObjectAtPointer.Band">
            <summary>Gets the <see cref="T:Sybase.DataWindow.DataWindowBand"/> containing the <see cref="P:Sybase.DataWindow.ObjectAtPointer.Gob"/> under the mouse pointer.</summary><value>The <see cref="T:Sybase.DataWindow.DataWindowBand"/> containing the object under the mouse pointer.</value><example>This example provides an implementation of the <see cref="E:System.Windows.Forms.Control.MouseMove"/> event for a <see cref="T:Sybase.DataWindow.DataWindowControl"/> in which a <see cref="T:System.Windows.Forms.ToolTip"/>
			displays the <see cref="T:Sybase.DataWindow.DataWindowBand"/> under the mouse:
			<code lang="Visual Basic">
Dim dw As Sybase.DataWindow.DataWindowControl
Dim dwObj As Sybase.DataWindow.ObjectAtPointer

If sender.GetType.ToString() = "Sybase.DataWindow.DataWindowControl" Then

    dw = System.Convert.ChangeType(sender, sender.GetType())
    dwObj = dw.ObjectUnderMouse

    ttdwToolTip.SetToolTip(dw, "Band: " + dwObj.Band.Type.ToString() + vbCr _
     + "Group: " + dwObj.Band.Level.ToString())
End If			
</code>
				<code lang="C#">
Sybase.DataWindow.DataWindowControl dw;
Sybase.DataWindow.ObjectAtPointer dwObj;
String strToolTip;
String ObjBand;
String ObjLevel;

try 
{
	dw = sender as Sybase.DataWindow.DataWindowControl;

	dwObj = dw.ObjectUnderMouse;

	ObjBand = dwObj.Band.Type.ToString();
	ObjLevel = dwObj.Band.Level.ToString();

	strToolTip = "Band: " + ObjBand + "\nGroup: " + ObjLevel;

	ttdwToolTip.SetToolTip(dw, strToolTip);
} 
catch (Exception) {}
</code>
			</example>
        </member>
        <member name="P:Sybase.DataWindow.ObjectAtPointer.RowNumber">
            <summary>Gets the number of the row containing the <see cref="P:Sybase.DataWindow.ObjectAtPointer.Gob"/> under the mouse pointer.</summary><value>The number of the row containing the object under the mouse pointer.</value><remarks>
				<para>If <see cref="P:Sybase.DataWindow.ObjectAtPointer.Band"/> is a group header band, <b>RowNumber</b> reflects reflects the number of the first detail row within that group.</para>
				<para>If <see cref="P:Sybase.DataWindow.ObjectAtPointer.Band"/> is a group trailer band, <b>RowNumber</b> reflects the number of the last detail row within that group.</para>
				<para>If <see cref="P:Sybase.DataWindow.ObjectAtPointer.Band"/> is not a Header, Trailer, or Detail band, <b>RowNumber</b> is <c>0</c>.</para>
			</remarks><example>This example provides an implementation of the <see cref="E:System.Windows.Forms.Control.MouseMove"/> event for a <see cref="T:Sybase.DataWindow.DataWindowControl"/> in which a <see cref="T:System.Windows.Forms.ToolTip"/>
			displays the row number under the mouse:
			<code lang="Visual Basic">
Dim dw As Sybase.DataWindow.DataWindowControl
Dim dwObj As Sybase.DataWindow.ObjectAtPointer

If sender.GetType.ToString() = "Sybase.DataWindow.DataWindowControl" Then

    dw = System.Convert.ChangeType(sender, sender.GetType())
    dwObj = dw.ObjectUnderMouse

    If (dwObj.Band.Type = Sybase.DataWindow.BandType.Detail) Then
        ttdwToolTip.SetToolTip(dw, "Row " + dwObj.RowNumber.ToString() + _
            " of " + dw.RowCount.ToString())
        ttdwToolTip.Active = True
    Else
        ttdwToolTip.Active = False
    End If
End If			
</code>
				<code lang="C#">
Sybase.DataWindow.DataWindowControl dw;
Sybase.DataWindow.ObjectAtPointer dwObj;
String strToolTip;

try 
{
	dw = sender as Sybase.DataWindow.DataWindowControl;

	dwObj = dw.ObjectUnderMouse;

	if (dwObj.Band.Type == Sybase.DataWindow.BandType.Detail) 
	{
		strToolTip = "Row " + dwObj.RowNumber.ToString()
			+ " of " + dw.RowCount.ToString();
		ttdwToolTip.SetToolTip(dw, strToolTip);
		ttdwToolTip.Active = true;
	} else
		ttdwToolTip.Active = false;
} 
catch (Exception) {}
</code>
			</example>
        </member>
        <member name="T:Sybase.DataWindow.DataSetServices">
            <summary>
            Contains service methods for DataWindow work with ADO DataSets.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.DataWindowSyntaxGenerator">
            <summary>Contains method for dynamically creating DataWindow syntax.</summary>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowSyntaxGenerator.DataWindowSyntaxFromSql(Sybase.DataWindow.Transaction,System.String)">
            <overloads>Dynamically creates syntax for a DataWindow based on a SQL SELECT statement provided as a parameter to the method.</overloads><summary>Dynamically creates a Tabular DataWindow object based on a SQL SELECT statement. 
      </summary><returns>A string containing the DataWindow object syntax.</returns><param name="Transaction">An instance of a Sybase.DataWindow.Transaction object that is currently connected to a database.</param><param name="SqlSyntax">The SQL SELECT statement.</param><remarks>
         The string returned from this method can be used with the <see cref="M:Sybase.DataWindow.IDataStore.Create(System.String)"/> method to assign the dynamic DataWindow object to a DataStore or DataWindowControl.
      </remarks><seealso cref="M:Sybase.DataWindow.IDataStore.Create(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowSyntaxGenerator.DataWindowSyntaxFromSql(Sybase.DataWindow.Transaction,System.String,Sybase.DataWindow.DataWindowStyle)">
            <summary>Dynamically creates a DataWindow object based on a SQL SELECT statement. 
      </summary><returns>A string containing the DataWindow object syntax.</returns><param name="Transaction">An instance of a Sybase.DataWindow.Transaction object that is currently connected to a database.</param><param name="SqlSyntax">The SQL SELECT statement.</param><param name="Style">A value of the DataWindowStyle enumeration specifying the layout of the resulting DataWindow object.  The following styles are supported: Tabular, Grid, FreeForm, Group, and Label.</param><remarks>The string returned from this method can be used with the <see cref="M:Sybase.DataWindow.IDataStore.Create(System.String)"/> method to assign the dynamic DataWindow object to a DataStore or DataWindowControl.
      </remarks><seealso cref="M:Sybase.DataWindow.IDataStore.Create(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowSyntaxGenerator.DataWindowSyntaxFromSql(Sybase.DataWindow.Transaction,System.String,System.String)">
            <summary>Dynamically creates a DataWindow object based on a SQL SELECT statement. 
      </summary><returns>A string containing the DataWindow object syntax.</returns><param name="Transaction">An instance of a Sybase.DataWindow.Transaction object that is currently connected to a database.</param><param name="SqlSyntax">The SQL SELECT statement.</param><param name="StyleString">A string value containing additional style characteristics for the DataWindow object.</param><remarks>
				<para>The string returned from this method can be used with the <see cref="M:Sybase.DataWindow.IDataStore.Create(System.String)"/> method to assign the dynamic DataWindow object to a DataStore or DataWindowControl</para>
				<para>
					<i>SqlSyntax</i> can specify the style of a column, the entire DataWindow, areas of the DataWindow, and text in the DataWindow. The object keywords are:
         <list type="bullet">
						<item>Column</item>
						<item>DataWindow</item>
						<item>Group</item>
						<item>Style</item>
						<item>Text</item>
						<item>Title</item>
					</list>
         
         A full style string has the format:
         </para>
				<code>
         Style ( Type=<i>value property=value</i> ... )
         DataWindow ( <i>property=value</i> ... )
         Column ( <i>property=value</i> ... )
         Group <i>groupby_colnum1 groupby_colnum2 ... property ...</i>)
         Text <i>property=value</i> ... )
         Title ( '<i>titlestring</i>' )
         </code>
				<para>
         The checklists in the DataWindow object properties chapter in the DataWindow .NET Programmer's Guide identify the properties that you can use for each object keyword.
         </para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataStore.Create(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowSyntaxGenerator.DataWindowSyntaxFromSql(Sybase.DataWindow.AdoTransaction,System.String)">
            <overloads>Dynamically creates syntax for a DataWindow based on a SQL SELECT statement provided as a parameter to the method.</overloads><summary>Dynamically creates a Tabular DataWindow object based on a SQL SELECT statement. 
      </summary><returns>A string containing the DataWindow object syntax.</returns><param name="AdoTransaction">An instance of a Sybase.DataWindow.AdoTransaction object that is currently connected to a database.</param><param name="SqlSyntax">The SQL SELECT statement.</param><remarks>
         The string returned from this method can be used with the <see cref="M:Sybase.DataWindow.IDataStore.Create(System.String)"/> method to assign the dynamic DataWindow object to a DataStore or DataWindowControl.
      </remarks><seealso cref="M:Sybase.DataWindow.IDataStore.Create(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowSyntaxGenerator.DataWindowSyntaxFromSql(Sybase.DataWindow.AdoTransaction,System.String,Sybase.DataWindow.DataWindowStyle)">
            <summary>Dynamically creates a DataWindow object based on a SQL SELECT statement. 
      </summary><returns>A string containing the DataWindow object syntax.</returns><param name="AdoTransaction">An instance of a Sybase.DataWindow.AdoTransaction object that is currently connected to a database.</param><param name="SqlSyntax">The SQL SELECT statement.</param><param name="Style">A value of the DataWindowStyle enumeration specifying the layout of the resulting DataWindow object.  The following styles are supported: Tabular, Grid, FreeForm, Group, and Label.</param><remarks>The string returned from this method can be used with the <see cref="M:Sybase.DataWindow.IDataStore.Create(System.String)"/> method to assign the dynamic DataWindow object to a DataStore or DataWindowControl.
      </remarks><seealso cref="M:Sybase.DataWindow.IDataStore.Create(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.DataWindowSyntaxGenerator.DataWindowSyntaxFromSql(Sybase.DataWindow.AdoTransaction,System.String,System.String)">
            <summary>Dynamically creates a DataWindow object based on a SQL SELECT statement. 
      </summary><returns>A string containing the DataWindow object syntax.</returns><param name="AdoTransaction">An instance of a Sybase.DataWindow.AdoTransaction object that is currently connected to a database.</param><param name="SqlSyntax">The SQL SELECT statement.</param><param name="StyleString">A string value containing additional style characteristics for the DataWindow object.</param><remarks>
				<para>The string returned from this method can be used with the <see cref="M:Sybase.DataWindow.IDataStore.Create(System.String)"/> method to assign the dynamic DataWindow object to a DataStore or DataWindowControl.
         </para>
				<para>
					<i>SqlSyntax</i> can specify the style of a column, the entire DataWindow, areas of the DataWindow, and text in the DataWindow. The object keywords are:
         <list type="bullet">
						<item>Column</item>
						<item>DataWindow</item>
						<item>Group</item>
						<item>Style</item>
						<item>Text</item>
						<item>Title</item>
					</list>
         
         A full style string has the format:
         </para>
				<code>
         Style ( Type=<i>value property=value</i> ... )
         DataWindow ( <i>property=value</i> ... )
         Column ( <i>property=value</i> ... )
         Group <i>groupby_colnum1 groupby_colnum2 ... property ...</i>)
         Text <i>property=value</i> ... )
         Title ( '<i>titlestring</i>' )
         </code>
				<para>
         The checklists in the DataWindow object properties chapter in the DataWindow .NET Programmer's Guide identify the properties that you can use for each object keyword.
         </para>
			</remarks><seealso cref="M:Sybase.DataWindow.IDataStore.Create(System.String)"/>
        </member>
        <member name="T:Sybase.DataWindow.LibraryListEditor">
            <summary>
            Summary description for LibraryListEditor.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.Utility">
            <summary>A utility class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.Utility.#ctor">
            <summary>Initializes a new instance of the <b>Utility</b> class.</summary>
        </member>
        <member name="M:Sybase.DataWindow.Utility.PixelsToUnits(System.Int32,Sybase.DataWindow.Axis)">
            <summary>
        	 Converts an integer value from pixels to units. Because pixels are not always square the
        	 axis of the value must be provided.
        	 </summary><returns>The units value.</returns><param name="PixelValue">The value you want converted.</param><param name="Axis">The axis of the value you want converted.</param>
        </member>
        <member name="M:Sybase.DataWindow.Utility.UnitsToPixels(System.Int32,Sybase.DataWindow.Axis)">
            <summary>
        	 Converts an integer value from units to pixels. Because pixels are not always square the
        	 axis of the value must be provided.
        	 </summary><returns>The pixels value.</returns><param name="UnitValue">The value you want converted.</param><param name="Axis">The axis of the value you want converted.</param>
        </member>
        <member name="M:Sybase.DataWindow.Utility.GetDataWindowObjectEntries(System.String)">
            <summary>Gets a list of DataWindowObjectEntry in the specified library.</summary><returns>
        	A DataWindowObjectEntry array containing all the DataWindowObjectEntry in the specified library.
        	If the specified library does not contain any DataWindow Object, the returned array is empty and has a zero length.
        	</returns><param name="library">The library from which you want to get the DataWindowObjectEntry information.</param><exception cref="T:System.IO.FileNotFoundException">The specified library cannot be found.</exception>
            
        </member>
        <member name="T:Sybase.DataWindow.DataWindowObjectEntry">
            <summary>Decribes the details of one DataWindowObject Entry in the library.</summary>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowObjectEntry.Name">
            <summary>Gets the name of this DataWindowObjectEntry.</summary><value>The name of this DataWindowObjectEntry.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowObjectEntry.Library">
            <summary>Gets the library that contains this DataWindowObjectEntry.</summary><value>The libray in which this DataWindowObjectEntry is stored.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowObjectEntry.LastModifyTime">
            <summary>Gets the last time this DataWindowObjectEntry is modified.</summary><value>A DateTime that indicates when this DataWindowObjectEntry was last modified.</value>
        </member>
        <member name="P:Sybase.DataWindow.DataWindowObjectEntry.Comments">
            <summary>Gets the comments of this DataWindowObjectEntry.</summary><value>The comments saved in the library about this DataWindowObjectEntry.</value>
        </member>
        <member name="T:Sybase.DataWindow.DataWindowObjectEditor">
            <summary>
            Summary description for DataWindowObjectEditor.
            This UITypeEditor can be associated with datawindow object string properties
            of datawindow control or datastore to provide a design-mode datawindow object 
            selection interface.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.GraphicObjectPicture">
            <summary>An image on a DataWindow.</summary><remarks>Images can be in Bitmap, JPEG, or GIF format.</remarks>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectPicture.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectPicture.FileName">
            <summary>Gets or sets the name of the file containing the image.</summary><value>The default image file name for the image.</value><exception cref="T:System.IO.FileNotFoundException">The file to be assigned to this property does not exist.</exception><exception cref="T:System.ArgumentException">The name of the file to be assigned was null or an empty string. </exception><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectPicture"/> is no longer valid.</exception><remarks>If there is a <see cref="P:Sybase.DataWindow.GraphicObjectPicture.FileNameExpression"/> set, <b>FileName</b> may not reflect the actual file of the displayed image.</remarks>
        </member>
        <member name="T:Sybase.DataWindow.GraphicObjectText">
            <summary>A static text object on a DataWindow.</summary>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectText.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectText.Alignment">
            <summary>
            Returns the alignmnet of the text object.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectText.BackgroundColor">
            <summary>Gets or sets the default background color of the text object.</summary><value>The default background color of the text object.</value><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectText"/> object is no longer valid.</exception><remarks>If there is a <see cref="P:Sybase.DataWindow.GraphicObjectText.BackgroundColorExpression"/> set, <b>BackgroundColor</b> may not reflect the actual background color of the text.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectText.Text">
            <summary>Gets or sets the default text for the object.</summary><value>The default text of the object.</value><exception cref="T:System.ArgumentException">The text to be assigned was null. </exception><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectText"/> object is no longer valid.</exception><remarks>If there is a <see cref="P:Sybase.DataWindow.GraphicObjectText.TextExpression"/> set, <b>Text</b> may not reflect the actual contents of the control.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectText.TextColor">
            <summary>Gets or sets the default text color for the object.</summary><value>The default text color of the object.</value><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectText"/> object is no longer valid.</exception><remarks>If there is a <see cref="P:Sybase.DataWindow.GraphicObjectText.TextColorExpression"/> set, <b>TextColor</b> may not reflect the actual color of the text.</remarks>
        </member>
        <member name="T:Sybase.DataWindow.GraphicObjectButton">
            <summary>A button on a DataWindow.</summary>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectButton.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectButton.BackgroundColor">
            <summary>Gets or sets the default background color for the button.</summary><value>The default background color of the button.</value><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectText"/> object is no longer valid.</exception><remarks>If there is a <see cref="P:Sybase.DataWindow.GraphicObjectButton.BackgroundColorExpression"/> set, <b>BackgroundColor</b> may not reflect the actual background color of the button.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectButton.TextColor">
            <summary>Gets or sets the default text color for the button.</summary><value>The default text color of the button.</value><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectText"/> object is no longer valid.</exception><remarks>If there is a <see cref="P:Sybase.DataWindow.GraphicObjectButton.TextColorExpression"/> set, <b>TextColor</b> may not reflect the actual color of the button.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectButton.Text">
            <summary>Gets or sets the default label on the button.</summary><value>The default label on the button.</value><exception cref="T:System.ArgumentException">The text to be assigned was null. </exception><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectText"/> object is no longer valid.</exception><remarks>If there is a <see cref="P:Sybase.DataWindow.GraphicObjectButton.TextExpression"/> set, <b>Text</b> may not reflect the actual label on the button.</remarks>
        </member>
        <member name="T:Sybase.DataWindow.GraphicObjectReport">
            <summary>A report object on a DataWindow.</summary>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectReport.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectReport.DataWindowObject">
            <summary>Gets or sets the name of the <see cref="P:Sybase.DataWindow.DataWindowControl.DataWindowObject"/> that defines the report.</summary><value>The name of the <see cref="P:Sybase.DataWindow.DataWindowControl.DataWindowObject"/> that defines the report.</value><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectReport"/> object is no longer valid.</exception>
        </member>
        <member name="T:Sybase.DataWindow.dwObject">
            <summary>
            A class that will expose DataWindow object properties in a style familiar to the 
            PowerBuilder compiler.
            </summary>
        </member>
        <member name="P:Sybase.DataWindow.dwObject.Name">
            <summary>
            The name of the object or "DATAWINDOW" if this dwObject is the DataWindow.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.DataViewServices">
            <summary>
            Summary description for DataViewServices.
            </summary>
        </member>
        <member name="T:Sybase.DataWindow.GraphicObjectGraph">
            <summary>A graph on a DataWindow.</summary>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectGraph.GetCategoryName(System.Int32)">
            <summary>Obtains the category name associated with the specified category number.</summary><returns>The name of the category.</returns><param name="CategoryNumber">The number of the category for which you want the name.</param><exception cref="T:System.ArgumentOutOfRangeException">
				<i>CategoryNumber</i> is not valid.</exception><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectGraph"/> object is no longer valid.</exception><remarks>Categories are numbered consecutively, from 1 to the value returned by the <see cref="P:Sybase.DataWindow.GraphicObjectGraph.CategoryCount"/> property. When you delete a category, the categories are renumbered to keep the numbering consecutive.</remarks><example>The following code populates a <see cref="T:System.Windows.Forms.ListView"/> with the list of categories from the graph object <c>gr_1</c> in the DataWindowControl <c>dwGraph</c>:
<code lang="Visual Basic">
Dim i As Integer
Dim categoryName As String
Dim gobGraph As Sybase.DataWindow.GraphicObjectGraph

' get graph object from DataWindow
gobGraph = CType(dwGraph.GetObjectByName("gr_1"), Sybase.DataWindow.GraphicObjectGraph)

' populate the categories
For i = 1 To gobGraph.CategoryCount
    categoryName = gobGraph.GetCategoryName(i)
    lvCategories.Items.Add(categoryName)
Next
</code>
				<code lang="C#">
String categoryName;
Sybase.DataWindow.GraphicObjectGraph gobGraph;

// get graph object from DataWindow
gobGraph = dwGraph.GetObjectByName("gr_1") as Sybase.DataWindow.GraphicObjectGraph;

// populate the categories
for (int i=1; i &lt;= gobGraph.CategoryCount; i++) {
	categoryName = gobGraph.GetCategoryName(i);
	lvCategories.Items.Add(categoryName);
}
</code>
			</example><seealso cref="M:Sybase.DataWindow.GraphicObjectGraph.GetCategoryNumber(System.Double)"/><seealso cref="M:Sybase.DataWindow.GraphicObjectGraph.GetSeriesName(System.Int32)"/>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectGraph.Copy">
            <summary>Replaces the contents of the clipboard with a bitmap image of a graph.</summary><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectGraph"/> object is no longer valid.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><example>The following code for three events shows how to implement a drag-drop operation from a graph object on a <see cref="T:Sybase.DataWindow.DataWindowControl"/> to a document 
			within a <see cref="T:System.Windows.Forms.RichTextBox"/>.
			The technique involves sending a string as the drag-drop message.  The string consists of three parts: the "GraphCopy" string indicating the intent of the message, the name of the
			DataWindowControl that initiates the drag-drop operation, and the name of the graph control within the DataWindowControl.  The message is parsed within the DragDrop event of
			the <see cref="T:System.Windows.Forms.RichTextBox"/>.
			<note>Microsoft's documentation for the <see cref="T:System.Windows.Forms.RichTextBox"/> does not include the DragDrop event.  Additionally, the <c>[STAThread]</c> attribute
			must be enabled on the application's main thread to allow the use of drag-drop with a  <see cref="T:System.Windows.Forms.RichTextBox"/>.</note>
				<code lang="Visual Basic">
Private Sub dwGraph_MouseDown(ByVal sender As Object, ByVal e As System.Windows.Forms.MouseEventArgs) Handles dwGraph.MouseDown
    Dim gob As GraphicObject = dwGraph.ObjectUnderMouse.Gob

    ' send message of "GraphCopy:&lt;dwName&gt;:&lt;graphName&gt;"
    If TypeOf gob Is GraphicObjectGraph Then
        dwGraph.DoDragDrop("GraphCopy:" + _
            CType(sender, Sybase.DataWindow.DataWindowControl).Name + ":" + _
            gob.Name, DragDropEffects.Copy)
    End If
End Sub

Private Sub rtDocument_DragEnter(ByVal sender As Object, ByVal e As _
	System.Windows.Forms.DragEventArgs) Handles rtDocument.DragEnter

    ' show drag icon only if message indicates a graph is being copied
    If e.Data.GetDataPresent("System.String") Then
        If e.Data.GetData("System.String").ToString().StartsWith("GraphCopy") Then
            e.Effect = DragDropEffects.Copy
        End If
    End If
End Sub

Private Sub rtDocument_DragDrop(ByVal sender As Object, ByVal e As _
	System.Windows.Forms.DragEventArgs) Handles rtDocument.DragDrop
    Dim graphSpec As String()
    Dim controlList As System.Collections.IEnumerator
    Dim dw As Sybase.DataWindow.DataWindowControl
    Dim gobGraph As Sybase.DataWindow.GraphicObjectGraph

    ' split the drag message to confirm its contents
    graphSpec = e.Data.GetData("System.String").ToString().Split(New Char() {":"c})
    If graphSpec.Length = 3 Then
        If graphSpec(0) = "GraphCopy" Then

            ' find the DataWindow control that initiated the drag-drop operation
            controlList = Me.Controls.GetEnumerator()
            Do While (controlList.MoveNext())
                If (controlList.Current.GetType().ToString() = "Sybase.DataWindow.DataWindowControl") Then
                    dw = CType(controlList.Current, Sybase.DataWindow.DataWindowControl)

                    ' get the graph from the datawindow, copy and paste
                    If dw.Name = graphSpec(1) Then
                        gobGraph = dw.GetObjectByName(graphSpec(2))
                        gobGraph.Copy()
                        rtDocument.Paste()
                        Exit Do
                    End If
                End If
            Loop
        End If
    End If
End Sub			
			</code>
				<code lang="C#">
//
// add to InitializeComponent method because VS .NET Form painter doesn't have
// support for these events in a RichTextBox
this.rtDocument.DragDrop += new System.Windows.Forms.DragEventHandler(this.rtDocument_DragDrop);
this.rtDocument.DragEnter += new System.Windows.Forms.DragEventHandler(this.rtDocument_DragEnter);
	
private void dwGraph_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
{
	Sybase.DataWindow.GraphicObject gob = dwGraph.ObjectUnderMouse.Gob;

	// send message of "GraphCopy:&lt;dwName&gt;:&lt;graphName&gt;"
	if (gob is GraphicObjectGraph)
		dwGraph.DoDragDrop("GraphCopy:" + 
			(sender as Sybase.DataWindow.DataWindowControl).Name + ":" + 
			gob.Name, DragDropEffects.Copy);
}

private void rtDocument_DragEnter(object sender, System.Windows.Forms.DragEventArgs e)
{
	// show drag icon only if message indicates a graph is being copied
	if (e.Data.GetDataPresent("System.String") &amp;&amp;
		e.Data.GetData("System.String").ToString().StartsWith("GraphCopy"))
		e.Effect = DragDropEffects.Copy;
}

private void rtDocument_DragDrop(object sender, System.Windows.Forms.DragEventArgs e)
{
	String[] graphSpec;
	System.Collections.IEnumerator controlList;
	Sybase.DataWindow.DataWindowControl dw;
	Sybase.DataWindow.GraphicObjectGraph gobGraph;

	// split the drag message to confirm its contents
	graphSpec = e.Data.GetData("System.String").ToString().Split(new Char[] {':'});
	if (graphSpec.Length == 3)
		if (graphSpec[0].Equals("GraphCopy"))
		{
			// find the DataWindow control that initiated the drag-drop operation
			controlList = this.Controls.GetEnumerator();
			while (controlList.MoveNext())
				if (controlList.Current.GetType().ToString().Equals("Sybase.DataWindow.DataWindowControl"))
				{
					dw = controlList.Current as Sybase.DataWindow.DataWindowControl;
					
					// get the graph from the datawindow, copy and paste
					if (dw.Name.Equals(graphSpec[1]))
					{
						gobGraph = dw.GetObjectByName(graphSpec[2]) as GraphicObjectGraph;
						gobGraph.Copy();
						rtDocument.Paste();
						break;
					}
				}
		}
}
			</code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectGraph.GetSeriesDataCount(System.String)">
            <summary>Reports the number of data points in the specified series in a graph.</summary><returns>Returns the number of data points in the specified series.</returns><param name="SeriesName">The name of the series for which you want the number of data points.</param><exception cref="T:System.ArgumentException">
				<i>SeriesName</i> is invalid (or contains no data points).</exception><exception cref="T:System.ArgumentNullException">
				<i>SeriesName</i> is null.</exception><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectGraph"/> object is no longer valid.</exception><remarks>All graphs have at least one series, even if the graph was not created with an explicit series.  In this case, <i>SeriesName</i> should be expressed as an empty string. </remarks><example>The following code populates the <see cref="T:System.Windows.Forms.ListView"/> named <c>lvSeriesStats</c> with the list of series and the number of data points for each series in the graph
			represented by <c>gobGraph</c>.  If the graph has only the default series, the series name is displayed as <b>&lt;default&gt;</b> rather than a blank string.
			<code lang="Visual Basic">
Dim seriesName As String
Dim numPoints As Integer
Dim lvi As ListViewItem
Dim i As Integer

For i = 1 To gobGraph.SeriesCount
    seriesName = gobGraph.GetSeriesName(i)
    numPoints = gobGraph.GetSeriesDataCount(seriesName)
    If seriesName.Trim().Length = 0 Then seriesName = "&lt;default&gt;"
    lvi = New ListViewItem(seriesName)
    lvi.SubItems.Add(numPoints.ToString())
    lvSeriesStats.Items.Add(lvi)
Next			
			</code>
				<code lang="C#">
String seriesName;
ListViewItem lvi;

for (int i=1; i &lt;= gobGraph.SeriesCount; i++) {
	seriesName = gobGraph.GetSeriesName(i);
	lvi = new ListViewItem(seriesName.Trim().Length == 0 ? "&lt;default&gt;" : seriesName);
	lvi.SubItems.Add(gobGraph.GetSeriesDataCount(seriesName).ToString());
	lvSeriesStats.Items.Add(lvi);
}		
			</code>
			</example><seealso cref="P:Sybase.DataWindow.GraphicObjectGraph.CategoryCount"/><seealso cref="P:Sybase.DataWindow.GraphicObjectGraph.SeriesCount"/>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectGraph.GetCategoryNumber(System.Double)">
            <overloads>Obtains the number of a category in a graph. </overloads><summary>Obtains the number of a category in a graph when the datatype of the category axis is Double.</summary><returns>The number of the category specified by <i>CategoryValue</i>.</returns><param name="CategoryValue">The category value for which to obtain the category number.</param><exception cref="T:System.ArgumentException">
				<i>CategoryValue</i> does not represent a valid category.</exception><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectGraph"/> object is no longer valid.</exception><remarks>Use <b>GetCategoryNumber</b> to associate a value on the category axis to a category number for use in methods such as <see cref="M:Sybase.DataWindow.GraphicObjectGraph.GetDataDouble(System.String,System.Int32,Sybase.DataWindow.Axis)"/> and <see cref="M:Sybase.DataWindow.GraphicObjectGraph.GetDataDateTime(System.String,System.Int32,Sybase.DataWindow.Axis)"/>.</remarks><example>The code below allows the user to select a category (of type double) and a series from two list boxes which have been populated using <see cref="M:Sybase.DataWindow.GraphicObjectGraph.GetCategoryName(System.Int32)"/> and
			 <see cref="M:Sybase.DataWindow.GraphicObjectGraph.GetSeriesName(System.Int32)"/> and then displays the value of the corresponding datapoint, which is assumed to be of type double in this case.
			<code lang="Visual Basic">
Dim categoryName As Double
Dim categoryNumber As Integer
Dim seriesName As String
Dim dataValue As Double

categoryName = CDbl(lvCategories.SelectedItems(0).Text)
seriesName = lvSeries.SelectedItems(0).Text
If seriesName = "&lt;default&gt;" Then seriesName = ""

categoryNumber = gobGraph.GetCategoryNumber(categoryName)
dataValue = gobGraph.GetDataDouble(seriesName, categoryNumber, Axis.Y)
MsgBox("The value for the selected category and series is: " + dataValue.ToString(), _
    MsgBoxStyle.Information + MsgBoxStyle.OKOnly, "Graph Data Value")
</code>
				<code lang="C#">
Double categoryName;
Int32 categoryNumber;
String seriesName;
Double dataValue;

categoryName = Double.Parse(lvCategories.SelectedItems[0].Text);
seriesName = lvSeries.SelectedItems[0].Text;
seriesName = seriesName.Equals("&lt;default&gt;") ? "" : seriesName;

categoryNumber = gobGraph.GetCategoryNumber(categoryName);
dataValue = gobGraph.GetDataDouble(seriesName, categoryNumber, Axis.Y);
MessageBox.Show("The value for the selected category and series is: " + dataValue.ToString(),
		"Graph Data Value", MessageBoxButtons.OK, MessageBoxIcon.Information);
</code>
			</example><seealso cref="M:Sybase.DataWindow.GraphicObjectGraph.GetCategoryName(System.Int32)"/><seealso cref="M:Sybase.DataWindow.GraphicObjectGraph.GetSeriesNumber(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectGraph.GetCategoryNumber(System.String)">
            <summary>Obtains the number of a category in a graph  when the datatype of the category axis is String.</summary><returns>The number of the category specified by <i>CategoryValue</i>.</returns><param name="CategoryValue">The category value for which to obtain the category number.</param><exception cref="T:System.ArgumentException">
				<i>CategoryValue</i> does not represent a valid category.</exception><exception cref="T:System.ArgumentNullException">
				<i>CategoryValue</i> is null.</exception><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectGraph"/> object is no longer valid.</exception><remarks>Use <b>GetCategoryNumber</b> to associate a value on the category axis to a category number for use in methods such as <see cref="M:Sybase.DataWindow.GraphicObjectGraph.GetDataDouble(System.String,System.Int32,Sybase.DataWindow.Axis)"/> and <see cref="M:Sybase.DataWindow.GraphicObjectGraph.GetDataDateTime(System.String,System.Int32,Sybase.DataWindow.Axis)"/>.</remarks><example>The code below allows the user to select a category (of type string) and a series from two list boxes which have been populated using <see cref="M:Sybase.DataWindow.GraphicObjectGraph.GetCategoryName(System.Int32)"/> and
			 <see cref="M:Sybase.DataWindow.GraphicObjectGraph.GetSeriesName(System.Int32)"/> and then displays the value of the corresponding datapoint, which is assumed to be of type date in this case.
			<code lang="Visual Basic">
Dim categoryName As String
Dim categoryNumber As Integer
Dim seriesName As String
Dim dataValue As Date

categoryName = lvCategories.SelectedItems(0).Text
seriesName = lvSeries.SelectedItems(0).Text
If seriesName = "&lt;default&gt;" Then seriesName = ""

categoryNumber = gobGraph.GetCategoryNumber(categoryName)
dataValue = gobGraph.GetDataDateTime(seriesName, categoryNumber, Axis.Y)
MsgBox("The value for the selected category and series is: " + dataValue.ToString(), _
    MsgBoxStyle.Information + MsgBoxStyle.OKOnly, "Graph Data Value")
</code>
				<code lang="C#">
String categoryName;
Int32 categoryNumber;
String seriesName;
DateTime dataValue;

categoryName = lvCategories.SelectedItems[0].Text;
seriesName = lvSeries.SelectedItems[0].Text;
seriesName = seriesName.Equals("&lt;default&gt;") ? "" : seriesName;

categoryNumber = gobGraph.GetCategoryNumber(categoryName);
dataValue = gobGraph.GetDataDateTime(seriesName, categoryNumber, Axis.Y);
MessageBox.Show("The value for the selected category and series is: " + dataValue.ToString(),
	"Graph Data Value", MessageBoxButtons.OK, MessageBoxIcon.Information);
			</code>
			</example><seealso cref="M:Sybase.DataWindow.GraphicObjectGraph.GetCategoryName(System.Int32)"/><seealso cref="M:Sybase.DataWindow.GraphicObjectGraph.GetSeriesNumber(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectGraph.GetCategoryNumber(System.DateTime)">
            <summary>Obtains the number of a category in a graph  when the datatype of the category axis is DateTime.</summary><returns>The number of the category specified by <i>CategoryValue</i>.</returns><param name="CategoryValue">The category value for which to obtain the category number.</param><exception cref="T:System.ArgumentException">
				<i>CategoryValue</i> does not represent a valid category.</exception><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectGraph"/> object is no longer valid.</exception><remarks>Use <b>GetCategoryNumber</b> to associate a value on the category axis to a category number for use in methods such as <see cref="M:Sybase.DataWindow.GraphicObjectGraph.GetDataDouble(System.String,System.Int32,Sybase.DataWindow.Axis)"/> and <see cref="M:Sybase.DataWindow.GraphicObjectGraph.GetDataDateTime(System.String,System.Int32,Sybase.DataWindow.Axis)"/>.</remarks><example>The code below allows the user to select a category (of type date or datetime) and a series from two list boxes which have been populated using <see cref="M:Sybase.DataWindow.GraphicObjectGraph.GetCategoryName(System.Int32)"/> and
			 <see cref="M:Sybase.DataWindow.GraphicObjectGraph.GetSeriesName(System.Int32)"/> and then displays the value of the corresponding datapoint, which is assumed to be of type double in this case.
			<code lang="Visual Basic">
Dim categoryName As Date
Dim categoryNumber As Integer
Dim seriesName As String
Dim dataValue As Double

categoryName = CDate(lvCategories.SelectedItems(0).Text)
seriesName = lvSeries.SelectedItems(0).Text
If seriesName = "&lt;default&gt;" Then seriesName = ""

categoryNumber = gobGraph.GetCategoryNumber(categoryName)
dataValue = gobGraph.GetDataDouble(seriesName, categoryNumber, Axis.Y)
MsgBox("The value for the selected category and series is: " + dataValue.ToString(), _
	MsgBoxStyle.Information + MsgBoxStyle.OKOnly, "Graph Data Value")
    			</code>
				<code lang="C#">
System.DateTime categoryName;
System.Int32 categoryNumber;
System.String seriesName;
System.Double dataValue;

categoryName = DateTime.Parse(lvCategories.SelectedItems[0].Text);
seriesName = lvSeries.SelectedItems[0].Text;
seriesName = seriesName.Equals("&lt;default&gt;") ? "" : seriesName;

categoryNumber = gobGraph.GetCategoryNumber(categoryName);
dataValue = gobGraph.GetDataDouble(seriesName, categoryNumber, Axis.Y);
MessageBox.Show("The value for the selected category and series is: " + dataValue.ToString(),
	"Graph Data Value", MessageBoxButtons.OK, MessageBoxIcon.Information);
			</code>
			</example><seealso cref="M:Sybase.DataWindow.GraphicObjectGraph.GetCategoryName(System.Int32)"/><seealso cref="M:Sybase.DataWindow.GraphicObjectGraph.GetSeriesNumber(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectGraph.GetSeriesNumber(System.String)">
            <summary>Obtains the number of a series in a graph given the series' name.</summary><returns>The number of the series corresponding to <i>SeriesName</i>.</returns><param name="SeriesName">The name of the series for which you want the number.</param><exception cref="T:System.ArgumentException">
				<i>SeriesName</i> does not represent a valid series.</exception><exception cref="T:System.ArgumentNullException">
				<i>SeriesName</i> is null.</exception><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectGraph"/> object is no longer valid.</exception><remarks>
				<para>All graphs have at least one series, even if the graph was not created with an explicit series.  In this case, <i>SeriesName</i> should be expressed as an empty string.</para>
				<para>For most applications, <b>GetSeriesNumber</b> is unneeded, because all graph functions with the exception of <see cref="M:Sybase.DataWindow.GraphicObjectGraph.GetSeriesName(System.Int32)"/> accept the 
			<i>SeriesName</i> versus a series number as the parameter.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.GraphicObjectGraph.GetSeriesName(System.Int32)"/><seealso cref="M:Sybase.DataWindow.GraphicObjectGraph.GetCategoryNumber(System.Double)"/>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectGraph.GetDataDateTime(System.String,System.Int32,Sybase.DataWindow.Axis)">
            <summary>Obtains the value of a data point in a series in a graph when the axis has Date, Time or DateTime values.</summary><returns>The value of the data point as a DateTime.</returns><param name="SeriesName">The name of the series from which you want the data point value.</param><param name="DataPoint">The number of the data point for which you want the value.</param><param name="Axis">The X or Y axis for a scatter graph; otherwise, ignored.</param><exception cref="T:System.ArgumentException">
				<i>SeriesName</i> does not represent a valid series.</exception><exception cref="T:System.ArgumentNullException">
				<i>SeriesName</i> is null.</exception><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectGraph"/> object is no longer valid.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">
				<i>DataPoint</i> is invalid, or an unexpected error has occurred.</exception><remarks>All graphs have at least one series, even if the graph was not created with an explicit series.  In this case, <i>SeriesName</i> should be expressed as an empty string. </remarks><example>See the code example for <see cref="P:Sybase.DataWindow.GraphicObjectGraph.GraphObjectUnderMouse"/> which uses the <b>GetDataDateTime</b> method to show the value of the graph
			data point that is currently located under the mouse pointer.</example><seealso cref="M:Sybase.DataWindow.GraphicObjectGraph.GetDataDouble(System.String,System.Int32,Sybase.DataWindow.Axis)"/>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectGraph.GetDataDouble(System.String,System.Int32,Sybase.DataWindow.Axis)">
            <summary>Obtains the value of a data point in a series in a graph when the axis has numeric values. </summary><returns>The value of the data point as a Double.</returns><param name="SeriesName">The name of the series from which you want the data point value.</param><param name="DataPoint">The number of the data point for which you want the value.</param><param name="Axis">The X or Y axis for a scatter graph; otherwise, ignored.</param><exception cref="T:System.ArgumentException">
				<i>SeriesName</i> does not represent a valid series.</exception><exception cref="T:System.ArgumentNullException">
				<i>SeriesName</i> is null.</exception><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectGraph"/> object is no longer valid.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">
				<i>DataPoint</i> is invalid, or an unexpected error has occurred.</exception><remarks>All graphs have at least one series, even if the graph was not created with an explicit series.  In this case, <i>SeriesName</i> should be expressed as an empty string. </remarks><example>See the code example for <see cref="P:Sybase.DataWindow.GraphicObjectGraph.GraphObjectUnderMouse"/> which uses the <b>GetDataDouble</b> method to show the value of the graph
			data point that is currently located under the mouse pointer.</example><seealso cref="M:Sybase.DataWindow.GraphicObjectGraph.GetDataDateTime(System.String,System.Int32,Sybase.DataWindow.Axis)"/>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectGraph.GetDataString(System.String,System.Int32,Sybase.DataWindow.Axis)">
            <!-- No matching elements were found for the following include tag --><include file="GobComments.xml" path="doc/members/member[@name=&quot;M:GraphicObjectGraph.GetDataString&quot;]/*"/>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectGraph.GetDataStyle(System.String,System.Int32)">
            <summary>Returns style information about a particular data point in the graph.</summary><returns>A <see cref="T:Sybase.DataWindow.GraphDataStyle"/> instance containing the style information.</returns><param name="SeriesName">The name of the series containing the data point.</param><param name="DataPoint">The number of the data point for which you want the style information.</param><exception cref="T:System.ArgumentException">
				<i>SeriesName</i> does not represent a valid series.</exception><exception cref="T:System.ArgumentNullException">
				<i>SeriesName</i> is null.</exception><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectGraph"/> object is no longer valid.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">
				<i>DataPoint</i> is not a valid point in <i>SeriesName</i>, or an unexpected error has occurred.</exception><remarks>
				<para>
					<b>GetDataStyle</b> provides information about a single data point. The series to which the data point belongs has its own style settings. In general, the style values for the data point are the same as its series' 
         settings. Use <see cref="M:Sybase.DataWindow.GraphicObjectGraph.SetDataStyle(Sybase.DataWindow.GraphDataStyle)"/> to change the style values for individual data points passing in a <see cref="T:Sybase.DataWindow.GraphDataStyle"/>
         obtained from a call to <b>GetDataStyle</b>.</para>
				<para>All graphs have at least one series, even if the graph was not created with an explicit series.  In this case, <i>SeriesName</i> should be expressed as an empty string. </para>
				<para>The Overlay property that is reported for a data point reflects whether or not its parent series is an overlay. It cannot be modified for an individual data point.</para>
				<para>Some style information may not apply to the current graph type. For example, you can find out the fill pattern for a data point or a series in a 2-dimensional line graph, but that fill pattern will not be visible.   </para>
			</remarks><example>See the code example for <see cref="M:Sybase.DataWindow.GraphicObjectGraph.SetDataStyle(Sybase.DataWindow.GraphDataStyle)"/>.</example><seealso cref="M:Sybase.DataWindow.GraphicObjectGraph.GetSeriesStyle(System.String)"/><seealso cref="M:Sybase.DataWindow.GraphicObjectGraph.SetDataStyle(Sybase.DataWindow.GraphDataStyle)"/>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectGraph.GetSeriesStyle(System.String)">
            <summary>Returns style information about a series in the graph.</summary><returns>A <see cref="T:Sybase.DataWindow.GraphSeriesStyle"/> instance containing the style information.</returns><param name="SeriesName">The name of the series for which you want the style information.</param><exception cref="T:System.ArgumentException">
				<i>SeriesName</i> does not represent a valid series.</exception><exception cref="T:System.ArgumentNullException">
				<i>SeriesName</i> is null.</exception><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectGraph"/> object is no longer valid.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>
					<b>GetSeriesStyle</b> provides information about a series. The data points in the series can 
         have their own style settings. Use <see cref="M:Sybase.DataWindow.GraphicObjectGraph.SetSeriesStyle(Sybase.DataWindow.GraphSeriesStyle)"/> to change the style values for a series. Use 
         <see cref="M:Sybase.DataWindow.GraphicObjectGraph.GetDataStyle(System.String,System.Int32)"/> to get style information for a data point and <see cref="M:Sybase.DataWindow.GraphicObjectGraph.SetDataStyle(Sybase.DataWindow.GraphDataStyle)"/> to override series settings 
         and set style information for individual data points.</para>
				<para>All graphs have at least one series, even if the graph was not created with an explicit series.  In this case, <i>SeriesName</i> should be expressed as an empty string. </para>
				<para>Some style information may not apply to the current graph type. For example, you can find out the
				fill pattern for a data point or a series in a 2-dimensional line graph, but that fill pattern will not be visible.   </para>
			</remarks><example>The following example presents a <see cref="T:System.Windows.Forms.ColorDialog"/> from which the user can select a new color for the series in a column graph:
			<code lang="Visual Basic">
Dim colorPicker = New System.Windows.Forms.ColorDialog
Dim seriesStyle As GraphSeriesStyle

colorPicker.SolidColorOnly = True
colorPicker.AllowFullOpen = False
If colorPicker.ShowDialog() = DialogResult.OK Then
    seriesStyle = gobGraph.GetSeriesStyle("")
    seriesStyle.ForegroundColor = colorPicker.Color
    gobGraph.SetSeriesStyle(seriesStyle)
End If			</code>
				<code lang="C#">
System.Windows.Forms.ColorDialog colorPicker = new System.Windows.Forms.ColorDialog();
GraphSeriesStyle seriesStyle;

colorPicker.SolidColorOnly = true;
colorPicker.AllowFullOpen = false;
if (colorPicker.ShowDialog() == DialogResult.OK) {
	seriesStyle = gobGraph.GetSeriesStyle("");
	seriesStyle.ForegroundColor = colorPicker.Color;
	gobGraph.SetSeriesStyle(seriesStyle);
}				</code>
			</example><seealso cref="M:Sybase.DataWindow.GraphicObjectGraph.GetDataStyle(System.String,System.Int32)"/><seealso cref="M:Sybase.DataWindow.GraphicObjectGraph.SetSeriesStyle(Sybase.DataWindow.GraphSeriesStyle)"/>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectGraph.GetSeriesName(System.Int32)">
            <summary>Obtains the series name associated with the specified series number.</summary><returns>The name of the series.</returns><param name="SeriesNumber">The number of the series for which you want to obtain the name.</param><exception cref="T:System.ArgumentOutOfRangeException">
				<i>SeriesNumber</i> is not valid.</exception><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectGraph"/> object is no longer valid.</exception><remarks>
				<para>Series are numbered consecutively, from 1 to the value returned by the <see cref="P:Sybase.DataWindow.GraphicObjectGraph.SeriesCount"/> property. When you delete 
         a series, the series are renumbered to keep the numbering consecutive. You can use <b>GetSeriesName</b> to find out the name of the series associated with a series number.</para>
				<para>All graphs have at least one series, even if the graph was not created with an explicit series.  In this case, <i>GetSeriesName</i> will return the empty string for a <i>SeriesNumber</i> of <c>1</c>. </para>
			</remarks><example>The following example populates a <see cref="T:System.Windows.Forms.ComboBox"/> with the names of the series in the DataWindow graph <c>gr_1</c>:
			<code lang="Visual Basic">
Dim gobGraph As Sybase.DataWindow.GraphicObjectGraph

' get graph object from DataWindow
gobGraph = CType(dwGraph.GetObjectByName("gr_1"), Sybase.DataWindow.GraphicObjectGraph)
			
' clear combobox and add series names
cbSeries.Items.Clear()
For i = 1 To gobGraph.SeriesCount
    cbSeries.Items.Add(gobGraph.GetSeriesName(i))
Next
</code>
				<code lang="C#">
Sybase.DataWindow.GraphicObjectGraph gobGraph;

// get graph object from DataWindow
gobGraph = dwGraph.GetObjectByName("gr_1") as Sybase.DataWindow.GraphicObjectGraph;

// clear combobox and add series names
cbSeries.Items.Clear();
for (int i=1; i &lt;= gobGraph.SeriesCount; i++)
	cbSeries.Items.Add(gobGraph.GetSeriesName(i));
</code>
			</example><seealso cref="M:Sybase.DataWindow.GraphicObjectGraph.GetCategoryName(System.Int32)"/>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectGraph.SetDataStyle(Sybase.DataWindow.GraphDataStyle)">
            <overloads>Sets style information for a data point within a graph.</overloads><summary>Sets style information for the current data point within a graph.</summary><param name="DataStyle">A <see cref="T:Sybase.DataWindow.GraphDataStyle"/> structure containing the style information to be set.</param><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectGraph"/> object is no longer valid.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Typically, you will obtain the <i>DataStyle</i> argument from calling <see cref="M:Sybase.DataWindow.GraphicObjectGraph.GetDataStyle(System.String,System.Int32)"/> and then modify the 
				desired properties before calling <b>SetDataStyle</b>.</para>
				<para>The specific data point number is retained in the <see cref="T:Sybase.DataWindow.GraphDataStyle"/> structure; therefore, this version of
				<b>SetDataStyle</b> will apply the changes to the same data point.  Use the overloaded version of this method 
				if you want to apply the styles from one data point to another.</para>
			</remarks><example>The code below cycles through the points of a 3D bar graph and changes the colors of the data points to red, yellow or green depending on the value falling within various
			applicaiton-defined thresholds:
			<code lang="Visual Basic">
Dim dataStyle As Sybase.DataWindow.GraphDataStyle
Dim categoryId As Integer
Dim dataValue As Double

For categoryId = 1 To gobGraph.CategoryCount
    Try
        ' get data value and style for given category in default series
        dataValue = gobGraph.GetDataDouble("", categoryId, Axis.Y)
        dataStyle = gobGraph.GetDataStyle("", categoryId)

        ' determine point colors depending on data value
        If (dataValue &gt; 50) Then
            dataStyle.ForegroundColor = System.Drawing.Color.LightGreen
            dataStyle.ShadeColor = System.Drawing.Color.DarkGreen
        ElseIf (dataValue &gt; 25) Then
            dataStyle.ForegroundColor = System.Drawing.Color.Yellow
            dataStyle.ShadeColor = System.Drawing.Color.DarkOrange
        Else
            dataStyle.ForegroundColor = System.Drawing.Color.Red
            dataStyle.ShadeColor = System.Drawing.Color.DarkRed
        End If

        ' set the data style
        gobGraph.SetDataStyle(dataStyle)
    Catch ex As Sybase.DataWindow.MethodFailureException
        ' datapoint is not valid for the series, so just skip it
    End Try
Next			</code>
				<code lang="C#">
Sybase.DataWindow.GraphDataStyle dataStyle;
Double dataValue;

for (Int32 categoryId=1; categoryId &lt;= gobGraph.CategoryCount; categoryId++) 
	try 
	{
		// get data value and style for given category in default series
		dataValue = gobGraph.GetDataDouble("", categoryId, Axis.Y);
		dataStyle = gobGraph.GetDataStyle("", categoryId);

		// determine point colors depending on data value
		if (dataValue &gt; 50) 
		{
			dataStyle.ForegroundColor = System.Drawing.Color.LightGreen;
			dataStyle.ShadeColor = System.Drawing.Color.DarkGreen;
		} 
		else if (dataValue &gt; 25) 
		{
			dataStyle.ForegroundColor = System.Drawing.Color.Yellow;
			dataStyle.ShadeColor = System.Drawing.Color.DarkOrange;
		} 
		else 
		{
			dataStyle.ForegroundColor = System.Drawing.Color.Red;
			dataStyle.ShadeColor = System.Drawing.Color.DarkRed;
		}

		// set the data style
		gobGraph.SetDataStyle(dataStyle);

	} 
	catch (Sybase.DataWindow.MethodFailureException) 
	{
		// datapoint is not valid for the series, so just skip it
	}	
				</code>
			</example><seealso cref="M:Sybase.DataWindow.GraphicObjectGraph.GetDataStyle(System.String,System.Int32)"/><seealso cref="M:Sybase.DataWindow.GraphicObjectGraph.SetSeriesStyle(Sybase.DataWindow.GraphSeriesStyle)"/>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectGraph.SetDataStyle(Sybase.DataWindow.GraphDataStyle,System.Int32)">
            <summary>Sets style information for a specific data point within a graph.</summary><param name="DataStyle">A <see cref="T:Sybase.DataWindow.GraphDataStyle"/> structure containing the style information to be set.</param><param name="DataPoint">The data point to which you want to apply the style.</param><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectGraph"/> object is no longer valid.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">
				<i>DataPoint</i> is not a valid point in the given series, or an unexpected error has occurred.</exception><remarks>
				<para>Typically, you will obtain the <i>DataStyle</i> argument from calling <see cref="M:Sybase.DataWindow.GraphicObjectGraph.GetDataStyle(System.String,System.Int32)"/> and then modify the desired properties before calling <b>SetDataStyle</b>.</para>
				<para>This version of <b>SetDataStyle</b> allows you to apply styles taken from one data point within a series to the data point identified by <i>DataPoint</i> within that same series.  Use the simpler form of <b>SetDataStyle</b> to apply the changes back to the same data point for which <see cref="M:Sybase.DataWindow.GraphicObjectGraph.GetDataStyle(System.String,System.Int32)"/> was called.</para>
			</remarks><example>The following class extends <see cref="T:Sybase.DataWindow.DataWindowControl"/> to provide two methods that operate on scatter or line graph objects in the DataWindow.
			<c>ShowMinMaxMedian</c> highlights the minimum, maximum, and median value in each series by setting the symbols to a down arrow, up arrow, and circle respectively, while hiding the symbols 
			of all other points in the series.  <c>ShowAllPoints</c> restores the symbols and shows all points in the graph.
			<code lang="Visual Basic">
Imports Sybase.DataWindow
Public Class DataWindowControlEx
	Inherits Sybase.DataWindow.DataWindowControl

	Public Sub ShowAllPoints(ByVal graphName As String)

		Dim gobGraph As GraphicObjectGraph
		Dim style As GraphDataStyle
		Dim seriesId As Integer
		Dim seriesName As String
		Dim dataPoint As Integer

		Try
			gobGraph = Me.GetObjectByName(graphName)
			If Not (gobGraph.Type = GraphType.Scatter Or _
				gobGraph.Type = GraphType.Scatter) Then Return
		Catch ex As System.ArgumentException
			'ignore request if invalid graphName
			Return
		End Try

		' turn off redraw for performance
		Me.SetRedrawOff()

		' for each series
		For seriesId = 1 To gobGraph.SeriesCount

			' get style of first point in series 
			seriesName = gobGraph.GetSeriesName(seriesId)
			style = gobGraph.GetDataStyle(seriesName, 1)

			' restore the original series symbols for all of the graph points
			style.SymbolStyle = gobGraph.GetSeriesStyle(seriesName).SymbolStyle
			For dataPoint = gobGraph.GetSeriesDataCount(seriesName) To 1 Step -1
				gobGraph.SetDataStyle(style, dataPoint)
			Next
		Next
		Me.SetRedrawOn()
		Me.Refresh()
    End Sub

    Public Sub ShowMinMaxMedian(ByVal graphName As String)

		Dim gobGraph As GraphicObjectGraph
		Dim style As GraphDataStyle
		Dim seriesId As Integer
		Dim seriesName As String
		Dim dataPoint As Integer
		Dim pointValue As Double
		Dim dataValues As SortedList = New SortedList

		' get graph object
		Try
			gobGraph = Me.GetObjectByName(graphName)
			If Not (gobGraph.Type = GraphType.Scatter Or _
				gobGraph.Type = GraphType.Scatter) Then Return
		Catch ex As System.ArgumentException
			'ignore request if invalid graphName
			Return
		End Try

		' turn off redraw for performance
		Me.SetRedrawOff()

		' for each series
		For seriesId = 1 To gobGraph.SeriesCount

			' get style of first point in series 
    			seriesName = gobGraph.GetSeriesName(seriesId)
			style = gobGraph.GetDataStyle(seriesName, 1)

			' loop through all points
			style.SymbolStyle = SymbolStyle.None
			For dataPoint = gobGraph.GetSeriesDataCount(seriesName) To 1 Step -1
		
				' set style of point to none
				gobGraph.SetDataStyle(style, dataPoint)

				' add value to a sorted list
				pointValue = gobGraph.GetDataDouble(seriesName, dataPoint, Axis.Y)
				If Not dataValues.ContainsKey(pointValue) Then
					dataValues.Add(pointValue, dataPoint)
				End If
			Next

			' set symbol for median to solid circle
			style.SymbolStyle = SymbolStyle.SolidCircle
			gobGraph.SetDataStyle(style, CInt(dataValues.GetByIndex(dataValues.Count \ 2)))
	
			' set symbol for minimum to down arrow
			style.SymbolStyle = SymbolStyle.SolidDownArrow
			gobGraph.SetDataStyle(style, CInt(dataValues.GetByIndex(0)))

			' set symbol for maximum to up arrow
			style.SymbolStyle = SymbolStyle.SolidUpArrow
			gobGraph.SetDataStyle(style, CInt(dataValues.GetByIndex(dataValues.Count - 1)))
			
			' clear values list  in preparation for next series
			dataValues.Clear()
		Next
		Me.SetRedrawOn()
   		Me.Refresh()
	End Sub
End Class
		</code>
				<code lang="C#">
using System;
using Sybase.DataWindow;
using System.Collections;

namespace examples.cs
{
	public class DataWindowControlEx : Sybase.DataWindow.DataWindowControl
	{
		public void showAllPoints(String graphName) 
		{
			GraphicObjectGraph gobGraph;
			GraphDataStyle style;
			String seriesName;

			try 
			{
				gobGraph = this.GetObjectByName(graphName) as GraphicObjectGraph;
				if (gobGraph.Type != GraphType.Scatter &amp;&amp; gobGraph.Type != GraphType.Scatter)
					return;
			} 
			catch (System.Exception) 
			{
				// ignore request if invalid graphName
				return;
			}

			// turn off redraw for performance
			this.SetRedrawOff();

			// for each series
			for(Int32 seriesId = gobGraph.SeriesCount; seriesId &gt; 0; seriesId--) 
			{

				// get style of first point in series 
				seriesName = gobGraph.GetSeriesName(seriesId);
				style = gobGraph.GetDataStyle(seriesName, 1);

				// restore the original series symbols for all of the graph points
				style.SymbolStyle = gobGraph.GetSeriesStyle(seriesName).SymbolStyle;
				for (Int32 dataPoint = gobGraph.GetSeriesDataCount(seriesName); dataPoint &gt; 0; dataPoint--)
					gobGraph.SetDataStyle(style, dataPoint);
			}
			this.SetRedrawOn();
			this.Refresh();
		}

		public void showMinMaxMedian(String graphName) 
		{
			GraphicObjectGraph gobGraph;
			GraphDataStyle style;
			String seriesName;
			Double pointValue;
			SortedList dataValues = new SortedList();

			try 
			{
				gobGraph = this.GetObjectByName(graphName) as GraphicObjectGraph;
				if (gobGraph.Type != GraphType.Scatter &amp;&amp; gobGraph.Type != GraphType.Scatter)
					return;
			} 
			catch (System.Exception) 
			{
				// ignore action if invalid graphName
				return;
			}

			// turn off redraw for performance
			this.SetRedrawOff();

			// for each series
			for(Int32 seriesId = gobGraph.SeriesCount; seriesId &gt; 0; seriesId--) 
			{

				// get style of first point in series 
				seriesName = gobGraph.GetSeriesName(seriesId);
				style = gobGraph.GetDataStyle(seriesName, 1);

				// loop through all points
				style.SymbolStyle = SymbolStyle.None;
				for (Int32 dataPoint = gobGraph.GetSeriesDataCount(seriesName); dataPoint &gt; 0; dataPoint--) 
				{
					// set style of point to none
					gobGraph.SetDataStyle(style, dataPoint);

					// add value to a sorted list
					pointValue = gobGraph.GetDataDouble(seriesName, dataPoint, Axis.Y);
					if (!dataValues.ContainsKey(pointValue))
						dataValues.Add(pointValue, dataPoint);
				}

				// set symbol for median to solid circle
				style.SymbolStyle = SymbolStyle.SolidCircle;
				gobGraph.SetDataStyle(style, Convert.ToInt32(dataValues.GetByIndex(dataValues.Count / 2)));

				// set symbol for minimum to down arrow
				style.SymbolStyle = SymbolStyle.SolidDownArrow;
				gobGraph.SetDataStyle(style, Convert.ToInt32(dataValues.GetByIndex(0)));

				// set symbol for maximum to up arrow
				style.SymbolStyle = SymbolStyle.SolidUpArrow;
				gobGraph.SetDataStyle(style, Convert.ToInt32(dataValues.GetByIndex(dataValues.Count - 1)));

				// clear values array in preparation for next series
				dataValues.Clear();
			}
			this.SetRedrawOn();
			this.Refresh();
		}
	}
}
</code>
			</example><seealso cref="M:Sybase.DataWindow.GraphicObjectGraph.GetDataStyle(System.String,System.Int32)"/><seealso cref="M:Sybase.DataWindow.GraphicObjectGraph.SetSeriesStyle(Sybase.DataWindow.GraphSeriesStyle)"/>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectGraph.SetSeriesStyle(Sybase.DataWindow.GraphSeriesStyle)">
            <overloads>Sets style information for a series within a graph.</overloads><summary>Sets style information for the current series within a graph.</summary><param name="SeriesStyle">A <see cref="T:Sybase.DataWindow.GraphSeriesStyle"/> structure containing the style information to be set.</param><exception cref="T:System.ArgumentException">
				<i>SeriesStyle</i> refers to an invalid series.</exception><exception cref="T:System.ArgumentNullException">
				<i>SeriesStyle</i> refers to a series with a null series name.</exception><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectGraph"/> object is no longer valid.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Typically, you will obtain the <i>SeriesStyle</i> argument from calling <see cref="M:Sybase.DataWindow.GraphicObjectGraph.GetSeriesStyle(System.String)"/> and then modify the desired properties before calling <b>SetSeriesStyle</b>.</para>
				<para>The specific series is retained in the <see cref="T:Sybase.DataWindow.GraphSeriesStyle"/> structure; therefore, this version of <b>SetSeriesStyle</b> will apply the changes to the same series.  Use the overloaded version of this method if you want to apply the styles from a series in one graph to a series in another.</para>
			</remarks><example>See the code example for <see cref="M:Sybase.DataWindow.GraphicObjectGraph.GetSeriesStyle(System.String)"/>.</example><seealso cref="M:Sybase.DataWindow.GraphicObjectGraph.SetDataStyle(Sybase.DataWindow.GraphDataStyle)"/><seealso cref="M:Sybase.DataWindow.GraphicObjectGraph.GetSeriesStyle(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectGraph.SetSeriesStyle(Sybase.DataWindow.GraphSeriesStyle,System.String)">
            <summary>Sets style information for a specific series within a graph.</summary><param name="SeriesStyle">A <see cref="T:Sybase.DataWindow.GraphSeriesStyle"/> structure containing the style information to be set.</param><param name="SeriesName">The name of the series to which the style should be applied.</param><exception cref="T:System.ArgumentException">
				<i>SeriesName</i> is invalid.</exception><exception cref="T:System.ArgumentNullException">
				<i>SeriesName</i> is null.</exception><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectGraph"/> object is no longer valid.</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks>
				<para>Typically, you will obtain the <i>SeriesStyle</i> argument from calling <see cref="M:Sybase.DataWindow.GraphicObjectGraph.GetSeriesStyle(System.String)"/> and then modify the desired properties before calling <b>SetSeriesStyle</b>.</para>
				<para>This version of <b>SetSeriesStyle</b> allows you to apply styles taken from one series within a graph to another series in a different graph.  Use the simpler form of <b>SetSeriesStyle</b> to apply the changes back to the same series for which <see cref="M:Sybase.DataWindow.GraphicObjectGraph.GetSeriesStyle(System.String)"/> was called.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.GraphicObjectGraph.SetDataStyle(Sybase.DataWindow.GraphDataStyle)"/><seealso cref="M:Sybase.DataWindow.GraphicObjectGraph.GetSeriesStyle(System.String)"/>
        </member>
        <member name="M:Sybase.DataWindow.GraphicObjectGraph.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectGraph.Created">
            <summary>Gets a value indicating whether the graph has been created</summary><value>
				<c>true</c> if the graph has been fully created; <c>false</c> otherwise.</value><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectGraph"/> object is no longer valid.</exception><remarks>A graph object is not considered created until it has been drawn.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectGraph.Type">
            <summary>Gets the type of a graph.</summary><value>The type of the graph.</value><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectGraph"/> object is no longer valid.</exception><remarks>The type of the graph is determined when the graph object or graph DataWindow was first created in DataWindow Designer.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectGraph.CategoryCount">
            <summary>Gets the number of categories in a graph.</summary><value>The number of categories.</value><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectGraph"/> object is no longer valid.</exception><example>The following code populates a <see cref="T:System.Windows.Forms.ListView"/> with the list of categories from the graph object <c>gr_1</c> in the DataWindowControl <c>dwGraph</c>:
<code lang="Visual Basic">
Dim i As Integer
Dim categoryName As String
Dim gobGraph As Sybase.DataWindow.GraphicObjectGraph

' get graph object from DataWindow
gobGraph = CType(dwGraph.GetObjectByName("gr_1"), Sybase.DataWindow.GraphicObjectGraph)

' populate the categories
For i = 1 To gobGraph.CategoryCount
    categoryName = gobGraph.GetCategoryName(i)
    lvCategories.Items.Add(categoryName)
Next
</code>
				<code lang="C#">
String categoryName;
Sybase.DataWindow.GraphicObjectGraph gobGraph;

// get graph object from DataWindow
gobGraph = dwGraph.GetObjectByName("gr_1") as Sybase.DataWindow.GraphicObjectGraph;

// populate the categories
for (int i=1; i &lt;= gobGraph.CategoryCount; i++) {
	categoryName = gobGraph.GetCategoryName(i);
	lvCategories.Items.Add(categoryName);
}
</code>
			</example>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectGraph.SeriesCount">
            <summary>Gets the number of series in a graph.</summary><value>The number of series.</value><exception cref="T:System.InvalidOperationException">The DataWindow that contains this <see cref="T:Sybase.DataWindow.GraphicObjectGraph"/> object is no longer valid.</exception><remarks>All graphs have at least one series, even if the graph was not created with an explicit series.  In this case, the name of the default series is an empty string. </remarks><example>The following example populates a <see cref="T:System.Windows.Forms.ComboBox"/> with the names of the series in the DataWindow graph <c>gr_1</c>:
			<code lang="Visual Basic">
Dim gobGraph As Sybase.DataWindow.GraphicObjectGraph

' get graph object from DataWindow
gobGraph = CType(dwGraph.GetObjectByName("gr_1"), Sybase.DataWindow.GraphicObjectGraph)
			
' clear combobox and add series names
cbSeries.Items.Clear()
For i = 1 To gobGraph.SeriesCount
    cbSeries.Items.Add(gobGraph.GetSeriesName(i))
Next
</code>
				<code lang="C#">
Sybase.DataWindow.GraphicObjectGraph gobGraph;

// get graph object from DataWindow
gobGraph = dwGraph.GetObjectByName("gr_1") as Sybase.DataWindow.GraphicObjectGraph;

// clear combobox and add series names
cbSeries.Items.Clear();
for (int i=1; i &lt;= gobGraph.SeriesCount; i++)
	cbSeries.Items.Add(gobGraph.GetSeriesName(i));
</code>
			</example>
        </member>
        <member name="P:Sybase.DataWindow.GraphicObjectGraph.GraphObjectUnderMouse">
            <summary>Gets the graph component under the mouse.</summary><value>The graph component, a <see cref="T:Sybase.DataWindow.GraphObjectAtPointer"/> instance.</value><remarks>
				<b>GraphObjectUnderMouse</b> returns a <see cref="T:Sybase.DataWindow.GraphObjectAtPointer"/> that identifies the graph element select (axis, legend, etc.) as well as the associate data point and series, if applicable.</remarks><example>The implementation below for the <see cref="E:System.Windows.Forms.Control.MouseMove"/> event of a <see cref="T:Sybase.DataWindow.DataWindowControl"/> displays information (in a 
<see cref="T:System.Windows.Forms.ToolTip"/>) regarding the element of the graph over which the mouse pointer is hovering:
<code lang="Visual Basic">
Dim s As String
Dim xData As Double
Dim yData As Double
Dim seriesName As String
Dim dataPoint As Integer

Try
    seriesName = gobGraph.GraphObjectUnderMouse.SeriesName
    dataPoint = gobGraph.GraphObjectUnderMouse.DataPoint

    s = gobGraph.GraphObjectUnderMouse.ObjectType.ToString
    Select Case gobGraph.GraphObjectUnderMouse.ObjectType
        Case Sybase.DataWindow.GraphObjectType.Category
            s = s + ": " + gobGraph.GetCategoryName(dataPoint)
        Case Sybase.DataWindow.GraphObjectType.Series
            If Trim(seriesName).Length &gt; 0 Then
                s = s + ": " + seriesName
            End If
        Case Sybase.DataWindow.GraphObjectType.Data

            ' scatter graphs have x, y and no category
            If gobGraph.Type = Sybase.DataWindow.GraphType.Scatter Then
                Try
                    xData = gobGraph.GetDataDouble(seriesName, dataPoint, Sybase.DataWindow.Axis.X)
                    yData = gobGraph.GetDataDouble(seriesName, dataPoint, Sybase.DataWindow.Axis.Y)
                    If Trim(seriesName).Length &gt; 0 Then
                        s = "Series: " + seriesName
                    End If
                    s = s + "   Value: (" + xData.ToString + "," + yData.ToString + ")"
                Catch
                    s = s + "   Value: &lt;unavailable&gt;"
                End Try
            Else
                ' every other graph type has a category at least
                s = "Category: " + gobGraph.GetCategoryName(dataPoint)
                If Trim(seriesName).Length &gt; 0 Then
                    s = " Series: " + seriesName
                End If
                Try
                    s = s + "   Value: " + CStr(gobGraph.GetDataDateTime(seriesName, dataPoint, Sybase.DataWindow.Axis.Y))
                Catch ex As Exception
                    Try
                        s = s + "   Value: " + CStr(gobGraph.GetDataDouble(seriesName, dataPoint, Sybase.DataWindow.Axis.Y))
                    Catch ex2 As Exception
                        s = s + "   Value: &lt;unavailable&gt;"
                    End Try
                End Try
            End If
    End Select

    ' shut off tool tip if not on 'interesting' part of graph
    If gobGraph.GraphObjectUnderMouse.ObjectType = Sybase.DataWindow.GraphObjectType.Graph Then
        tipGraph.Active = False
    Else
        tipGraph.Active = True
        tipGraph.SetToolTip(dwGraph, s)
    End If
Catch ex As Exception
    ' ignore tooltip if there's an exception (like no DataWindow object)
End Try
</code>
				<code lang="C#">
String s, seriesName;
Double xData, yData;
Int32 dataPoint;
	
try 
{
	seriesName = gobGraph.GraphObjectUnderMouse.SeriesName;
	dataPoint = gobGraph.GraphObjectUnderMouse.DataPoint;

	s = gobGraph.GraphObjectUnderMouse.ObjectType.ToString();
	switch (gobGraph.GraphObjectUnderMouse.ObjectType) 
	{
		case Sybase.DataWindow.GraphObjectType.Category:
			tipGraph.Active = true;
			tipGraph.SetToolTip(dwGraph, s + ": " + gobGraph.GetCategoryName(dataPoint));
			break;

		case Sybase.DataWindow.GraphObjectType.Series:
			if (seriesName.Trim().Length &gt; 0)
				s = s + ": " + seriesName;
			tipGraph.Active = true;
			tipGraph.SetToolTip(dwGraph, s);
			break;

		case Sybase.DataWindow.GraphObjectType.Data:

			// scatter graphs have x, y and no category
			if (gobGraph.Type == Sybase.DataWindow.GraphType.Scatter) 
			{
				try 
				{
					xData = gobGraph.GetDataDouble(seriesName, dataPoint, Sybase.DataWindow.Axis.X);
					yData = gobGraph.GetDataDouble(seriesName, dataPoint, Sybase.DataWindow.Axis.Y);
					if (seriesName.Trim().Length &gt; 0)
						s = "Series: " + seriesName;
					s = s + "   Value: (" + xData.ToString() + "," + yData.ToString() + ")";
				}
				catch (Exception) 
				{
					s = s + "   Value: &lt;unavailable&gt;";
				}
			} 
			else 
			{
				// every other graph type has a category at least
				s = "Category: " + gobGraph.GetCategoryName(dataPoint);
				if (seriesName.Trim().Length &gt; 0) 
					s = " Series: " + seriesName;
				try 
				{
					s = s + "   Value: " + gobGraph.GetDataDateTime(seriesName, dataPoint, Sybase.DataWindow.Axis.Y).ToString();
				} 
				catch (Exception) 
				{
					try 
					{
						s = s + "   Value: " + gobGraph.GetDataDouble(seriesName, dataPoint, Sybase.DataWindow.Axis.Y).ToString();
					}
					catch (Exception) 
					{	  
						s = s + "   Value: &lt;unavailable&gt;";
					}	
				} 
			}
			tipGraph.Active = true;
			tipGraph.SetToolTip(dwGraph, s);
			break;

		// shut off tool tip if not on interesting part of graph
		case Sybase.DataWindow.GraphObjectType.Graph:
			tipGraph.Active = false;
			break;

		default:
			tipGraph.Active = true;
			tipGraph.SetToolTip(dwGraph, s);
			break;
	}
} catch (Exception) {
	// ignore tooltip if there's an exception (like no DataWindow object)
}
</code>
			</example>
        </member>
        <member name="T:Sybase.DataWindow.GraphSeriesStyle">
            <summary>Properties relating to the display of a graph series or a specific point in a series.</summary><remarks>
				<para>Use <b>GraphSeriesStyle</b> in conjunction with <see cref="M:Sybase.DataWindow.GraphicObjectGraph.GetSeriesStyle(System.String)"/> to get information about the characteristics of the series of interest.
			You can then modify the desired properties and call <see cref="M:Sybase.DataWindow.GraphicObjectGraph.SetSeriesStyle(Sybase.DataWindow.GraphSeriesStyle)"/> to apply the changes.</para>
				<para>
					<see cref="T:Sybase.DataWindow.GraphDataStyle"/> extends <b>GraphSeriesStyle</b> to provide the display characteristics of a given point within a series.</para>
			</remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphSeriesStyle.FillStyle">
            <summary>The <see cref="P:Sybase.DataWindow.GraphSeriesStyle.FillStyle"/> used for the series or data point.</summary><remarks>
				<b>FillStyle</b> is not applicable to all graph types, for instance, Line graphs.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphSeriesStyle.LineStyle">
            <summary>The <see cref="P:Sybase.DataWindow.GraphSeriesStyle.LineStyle"/> used for the series.</summary><remarks>
				<para>
					<b>LineStyle</b> is not applicable to all graph types, for instance, Scatter graphs.</para>
				<para>
					<b>LineStyle</b> is only meaningful for a series and not for a specific data point.</para>
				<para>Only lines with a Continuous style may have a <see cref="P:Sybase.DataWindow.GraphSeriesStyle.LineWidth"/> greater than <c>1</c>.  You must set the <see cref="P:Sybase.DataWindow.GraphSeriesStyle.LineWidth"/> to <c>1</c> before changing the <b>LineStyle</b>.</para>
			</remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphSeriesStyle.LineWidth">
            <summary>The width of the line representing the series in the graph.</summary><remarks>
				<para>
					<b>LineWidth</b> is not applicable to all graph types, for instance, Scatter graphs.</para>
				<para>
					<b>LineWidth</b> is only meaningful for a series and not for a specific data point.</para>
				<para>Setting the <b>LineWidth</b> to a value greater than <c>1</c> causes the <see cref="P:Sybase.DataWindow.GraphSeriesStyle.LineStyle"/> to be displayed as Continuous; however, the <see cref="P:Sybase.DataWindow.GraphSeriesStyle.LineStyle"/> property itself is not automatically modified.</para>
			</remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphSeriesStyle.ForegroundColor">
            <summary>The foreground <see cref="T:System.Drawing.Color"/> used for the series or data point.</summary><remarks>
				<b>ForegroundColor</b> is used for the main areas of the Area graph and the various types of bar and column graphs.  It also used for symbols that may display on Line and Scatter graphs.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphSeriesStyle.BackgroundColor">
            <summary>The background <see cref="T:System.Drawing.Color"/> used for the series or data point.</summary><remarks>
				<para>
					<b>BackgroundColor</b> is not applicable to all graph types, for instance, Line graphs.</para>
				<para>
					<b>BackgroundColor</b> is used as the outline color for bars, columns, and pie slices.</para>
			</remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphSeriesStyle.ShadeColor">
            <summary>The shade <see cref="T:System.Drawing.Color"/> used for the series or data point.</summary><remarks>
				<para>
					<b>ShadeColor</b> is not applicable to all graph types, for instance, Scatter graphs.</para>
			</remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphSeriesStyle.LineColor">
            <summary>The line <see cref="T:System.Drawing.Color"/> used for the series or data point.</summary><remarks>
				<para>
					<b>LineColor</b> is only meaningful for a series and not for a specific data point.</para>
				<para>
					<b>LineColor</b> is not applicable to all graph types, for instance, bar and column graphs. Use <see cref="P:Sybase.DataWindow.GraphSeriesStyle.BackgroundColor"/> to modify the outline color of bars, columns, and pie 
				slices within the graph styles they might appear.</para>
			</remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphSeriesStyle.SymbolStyle">
            <summary>The <see cref="P:Sybase.DataWindow.GraphSeriesStyle.SymbolStyle"/> used for the series or data point.</summary><remarks>
				<para>
					<b>SymbolStyle</b> is not applicable to all graph types, for instance, bar and column graphs.</para>
				<para>Symbols are displayed using <see cref="P:Sybase.DataWindow.GraphSeriesStyle.ForegroundColor"/>.</para>
			</remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphSeriesStyle.IsOverlay">
            <summary>An indication of whether the series is rendered as a line overlay on the graph.</summary><remarks>
				<b>IsOverlay</b> is supported only for graphs that have more than one series.</remarks>
        </member>
        <member name="T:Sybase.DataWindow.GraphDataStyle">
            <summary>Properties relating to the display of a specific data point in a graph.</summary><remarks>
				<para>By default, each point within a series reflects the properties of that series.  You can use <see cref="M:Sybase.DataWindow.GraphicObjectGraph.GetDataStyle(System.String,System.Int32)"/> to obtain the properties of a given data point, and
			<see cref="M:Sybase.DataWindow.GraphicObjectGraph.SetDataStyle(Sybase.DataWindow.GraphDataStyle)"/> to change those properties.</para>
				<para>Once a data point's style has been changed, modifications to the properties of its parent series no longer apply to that data point.</para>
			</remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphDataStyle.IsOverlay">
            <summary>
				<c>true</c> if this data point is part of a series overlay; otherwise, <c>false</c>.</summary><remarks>
				<b>IsOverlay</b> is a read-only property for a data point and always reflects whether or not the series of which it is a part is rendered as an overlay.</remarks>
        </member>
        <member name="P:Sybase.DataWindow.GraphDataStyle.PieExplosionPercentage">
            <summary>The percentage of a pie graph's radius that a pie slice is exploded.</summary><remarks>
				<para>An exploded slice is moved away from the center of the pie in order to draw attention to the data point it represents.</para>
				<para>This property is ignored if the graph type is not Pie or Pie3D.</para>
			</remarks>
        </member>
        <member name="T:Sybase.DataWindow.GraphObjectAtPointer">
            <summary>Details regarding the graph element under the mouse pointer.</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphObjectAtPointer.ObjectType">
            <summary>Gets the element of the graph under the mouse pointer.</summary><value>The type of graph element as a <see cref="T:Sybase.DataWindow.GraphObjectType"/>.</value>
        </member>
        <member name="F:Sybase.DataWindow.GraphObjectAtPointer.DataPoint">
            <summary>Gets the data point number currently under the mouse pointer.</summary><value>The number of the data point currently under the mouse pointer.</value><remarks>
				<b>DataPoint</b> is only meaningful if <see cref="F:Sybase.DataWindow.GraphObjectAtPointer.ObjectType"/> is <c>Data</c>.</remarks>
        </member>
        <member name="F:Sybase.DataWindow.GraphObjectAtPointer.SeriesName">
            <summary>Gets the name of the series currently under the mouse pointer.</summary><value>The name of the series currently under the mouse pointer.</value><remarks>
				<para>
					<b>SeriesName</b> is only meaningful if <see cref="F:Sybase.DataWindow.GraphObjectAtPointer.ObjectType"/> is <c>Data</c>, <c>Series</c>, <c>SeriesLabel</c>, or <c>SeriesAxis</c>.</para>
				<para>All graphs have at least one series, even if the graph was not created with an explicit series.  In this case, <i>SeriesName</i> will be an empty string. </para>
			</remarks>
        </member>
        <member name="M:Sybase.DataWindow.GraphObjectAtPointer.ToString">
            <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</summary><value>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</value>
        </member>
        <member name="T:Sybase.DataWindow.GraphType">
            <summary>The type of a graph object within a DataWindow.</summary><remarks>The graph type is determined when the DataWindow is first created in DataWindow Designer.</remarks>
        </member>
        <member name="F:Sybase.DataWindow.GraphType.Area">
            <summary>An area graph.</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphType.Bar">
            <summary>A bar graph.</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphType.Bar3D">
            <summary>A three-dimensional bar graph (series values appear overlapped).</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphType.SolidBar">
            <summary>A bar graph in which the bars have perspective.</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphType.StackedBar">
            <summary>A bar graph in which series values are stacked on one another.</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphType.SolidStackedBar">
            <summary>A bar graph in which series values are stacked on one another and the bars have perspective.</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphType.Column">
            <summary>A column graph.</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphType.Column3D">
            <summary>A three-dimensional column graph (series values appear overlapped).</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphType.SolidColumn">
            <summary>A column graph in which the columns have perspective.</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphType.StackedColumn">
            <summary>A column graph in which series values are stacked on one another.</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphType.SolidStackedColumn">
            <summary>A column graph in which series values are stacked on one another and the columns have perspective.</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphType.Line">
            <summary>A line graph.</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphType.Pie">
            <summary>A pie chart.</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphType.Scatter">
            <summary>A scatter graph or plot.</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphType.Area3D">
            <summary>A three-dimensional area graph</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphType.Line3D">
            <summary>A three-dimensional line graph.</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphType.Pie3D">
            <summary>A three-dimensional pie chart.</summary>
        </member>
        <member name="T:Sybase.DataWindow.LineStyle">
            <summary>Line styles used with DataWindow graphs.</summary>
        </member>
        <member name="F:Sybase.DataWindow.LineStyle.Continuous">
            <summary>A solid line. </summary>
        </member>
        <member name="F:Sybase.DataWindow.LineStyle.Dash">
            <summary>A series of dashes (hyphens).</summary>
        </member>
        <member name="F:Sybase.DataWindow.LineStyle.Dot">
            <summary>A series of dots (periods).</summary>
        </member>
        <member name="F:Sybase.DataWindow.LineStyle.DashDot">
            <summary>A series of dashes (hyphens) separated by dots (periods).</summary>
        </member>
        <member name="F:Sybase.DataWindow.LineStyle.DashDotDot">
            <summary>A series of dashes (hyphens) separated by two dots (periods).</summary>
        </member>
        <member name="F:Sybase.DataWindow.LineStyle.Transparent">
            <summary>The line allows the background shapes to show through.</summary>
        </member>
        <member name="T:Sybase.DataWindow.FillStyle">
            <summary>Fill pattern used for graph elements in a DataWindow.</summary>
        </member>
        <member name="F:Sybase.DataWindow.FillStyle.Solid">
            <summary>A solid color.</summary>
        </member>
        <member name="F:Sybase.DataWindow.FillStyle.Horizontal">
            <summary>Horizontal lines.</summary>
        </member>
        <member name="F:Sybase.DataWindow.FillStyle.Vertical">
            <summary>Vertical lines.</summary>
        </member>
        <member name="F:Sybase.DataWindow.FillStyle.ForwardDiagonal">
            <summary>Lines from upper left to lower right.</summary>
        </member>
        <member name="F:Sybase.DataWindow.FillStyle.BackwardDiagonal">
            <summary>Lines from lower left to upper right.</summary>
        </member>
        <member name="F:Sybase.DataWindow.FillStyle.Square">
            <summary>A pattern of squares.</summary>
        </member>
        <member name="F:Sybase.DataWindow.FillStyle.Diamond">
            <summary>A pattern of diamonds.</summary>
        </member>
        <member name="T:Sybase.DataWindow.SymbolStyle">
            <summary>Symbol styles associated with data points in a graph.</summary>
        </member>
        <member name="F:Sybase.DataWindow.SymbolStyle.None">
            <summary>No symbol.</summary>
        </member>
        <member name="F:Sybase.DataWindow.SymbolStyle.HollowBox">
            <summary>A hollow box.</summary>
        </member>
        <member name="F:Sybase.DataWindow.SymbolStyle.X">
            <summary>An X.</summary>
        </member>
        <member name="F:Sybase.DataWindow.SymbolStyle.Star">
            <summary>A star.</summary>
        </member>
        <member name="F:Sybase.DataWindow.SymbolStyle.HollowUpArrow">
            <summary>An outlined up arrow.</summary>
        </member>
        <member name="F:Sybase.DataWindow.SymbolStyle.HollowDownArrow">
            <summary>An outlined down arrow.</summary>
        </member>
        <member name="F:Sybase.DataWindow.SymbolStyle.HollowCircle">
            <summary>An outlined circle.</summary>
        </member>
        <member name="F:Sybase.DataWindow.SymbolStyle.HollowDiamond">
            <summary>An outlined diamond.</summary>
        </member>
        <member name="F:Sybase.DataWindow.SymbolStyle.SolidBox">
            <summary>A filled box.</summary>
        </member>
        <member name="F:Sybase.DataWindow.SymbolStyle.SolidDownArrow">
            <summary>A filled down arrow.</summary>
        </member>
        <member name="F:Sybase.DataWindow.SymbolStyle.SolidUpArrow">
            <summary>A filled up arrow.</summary>
        </member>
        <member name="F:Sybase.DataWindow.SymbolStyle.SolidDiamond">
            <summary>A filled diamond.</summary>
        </member>
        <member name="F:Sybase.DataWindow.SymbolStyle.SolidCircle">
            <summary>A filled circle.</summary>
        </member>
        <member name="F:Sybase.DataWindow.SymbolStyle.Plus">
            <summary>A plus sign.</summary>
        </member>
        <member name="T:Sybase.DataWindow.GraphObjectType">
            <summary>Enumeration describing an element within a DataWindow graph.</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphObjectType.Graph">
            <summary>Any location within the graph control that is not another <b>GraphObjectType</b>.</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphObjectType.Series">
            <summary>The line that connects the data points of a series when the graph's type is line or on the series label in the legend box.</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphObjectType.Data">
            <summary>A data point or other data marker.</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphObjectType.Category">
            <summary>The label for a category.</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphObjectType.Title">
            <summary>The title of the graph.</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphObjectType.SeriesLabel">
            <summary>The label of the series axis of a 3D graph.</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphObjectType.CategoryLabel">
            <summary>The label of the category axis. </summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphObjectType.ValueLabel">
            <summary>The label of the value axis.</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphObjectType.Legend">
            <summary>Within the legend, but not on a series label.</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphObjectType.SeriesAxis">
            <summary>The series axis of a 3D graph.</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphObjectType.CategoryAxis">
            <summary>The category axis or between the category labels.</summary>
        </member>
        <member name="F:Sybase.DataWindow.GraphObjectType.ValueAxis">
            <summary>The value axis, including on the value labels.</summary>
        </member>
        <member name="T:Sybase.DataWindow.AdoTransaction">
            <summary>Associates a DataWindow with a database using an ADO.NET connection</summary>
        </member>
        <member name="M:Sybase.DataWindow.AdoTransaction.#ctor">
            <overloads>Initializes a new instance of the <b>AdoTransaction</b> class.</overloads><summary>Creates a new instance of the <b>AdoTransaction</b> class.</summary><example>The following example provides code for connecting to the ASA sample database provided with DataWindow .NET:
			<code lang="C#">
			System.Data.OleDb.OleDbConnection conn = new System.Data.OleDb.OleDbConnection();
			conn.ConnectionString = "Data Source=EAS Demo DB V10;Provider=ASAProv.90;User ID=dba;Password=sql;";
			conn.Open();

			AdoTransaction sqlca = new AdoTransaction();
			sqlca.Connection = conn;
			sqlca.BindConnection();
			</code>
			
			<code lang="Visual Basic">
			Dim Conn As New System.Data.OleDb.OleDbConnection
			Conn.ConnectionString = "Data Source=EAS Demo DB V10;Provider=ASAProv.90;User ID=dba;Password=sql;"
			Conn.Open()
			
			Dim SQLCA As New Sybase.DataWindow.AdoTransaction
			SQLCA.Connection = Conn
			SQLCA.BindConnection()
			</code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.AdoTransaction.#ctor(System.Data.IDbConnection)">
            <summary>Creates a new instance of the <b>AdoTransaction</b> class and associates it with an ADO.NET connection.</summary><param name="DbConnection">The ADO.NET connection.</param><example>The following example provides code for connecting to the ASA sample database provided with DataWindow .NET:
			<code lang="C#">
			System.Data.OleDb.OleDbConnection conn = new System.Data.OleDb.OleDbConnection();
			conn.ConnectionString = "Data Source=EAS Demo DB V10;Provider=ASAProv.90;User ID=dba;Password=sql;";
			conn.Open();
			
			AdoTransaction sqlca = new AdoTransaction(conn);
			sqlca.BindConnection();
			</code>
			
			<code lang="Visual Basic">
			Dim Conn As New System.Data.OleDb.OleDbConnection
			Conn.ConnectionString = "Data Source=EAS Demo DB V10;Provider=ASAProv.90;User ID=dba;Password=sql;"
			Conn.Open()
			
			Dim SQLCA As New Sybase.DataWindow.AdoTransaction(Conn)
			SQLCA.BindConnection()
			</code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.AdoTransaction.#ctor(System.Data.IDbConnection,System.String)">
            <summary>Creates a new instance of the <b>AdoTransaction</b> class, associates it with an ADO.NET connection, and initializes additional database parameters.</summary><param name="DbConnection">The ADO.NET connection.</param><param name="DbParameter">Comma-delimited string of parameters.</param><remarks>
				<para>Consult the <i>Connection Reference</i> for information on specific parameter values.</para>
			</remarks><example>The following example provides code for connecting to the ASA sample database provided with DataWindow .NET. 
			The connection is initialized with a DataWindow .NET-specific parameter that causes trailing spaces of character
			strings to be trimmed prior to display within the DataWindow.
			<code lang="C#">
			System.Data.OleDb.OleDbConnection conn = new System.Data.OleDb.OleDbConnection();
			conn.ConnectionString = "Data Source=EAS Demo DB V10;Provider=ASAProv.90;User ID=dba;Password=sql;";
			conn.Open();
			
			AdoTransaction sqlca = new AdoTransaction(conn, "TrimSpaces=1");
			sqlca.BindConnection();
			</code>
			<code lang="Visual Basic">
			Dim Conn As New System.Data.OleDb.OleDbConnection
			Conn.ConnectionString = "Data Source=EAS Demo DB V10;Provider=ASAProv.90;User ID=dba;Password=sql;"
			Conn.Open()
			
			Dim SQLCA As New Sybase.DataWindow.AdoTransaction(Conn, "TrimSpaces=1")
			SQLCA.BindConnection()
			</code>
			</example>
        </member>
        <member name="M:Sybase.DataWindow.AdoTransaction.BindConnection">
            <summary>Associates an ADO.NET connection with the DataWindow .NET database interaction layer.</summary><exception cref="T:System.InvalidOperationException">
            <list type="bullet">
					<item>The connection has already been bound, or</item>
					<item>The connection is null or not in an open state, or</item>
					<item>The ADO.NET connection type is not OleDb.OleDbConnection.</item>
				</list>
			</exception><exception cref="T:Sybase.DataWindow.MethodFailureException">An unexpected error has occurred.</exception><remarks><para>The ADO.NET connection must be bound in order to be utilized by DataWindows.  Failure to do so results in
			a <see cref="T:System.InvalidOperationException"/> when invoking the <see cref="M:Sybase.DataWindow.IDataWindowBase.SetTransaction(Sybase.DataWindow.AdoTransaction)"/> method.</para>
			<para>Only System.Data.OleDb.OleDbConnection is currently supported by the <see cref="T:Sybase.DataWindow.AdoTransaction"/> class.</para></remarks><example>
			<code lang="C#">
			System.Data.OleDb.OleDbConnection conn = new System.Data.OleDb.OleDbConnection();
			conn.ConnectionString = "Data Source=EAS Demo DB V10;Provider=ASAProv.90;User ID=dba;Password=sql;";
			conn.Open();
			
			AdoTransaction sqlca = new AdoTransaction(conn);
			sqlca.BindConnection();
			</code>
			<code lang="Visual Basic">
			Dim Conn As New System.Data.OleDb.OleDbConnection
			Conn.ConnectionString = "Data Source=EAS Demo DB V10;Provider=ASAProv.90;User ID=dba;Password=sql;"
			Conn.Open()
			
			Dim SQLCA As New Sybase.DataWindow.AdoTransaction(Conn)
			SQLCA.BindConnection()
			</code>
			</example><seealso cref="M:Sybase.DataWindow.AdoTransaction.UnbindConnection"/>
        </member>
        <member name="M:Sybase.DataWindow.AdoTransaction.UnbindConnection">
            <summary>Disassociates the current ADO.NET connection from the DataWindow .NET database interaction layer.</summary><remarks>You must also call this method prior to changing the <see cref="P:Sybase.DataWindow.AdoTransaction.Connection"/> or <see cref="P:Sybase.DataWindow.AdoTransaction.DbParameter"/>
			 properties of the <see cref="T:Sybase.DataWindow.AdoTransaction"/> object. After modifying these properties, 
			 you must call <see cref="M:Sybase.DataWindow.AdoTransaction.BindConnection"/> again and then 
			 <see cref="M:Sybase.DataWindow.IDataWindowBase.SetTransaction(Sybase.DataWindow.AdoTransaction)"/> to associate the <see cref="T:Sybase.DataWindow.AdoTransaction"/> with a DataWindow. 
				<para><b>UnbindConnection</b> is called automatically when the ADO.NET connection is closed.</para>
			</remarks><seealso cref="M:Sybase.DataWindow.AdoTransaction.BindConnection"/>
        </member>
        <member name="P:Sybase.DataWindow.AdoTransaction.DbParameter">
            <summary>Gets or sets DataWindow .NET-specific database parameters.</summary><value>Comma-delimited string of database parameters.</value><exception cref="T:System.InvalidOperationException"><b>DbParameter</b> cannot be set if <see cref="T:Sybase.DataWindow.AdoTransaction"/> is currently bound to an ADO.NET connection.</exception><remarks>
			<para>You cannot modify <b>DbParameter</b> while an ADO.NET connection is bound to the <see cref="T:Sybase.DataWindow.AdoTransaction"/> instance, thus you may first need to unbind the current connection via <see cref="M:Sybase.DataWindow.AdoTransaction.UnbindConnection"/>.
			You can use the <see cref="P:Sybase.DataWindow.AdoTransaction.IsBound"/> method to determine if an ADO.NET connection
			is currently bound.</para>
			<para>For changes to <b>DbParameter</b> to take effect, the <see cref="M:Sybase.DataWindow.AdoTransaction.BindConnection"/> method must
			be subsequently invoked.</para>
			<para>See the <i>Connection Reference</i> for specifics on the supported parameters and their values.
			</para>
			</remarks><seealso cref="P:Sybase.DataWindow.AdoTransaction.IsBound"/>
        </member>
        <member name="P:Sybase.DataWindow.AdoTransaction.Connection">
            <summary>Gets or sets the <see cref="T:System.Data.IDbConnection"/> reference to be bound to DataWindow .NET's
			 database interaction layer. 
        </summary><value>The <see cref="T:System.Data.IDbConnection"/> reference.</value><exception cref="T:System.InvalidOperationException"><b>Connection</b> cannot be set if <see cref="T:Sybase.DataWindow.AdoTransaction"/> is currently bound to an ADO.NET connection.</exception><remarks>
			<para>Only System.Data.OleDb.OleDbConnection is currently supported for assignment to <b>Connection</b>.</para>
			<para>You cannot modify <b>Connection</b> while an ADO.NET connection is bound to the <see cref="T:Sybase.DataWindow.AdoTransaction"/> instance, thus
			you may first need to unbind the current connection via <see cref="M:Sybase.DataWindow.AdoTransaction.UnbindConnection"/>. You can use the <see cref="P:Sybase.DataWindow.AdoTransaction.IsBound"/> method to determine if an ADO.NET connection
			is currently bound.</para>
			<para>For changes to <b>Connection</b> to take effect, the <see cref="M:Sybase.DataWindow.AdoTransaction.BindConnection"/> method must
			be subsequently invoked.</para>
			</remarks><seealso cref="P:Sybase.DataWindow.AdoTransaction.IsBound"/>
        </member>
        <member name="P:Sybase.DataWindow.AdoTransaction.IsBound">
            <summary>Gets a value that indicates whether the ADO.NET connection has been bound to the DataWindow .NET database interaction layer.</summary><value><c>true</c> if the <see cref="P:Sybase.DataWindow.AdoTransaction.Connection"/> has been bound, otherwise <c>false</c>.</value><example>The following code fragment checks to see if an ADO.NET connection has already been bound to the
			<see cref="T:Sybase.DataWindow.AdoTransaction"/> and unbinds it in order to set one of the <see cref="P:Sybase.DataWindow.AdoTransaction.DbParameter"/> values.
			<code lang="C#">
			if (sqlca.IsBound)
				sqlca.UnbindConnection();
			sqlca.DbParameter = "TrimSpaces=1";
			sqlca.BindConnection();
			</code>
			
			<code lang="Visual Basic">
        If (SQLCA.IsBound) Then
            SQLCA.UnbindConnection()
        End If
        SQLCA.DbParameter = "TrimSpaces=1"
        SQLCA.BindConnection()
			</code>
			</example><seealso cref="M:Sybase.DataWindow.AdoTransaction.BindConnection"/><seealso cref="M:Sybase.DataWindow.AdoTransaction.UnbindConnection"/>
        </member>
        <member name="P:Sybase.DataWindow.AdoTransaction.Transaction">
            <summary>Gets or sets the ADO.NET transaction associated with the <see cref="T:Sybase.DataWindow.AdoTransaction"/> instance. </summary><value>The <see cref="T:System.Data.IDbTransaction"/> reference.</value><exception cref="T:System.InvalidOperationException"><b>Transaction</b> cannot be set if <see cref="T:Sybase.DataWindow.AdoTransaction"/> is not bound to an ADO.NET connection.</exception><remarks>When you start a transaction for the ADO.NET connection stored in <see cref="P:Sybase.DataWindow.AdoTransaction.Connection"/>, 
			you must set the <b>Transaction</b> to the started transaction before 
        you manipulate the data or issue a <see cref="M:System.Data.IDbTransaction.Commit"/> or <see cref="M:System.Data.IDbTransaction.Rollback"/>.         
        </remarks><example>The following code updates a DataWindowControl within a transaction with an isolation
			level of read-committed, and rolls back changes if an error occurs:
			
			<code lang="C#">
			try 
			{
				m_sqlca.Transaction = m_sqlca.Connection.BeginTransaction(IsolationLevel.ReadCommitted);
				dwCustomer.UpdateData(true, false);
				m_sqlca.Transaction.Commit();
				dwCustomer.ResetUpdateStatus();
			} 
			catch (Sybase.DataWindow.DbErrorException dbError) 
			{
				// problem in DataWindow update could be amended by user action
				MessageBox.Show(dbError.SqlErrorText, "Update Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
				m_sqlca.Transaction.Rollback();
			} 
			catch (System.InvalidOperationException opError) 
			{
				// Transaction was already rolled back or committed or connection is no longer open
				MessageBox.Show(opError.Message, "Invalid Operation Attempted", MessageBoxButtons.OK, MessageBoxIcon.Stop);
			}
			catch (System.Exception otherError) 
			{
				// Some unexpected error occurred
				MessageBox.Show(otherError.Message, "Unknown Error", MessageBoxButtons.OK, MessageBoxIcon.Stop);
				try
				{
					m_sqlca.Transaction.Rollback();
				}
				catch (System.Exception IgnoredException)
				{
					// not much to do here if rollback failed!
				}
			}
			</code>
			<code lang="Visual Basic">

Try
    mSQLCA.Transaction = mSQLCA.Connection.BeginTransaction(IsolationLevel.ReadCommitted)
    dwCustomer.UpdateData(True, False)
    mSQLCA.Transaction.Commit()
    dwCustomer.ResetUpdateStatus()

Catch DbError As Sybase.DataWindow.DbErrorException
    ' problem in DataWindow update could be amended by user action
    MsgBox(DbError.SqlErrorText, MsgBoxStyle.Exclamation + MsgBoxStyle.OKOnly, "Update Error")
    mSQLCA.Transaction.Rollback()

Catch OpError As System.InvalidOperationException
    ' Transaction was already rolled back or committed or connection is no longer open
    MsgBox(OpError.Message, MsgBoxStyle.Critical + MsgBoxStyle.OKOnly, "Invalid Operation Attempted")

Catch OtherError As System.Exception
    ' Some unexpected error occurred
    MsgBox(OtherError.Message, MsgBoxStyle.Critical + MsgBoxStyle.OKOnly, "Unknown Error")
    Try
        mSQLCA.Transaction.Rollback()
    Catch IgnoredException As System.Exception
        ' not much to do here if rollback failed!
    End Try
End Try
			</code>
			</example><seealso cref="M:System.Data.IDbTransaction.Commit"/><seealso cref="M:System.Data.IDbTransaction.Rollback"/>
        </member>
    </members>
</doc>
